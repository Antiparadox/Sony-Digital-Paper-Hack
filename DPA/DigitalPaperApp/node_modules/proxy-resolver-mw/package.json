{
  "_args": [
    [
      "proxy-resolver-mw@git+ssh://git@github.com/LinfinyJapan/dps_node-proxy-resolver-mw.git",
      "/Users/altair/Work/v1.4.0.19120/dps_utility/release/dps_digitalpaperapp-pc/node_modules/mw-automagic-client"
    ]
  ],
  "_from": "git+ssh://git@github.com/LinfinyJapan/dps_node-proxy-resolver-mw.git",
  "_id": "proxy-resolver-mw@0.1.0",
  "_inCache": true,
  "_installable": true,
  "_location": "/proxy-resolver-mw",
  "_phantomChildren": {},
  "_requested": {
    "hosted": {
      "directUrl": "https://raw.githubusercontent.com/LinfinyJapan/dps_node-proxy-resolver-mw/master/package.json",
      "gitUrl": "git://github.com/LinfinyJapan/dps_node-proxy-resolver-mw.git",
      "httpsUrl": "git+https://github.com/LinfinyJapan/dps_node-proxy-resolver-mw.git",
      "shortcut": "github:LinfinyJapan/dps_node-proxy-resolver-mw",
      "ssh": "git@github.com:LinfinyJapan/dps_node-proxy-resolver-mw.git",
      "sshUrl": "git+ssh://git@github.com/LinfinyJapan/dps_node-proxy-resolver-mw.git",
      "type": "github"
    },
    "name": "proxy-resolver-mw",
    "raw": "proxy-resolver-mw@git+ssh://git@github.com/LinfinyJapan/dps_node-proxy-resolver-mw.git",
    "rawSpec": "git+ssh://git@github.com/LinfinyJapan/dps_node-proxy-resolver-mw.git",
    "scope": null,
    "spec": "git+ssh://git@github.com/LinfinyJapan/dps_node-proxy-resolver-mw.git",
    "type": "hosted"
  },
  "_requiredBy": [
    "/mw-automagic-client"
  ],
  "_resolved": "git+ssh://git@github.com/LinfinyJapan/dps_node-proxy-resolver-mw.git#33c636037a6824ad2293d747241cb33b8db2b6e3",
  "_shasum": "2e45434e53e267e4dadeb4ea3ee75eb317ff8ca7",
  "_shrinkwrap": null,
  "_spec": "proxy-resolver-mw@git+ssh://git@github.com/LinfinyJapan/dps_node-proxy-resolver-mw.git",
  "_where": "/Users/altair/Work/v1.4.0.19120/dps_utility/release/dps_digitalpaperapp-pc/node_modules/mw-automagic-client",
  "author": "",
  "dependencies": {
    "debug": "^2.2.0",
    "mw-error": "git+ssh://git@github.com/LinfinyJapan/dps_node-mw-error.git",
    "nan": "^2.4.0"
  },
  "description": "Windows/macOS(OS X) のプロキシ設定を取得する。",
  "devDependencies": {},
  "gitHead": "33c636037a6824ad2293d747241cb33b8db2b6e3",
  "gypfile": true,
  "license": "SEE LICENSE IN LICENSE",
  "main": "index.js",
  "name": "proxy-resolver-mw",
  "optionalDependencies": {},
  "readme": "# node-proxy-resolver-mw\r\n\r\nWindows/macOS(OS X) のプロキシ設定を取得する。\r\n\r\n## 機能\r\n- 指定のURLに接続する際に使用されるプロキシサーバーの設定（ホスト名:ポート番号）を取得する。\r\n\r\n### Windows の場合\r\n- Internet Explorer のプロキシ設定を使用する\r\n  - [インターネットのプロパティ] > [接続] > [LANの設定]\r\n- 自動構成に対応する\r\n  - \"Web Proxy Auto-Discovery (WPAD)\"による自動構成\r\n    - [設定を自動的に検出する] がチェックされていた場合 \r\n  - \"Proxy Auto-Configuration (PAC)\"による自動構成\r\n    - [自動構成のスクリプトを使用する] にチェックされていた場合\r\n- 以下の順序にてプロキシ設定を確認する\r\n  1. \"Web Proxy Auto-Discovery (WPAD)\"による自動構成\r\n  2. \"Proxy Auto-Configuration (PAC)\"による自動構成\r\n  3. 手動でのプロキシ設定（ホスト名:ポート番号）\r\n\r\n### macOS(OS X) の場合\r\n- システムのインターネット接続のプロキシ設定を使用する\r\n  - [自動プロキシ検出]および[自動プロキシ構成]に対応する\r\n  - 使用されるプロキシ設定の優先順位はシステムによって決定される\r\n\r\n\r\n## インストール\r\n```\r\n$ git clone github.com:LinfinyJapan/dps_node-proxy-resolver-mw.git\r\n$ cd node-proxy-resolver-mw\r\n$ npm install\r\n```\r\n\r\n## インタフェース\r\n- [interface.md](doc/interface.md)\r\n\r\n\r\n## 使い方\r\n\r\n```js\r\nconst proxyResolver = require('proxy-resolver-mw');\r\n\r\nconst targetUrl = 'https://github.com/';\r\nconst userAgent = 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36';\r\n\r\nproxyResolver.getProxy(targetUrl, userAgent, function (error, proxy) {\r\n  if (error) {\r\n    console.error(error);\r\n    return;\r\n  }\r\n  console.log('Proxy: ' + proxy);\r\n});\r\n\r\n/* Console output:\r\nProxy: proxy.sonycity.sony.co.jp:10080\r\n*/\r\n```\r\n\r\n## デバッグ方法\r\n\r\n### Windows の場合\r\n\r\nVisual Studio を使用して C/C++ のコードをデバッグする際の手順です。\r\n\r\n0. 事前に npm install にて依存するmoduleなどをインストールしておく\r\n  ```\r\n  $ cd node-proxy-resolver-mw\r\n  $ npm install\r\n  \r\n  ```\r\n1. node-gyp でビルドを行い、Visual Studio で solution file を開く\r\n  ```\r\n  $ node-gyp build\r\n  $ start ./build/binding.sln\r\n  \r\n  ```\r\n2. \"proxy_resolver\"プロジェクトのプロパティを開く\r\n3. [構成(C):] を [Release] に変更する\r\n4. [構成プロパティ] > [デバッグ] を開く\r\n5. [コマンド]と[コマンド引数]の値を以下のように設定する\r\n  - コマンド: \r\n    - node.exe のファイルパス\r\n    - 例）C:\\Program Files (x86)\\nodejs\\node.exe\r\n  - コマンド引数：\r\n    - 実行対象の js ファイルのパス\r\n    - 例）D:\\node-proxy-resolver-mw\\example\\example.js\r\n6. Releaseビルドする\r\n7. デバッグ実行する\r\n\r\n\r\n### macOS(OS X) の場合\r\n\r\nXcode を使用して C/C++ のコードをデバッグする際の手順です。\r\n\r\n0. 事前に npm install にて依存するmoduleなどをインストールしておく\r\n  ```\r\n  $ cd node-proxy-resolver-mw\r\n  $ npm install\r\n  \r\n  ```\r\n1. node-gyp で Xcode の project file を生成し、Xcodeで開く\r\n  ```\r\n  $ cd node-proxy-resolver-mw\r\n  $ node-gyp build\r\n  $ node-gyp configure -- -f xcode\r\n  $ open ./build/binding.xcodeproj/\r\n  \r\n  ```\r\n2. 実行ファイルに node.js を指定する\r\n  1. Xcode のメニューから [Product] > [Scheme] > [Edit Scheme] と選択する\r\n  2. ダイアログ上で [Run] > [Info] を選択し、[Executable] を [Other...] に設定する\r\n  3. [Choose an executable to launch] という実行ファイルの選択ダイアログが表示される\r\n  4. ターミナルで which を実行し、node.js のインストールパスをコピーする\r\n    ```\r\n    $ which node\r\n    /usr/local/bin/node\r\n    \r\n    ```\r\n  5. 実行ファイルの選択ダイアログ上で [Command] + [Shift] + [G] を入力する\r\n  6. [Go to the folder:] に node.js のインストールパスを貼り付け、[Choose]を押す\r\n3. 実行時の引数に js ファイルを指定する\r\n  1. ダイアログ上で [Run] > [Arguments] を選択し、[Arguments Passed On Launch] の [＋] を押す\r\n  2. 実行対象のjsファイルの絶対パス（\\\"で括る）を入力し、[Close] を押す\r\n4. リンクするライブラリを設定する\r\n  1. Xcode上の左のペインから [binding] を選択する\r\n  2. Xcode上の中央のペインから [Build Phases] を選択する\r\n  3. [Link Binary With Libraries] の [＋] を押し、以下を追加する\r\n    - CoreFoundation.framework\r\n    - CFNetwork.framework\r\n5．ビルドして、デバッグ実行する\r\n\r\n[補足説明]\r\n- ”npm install” や \"node-gyp build\"を行うと、Xcode の project file が削除されます\r\n  - ”node-gyp configure -- -f xcode”を実行して、project file を再生成してください\r\n\r\n\r\n",
  "readmeFilename": "README.md",
  "scripts": {
    "doc": "jsdoc2md -c doc/conf.json index.js > doc/interface.md",
    "install": "node-gyp rebuild",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "version": "0.1.0"
}
