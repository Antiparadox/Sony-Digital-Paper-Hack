#include "ProxyResolver.h"
#include "WinErrorCode.h"
#include "StringUtil.h"
#include "../Log.h"

#include <winhttp.h>


static void FreeIeProxyConfig(
	/*[in,out]*/ WINHTTP_CURRENT_USER_IE_PROXY_CONFIG& config
	) {
	if (config.lpszProxy) {
		::GlobalFree(config.lpszProxy);
		config.lpszProxy = nullptr;
	}

	if (config.lpszProxyBypass) {
		::GlobalFree(config.lpszProxyBypass);
		config.lpszProxyBypass = nullptr;
	}

	if (config.lpszAutoConfigUrl) {
		::GlobalFree(config.lpszAutoConfigUrl);
		config.lpszAutoConfigUrl = nullptr;
	}
}


std::string ProxyResolver::GetProxy(
	/*[in]*/ const std::string& targetUrl,
	/*[in]*/ const std::string& userAgent,
	/*[out]*/ std::string& proxy
	)
{
	std::string errMsg;

	HINTERNET hSession = nullptr;
	WINHTTP_CURRENT_USER_IE_PROXY_CONFIG ieProxyConfig = { 0 };

	try {
		LOG_DEBUG(_T("URL: %S"), targetUrl.c_str());
		LOG_DEBUG(_T("UserAgent: %S"), userAgent.c_str());

		std::wstring wProxy;
		proxy.clear();

		// convert std::string URL to std::wstring URL
		std::wstring wTargetUrl;
		errMsg = StringUtil::StringToWString(targetUrl, wTargetUrl);
		if (!errMsg.empty()) {
			throw errMsg;
		}

		std::wstring wUserAgent;
		errMsg = StringUtil::StringToWString(userAgent, wUserAgent);
		if (!errMsg.empty()) {
			throw errMsg;
		}

		// initialize WinHTTP functions and get a WinHTTP-session handle
		hSession = ::WinHttpOpen(
			wUserAgent.c_str(),
			WINHTTP_ACCESS_TYPE_DEFAULT_PROXY,
			WINHTTP_NO_PROXY_NAME,
			WINHTTP_NO_PROXY_BYPASS,
			0
			);
		if (!hSession) {
			errMsg = WinErrorCode::GetLastError();
			LOG_ERROR(_T("WinHttpOpen() failed. [%S]"), errMsg.c_str());
			throw errMsg;
		}

		// retrieves the Internet Explorer proxy configuration for the current user
		BOOL bResult = ::WinHttpGetIEProxyConfigForCurrentUser(&ieProxyConfig);
		if (!bResult) {
			errMsg = WinErrorCode::GetLastError();
			LOG_ERROR(_T("WinHttpGetIEProxyConfigForCurrentUser() failed. [%S]"), errMsg.c_str());
			throw errMsg;
		}

		WINHTTP_PROXY_INFO proxyInfo = { 0 };

		// if "Automatically detect settings" is checked,,,
		if (ieProxyConfig.fAutoDetect){			

			// retrieve the proxy data by "Web Proxy Auto-Discovery (WPAD)"
			WINHTTP_AUTOPROXY_OPTIONS autoProxyOptions = { 0 };
			autoProxyOptions.dwFlags = WINHTTP_AUTOPROXY_AUTO_DETECT;
			autoProxyOptions.dwAutoDetectFlags = WINHTTP_AUTO_DETECT_TYPE_DHCP | WINHTTP_AUTO_DETECT_TYPE_DNS_A;
			autoProxyOptions.fAutoLogonIfChallenged = TRUE;

			bResult = ::WinHttpGetProxyForUrl(hSession, wTargetUrl.c_str(), &autoProxyOptions, &proxyInfo);
			if (!bResult) {
				errMsg = WinErrorCode::GetLastError();
				LOG_ERROR(_T("WinHttpGetProxyForUrl() failed. [%S]"), errMsg.c_str());
			}
			else if (proxyInfo.lpszProxy){
				wProxy = proxyInfo.lpszProxy;
			}
		}

		// if "Use automatic configuration script" is checked,,,
		if (wProxy.empty() && ieProxyConfig.lpszAutoConfigUrl){

			// retrieve the proxy data by "Proxy Auto-Configuration (PAC)"
			WINHTTP_AUTOPROXY_OPTIONS autoProxyOptions = { 0 };
			autoProxyOptions.dwFlags = WINHTTP_AUTOPROXY_CONFIG_URL;
			autoProxyOptions.lpszAutoConfigUrl = ieProxyConfig.lpszAutoConfigUrl;
			autoProxyOptions.fAutoLogonIfChallenged = TRUE;

			bResult = ::WinHttpGetProxyForUrl(hSession, wTargetUrl.c_str(), &autoProxyOptions, &proxyInfo);
			if (!bResult) {
				errMsg = WinErrorCode::GetLastError();
				LOG_ERROR(_T("WinHttpGetProxyForUrl() failed. [%S]"), errMsg.c_str());
			}
			else if (proxyInfo.lpszProxy){
				wProxy = proxyInfo.lpszProxy;
			}
		}

		// if "Use a proxy server for your LAN" is set,,,
		if (wProxy.empty() && ieProxyConfig.lpszProxy){
			wProxy = ieProxyConfig.lpszProxy;
		}

		if (!wProxy.empty()) {
			errMsg = StringUtil::WStringToString(wProxy, proxy);
			if (!errMsg.empty()) {
				throw errMsg;
			}
		}

		errMsg.clear();
	}
	catch (...) {
		if (errMsg.empty()) {
			errMsg = WinErrorCode::GetLastError();
			LOG_ERROR(_T("Unknown error occurred. [%S]"), errMsg.c_str());
		}
	}

	if (hSession) {
		::WinHttpCloseHandle(hSession);
		hSession = nullptr;
	}

	FreeIeProxyConfig(ieProxyConfig);

	return errMsg;
}

