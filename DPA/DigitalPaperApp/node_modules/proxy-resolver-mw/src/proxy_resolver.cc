//
//  proxy_config.cc
//
//  Copyright 2016 Sony Corporation
//

#include <nan.h>
#include <node.h>
#include <string>

#include "ResolveProxyWorker.h"

NAN_METHOD(getProxy)
{
	Nan::HandleScope();

	// check the number of function arguments
	if (info.Length() != 3) {
		Nan::ThrowTypeError("Number of arguments must be 3.");
		return;
	}

	// check the types of function arguments
	if (!info[0]->IsString()) {
		Nan::ThrowTypeError("1st argument (targetUrl) must be String.");
		return;
	}
	if (!info[1]->IsString()) {
		Nan::ThrowTypeError("2nd argument (userAgent) must be String.");
		return;
	}
	if (!info[2]->IsFunction()) {
		Nan::ThrowTypeError("3rd argument (callback) must be Function.");
		return;
	}

	Nan::Utf8String* szTargetUrl = new Nan::Utf8String(info[0]);
	Nan::Utf8String* szUserAgent = new Nan::Utf8String(info[1]);
	Nan::Callback* callback = new Nan::Callback(info[2].As<v8::Function>());

	// start a background task
	std::string strTargetUrl(**szTargetUrl);
	std::string strUserAgent(**szUserAgent);
	Nan::AsyncQueueWorker(new ResolveProxyWorker(strTargetUrl, strUserAgent, callback));
}

NAN_MODULE_INIT(init)
{
	NAN_EXPORT(target, getProxy);
}

NODE_MODULE(proxy_resolver, init);
