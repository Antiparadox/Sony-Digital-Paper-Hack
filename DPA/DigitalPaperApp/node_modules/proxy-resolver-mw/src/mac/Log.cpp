#include "../Log.h"
#include <string>
#include <sstream>
#include <sys/time.h>
#include <unistd.h>

#define LOG_ENV_WILDCARD	_T("*")
#define LOG_ENV_DELIMITER	_T(',')

const tchar* Log::ENV_DEBUG = ::getenv(_T("DEBUG"));

bool Log::CanExport(
	/*[in]*/ const tchar* tag
	)
{
	if (!tag || ::strlen(tag) == 0) {
		return false;
	}

	if (!ENV_DEBUG) {
		return false;
	}

	tstringstream streamEnvDebug(ENV_DEBUG);
	tstring field;
	while (std::getline(streamEnvDebug, field, LOG_ENV_DELIMITER)) {
		if (::strcasecmp(LOG_ENV_WILDCARD, field.c_str()) == 0) {
			return true;
		}
		if (::strcasecmp(tag, field.c_str()) == 0) {
			return true;
		}
	}
	return false;
}

tstring Log::GetHeader()
{
    const pid_t pid = ::getpid();
    
    uint64_t tid = 0;
    pthread_threadid_np(nullptr, &tid);
    
    struct timeval now;
    ::gettimeofday(&now, nullptr);
    struct tm* pnow = ::localtime(&now.tv_sec);
    
	char szHeader[64] = { 0 };
	::snprintf(
		szHeader,
        sizeof(szHeader) - 1,
        "[%04d/%02d/%02d %02d:%02d:%02d.%06d][%X][%08X]",
		pnow->tm_year + 1900,
		pnow->tm_mon + 1,
		pnow->tm_mday,
		pnow->tm_hour,
		pnow->tm_min,
		pnow->tm_sec,
		now.tv_usec,
		pid,
		(unsigned int)tid
		);

	tstring header = szHeader;
	return header;
}

