//
//  ProxyResolver.cpp
//
//  Copyright 2016 Sony Corporation
//

#import <CoreFoundation/CoreFoundation.h>
#import <SystemConfiguration/SystemConfiguration.h>
#import <CFNetwork/CFNetwork.h>

#include <string>
#include <vector>

#include "AutoCfRef.h"
#include "ProxyResolver.h"
#include "MacErrorCode.h"
#include "StringUtils.h"
#include "../Log.h"



/**
 * CFNetworkExecuteProxyAutoConfigurationURL() 用の callback 関数
 *
 * @param client    CFTypeRef へのポインタ
 * @param proxies
 * @param error
 */
void ResultCallback(
                    void* client,
                    CFArrayRef proxies,
                    CFErrorRef error
                    ) {
    if (!client) {
        LOG_ERROR("client == nullptr");
        return;
    }
    
    CFTypeRef* result_ptr = reinterpret_cast<CFTypeRef*>(client);
    if (error != NULL) {
        *result_ptr = CFRetain(error);
    } else {
        *result_ptr = CFRetain(proxies);
    }
    CFRunLoopStop(CFRunLoopGetCurrent());
}


/**
 *
 */
std::string ProxyResolver::GetProxy(
                                    /*[in]*/ const std::string& targetUrl,
                                    /*[in]*/ const std::string& userAgent,
                                    /*[out]*/ std::string& proxy
                    ) {
    std::string errMsg;
    
    try {
        // 接続先URLを文字列からCFURLに変換する
        const AutoCfRef<CFURLRef> url = CFURLCreateWithBytes(
                                                             kCFAllocatorDefault,
                                                             (const UInt8*)targetUrl.c_str(),
                                                             targetUrl.size(),
                                                             kCFStringEncodingASCII,
                                                             nullptr);
        if (!url) {
            errMsg = MacErrorCode::GetLastError();
            LOG_ERROR("CFURLCreateWithBytes(%s) failed. [%s]", targetUrl.c_str(), errMsg.c_str());
            throw errMsg;
        }
        
        // システムのインターネット接続のプロキシ設定を取得する
        const AutoCfRef<CFDictionaryRef> systemProxyDic = CFNetworkCopySystemProxySettings();
        if (!systemProxyDic) {
            errMsg = MacErrorCode::GetLastError();
            LOG_ERROR("CFNetworkCopySystemProxySettings() failed. [%s]", errMsg.c_str());
            throw errMsg;
        }
        
        // 指定されたURLに接続する際に利用すべきプロキシ設定の優先度順リストを取得する
        const AutoCfRef<CFArrayRef> proxyArray = CFNetworkCopyProxiesForURL(url, systemProxyDic);
        if (!proxyArray) {
            errMsg = MacErrorCode::GetLastError();
            LOG_ERROR("CFNetworkCopyProxiesForURL() failed. [%s]", errMsg.c_str());
            throw errMsg;
        }
        
        const CFIndex count = CFArrayGetCount(proxyArray);
        for (CFIndex i = 0; i < count; i++) {
            // プロキシ設定を取得する
            const CFDictionaryRef proxyDic = (CFDictionaryRef)CFArrayGetValueAtIndex(proxyArray, i);
            if (!proxyDic) {
                errMsg = MacErrorCode::GetLastError();
                LOG_ERROR("CFArrayGetValueAtIndex(%d) failed. [%s]", i, errMsg.c_str());
                continue;
            }
            
            // プロキシ設定の種類に応じて、プロキシ設定を取得する
            errMsg = ProxyResolver::GetProxyFromDictionary(url, proxyDic, proxy);
            if (!errMsg.empty()) {
                continue;
            }
            
            // プロキシ設定を取得できた場合
            break;
        }
    }
    catch (...) {
        if (errMsg.empty()) {
            errMsg = MacErrorCode::GetLastError();
            LOG_ERROR("Unknown error occurred. [%s]", errMsg.c_str());
        }
    }
    
    return errMsg;
}


/**
 * プロキシ設定の種類に応じて、プロキシ設定を取得する。
 */
std::string ProxyResolver::GetProxyFromDictionary(
                                    /*[in]*/ const CFURLRef targetUrl,
                                    /*[in]*/ const CFDictionaryRef proxyDic,
                                    /*[out]*/ std::string& proxy
){
    std::string errMsg;
    
    try {
        // プロキシ設定の種類を取得する
        const CFStringRef proxyType = (CFStringRef)CFDictionaryGetValue(proxyDic, kCFProxyTypeKey);
        
        if (CFEqual(proxyType, kCFProxyTypeNone)) {
            // プロキシを使用しない場合
            ;
        }
        else if (CFEqual(proxyType, kCFProxyTypeAutoConfigurationURL)) {
            // URL指定による自動プロキシ設定の場合
            
            // Proxy Auto Configuration (PAC) の URL を取得する
            const CFURLRef pacUrl = (CFURLRef)CFDictionaryGetValue(proxyDic, kCFProxyAutoConfigurationURLKey);
            if (!pacUrl) {
                errMsg = MacErrorCode::GetLastError();
                LOG_ERROR("CFDictionaryGetValue(kCFProxyAutoConfigurationURLKey) failed. [%s]", errMsg.c_str());
                throw errMsg;
            }
            
            // PAC ファイルをダウンロードし、プロキシ設定を取得する
            errMsg = ProxyResolver::GetProxyByAutoConfigurationURL(targetUrl, pacUrl, proxy);
            if (!errMsg.empty()) {
                throw errMsg;
            }
        }
        else if (CFEqual(proxyType, kCFProxyTypeAutoConfigurationJavaScript)) {
            // JavaScriptによる自動プロキシ設定の場合
            
            // Proxy Auto Configuration (PAC) の JavaScript を取得する
            const CFStringRef pacScript = (CFStringRef)CFDictionaryGetValue(proxyDic, kCFProxyAutoConfigurationJavaScriptKey);
            if (!pacScript) {
                errMsg = MacErrorCode::GetLastError();
                LOG_ERROR("CFDictionaryGetValue(kCFProxyAutoConfigurationJavaScriptKey) failed. [%s]", errMsg.c_str());
                throw errMsg;
            }
            
            // JavaScript からプロキシ設定を取得する
            errMsg = ProxyResolver::GetProxyByAutoConfigurationScript(targetUrl, pacScript, proxy);
            if (!errMsg.empty()) {
                throw errMsg;
            }
        }
        else {
            // その他の場合（プロトコル毎に個別にプロキシが設定されている場合）
            
            // プロキシサーバーのホスト名とポート番号を取得する
            errMsg = ProxyResolver::GetProxyServerString(proxyDic, proxy);
            if (!errMsg.empty()) {
                throw errMsg;
            }
        }
    }
    catch (...) {
        if (errMsg.empty()) {
            errMsg = MacErrorCode::GetLastError();
            LOG_ERROR("Unknown error occurred. [%s]", errMsg.c_str());
        }
    }
    
    return errMsg;
}



/**
 * Proxy Auto Configuration (PAC) ファイルからプロキシ設定を取得する。
 */
std::string ProxyResolver::GetProxyByAutoConfigurationURL(
                                           /*[in]*/ const CFURLRef targetUrl,
                                           /*[in]*/ const CFURLRef pacUrl,
                                           /*[out]*/ std::string& proxy
                                           ) {
    std::string errMsg;
    
    try {
        // Run Loop を使用して PAC のファイルをダウンロードするために、RunLoopSource を取得する
        CFTypeRef result = nullptr;
        CFStreamClientContext context = { 0, &result, nullptr, nullptr, nullptr };
        const AutoCfRef<CFRunLoopSourceRef> runLoopSrc =
                CFNetworkExecuteProxyAutoConfigurationURL(pacUrl, targetUrl, ResultCallback, &context);
        if (!runLoopSrc) {
            errMsg = MacErrorCode::GetLastError();
            LOG_ERROR("CFNetworkExecuteProxyAutoConfigurationURL() failed. [%s]", errMsg.c_str());
            throw errMsg;
        }
        
        
        // Run Loop を使用して PAC のファイルをダウンロードし、プロキシ設定を取得する
        const CFStringRef privateRunLoopMode = CFSTR("node-proxy-resolver-mw.ProxyAutoConfigurationURL");
        CFRunLoopAddSource(CFRunLoopGetCurrent(), runLoopSrc, privateRunLoopMode);
        CFRunLoopRunInMode(privateRunLoopMode, DBL_MAX, false);
        CFRunLoopRemoveSource(CFRunLoopGetCurrent(), runLoopSrc, privateRunLoopMode);
        
        if (!result) {
            errMsg = MacErrorCode::GetLastError();
            LOG_ERROR("CFRunLoopRunInMode() failed. [%s]", errMsg.c_str());
            throw errMsg;
        }
        
        if (CFGetTypeID(result) == CFErrorGetTypeID()) {
            CFRelease(result);
            errMsg = MacErrorCode::GetLastError();
            LOG_ERROR("CFRunLoopRunInMode() failed. [%s]", errMsg.c_str());
            throw errMsg;
        }
        
        // 指定されたURLに接続する際に利用すべきプロキシ設定の優先度順リストを取得する
        const AutoCfRef<CFArrayRef> proxyArray = (CFArrayRef)result;
        const CFIndex count = CFArrayGetCount(proxyArray);
        for (CFIndex i = 0; i < count; i++) {
            // プロキシ設定を取得する
            const CFDictionaryRef proxyDic = (CFDictionaryRef)CFArrayGetValueAtIndex(proxyArray, i);
            if (!proxyDic) {
                errMsg = MacErrorCode::GetLastError();
                LOG_ERROR("CFArrayGetValueAtIndex(%d) failed. [%s]", i, errMsg.c_str());
                continue;
            }
            
            // プロキシ設定の種類に応じて、プロキシ設定を取得する
            errMsg = ProxyResolver::GetProxyFromDictionary(targetUrl, proxyDic, proxy);
            if (!errMsg.empty()) {
                continue;
            }
            
            // プロキシ設定を取得できた場合
            break;
        }
    }
    catch (...) {
        if (errMsg.empty()) {
            errMsg = MacErrorCode::GetLastError();
            LOG_ERROR("Unknown error occurred. [%s]", errMsg.c_str());
        }
    }
    
    return errMsg;
}


/**
 * Proxy Auto Configuration (PAC) の JavaScript からプロキシ設定を取得する。
 */
std::string ProxyResolver::GetProxyByAutoConfigurationScript(
                                                          /*[in]*/ const CFURLRef targetUrl,
                                                          /*[in]*/ const CFStringRef pacScript,
                                                          /*[out]*/ std::string& proxy
                                                          ) {
    std::string errMsg;
    
    try {
        // Run Loop を使用して PAC のファイルをダウンロードするために、RunLoopSource を取得する
        CFTypeRef result = nullptr;
        CFStreamClientContext context = { 0, &result, nullptr, nullptr, nullptr };
        const AutoCfRef<CFRunLoopSourceRef> runLoopSrc =
            CFNetworkExecuteProxyAutoConfigurationScript(pacScript, targetUrl, ResultCallback, &context);
        if (!runLoopSrc) {
            errMsg = MacErrorCode::GetLastError();
            LOG_ERROR("CFNetworkExecuteProxyAutoConfigurationScript() failed. [%s]", errMsg.c_str());
            throw errMsg;
        }
        
        
        // Run Loop を使用して PAC のファイルをダウンロードし、プロキシ設定を取得する
        const CFStringRef privateRunLoopMode = CFSTR("node-proxy-resolver-mw.ProxyAutoConfigurationScript");
        CFRunLoopAddSource(CFRunLoopGetCurrent(), runLoopSrc, privateRunLoopMode);
        CFRunLoopRunInMode(privateRunLoopMode, DBL_MAX, false);
        CFRunLoopRemoveSource(CFRunLoopGetCurrent(), runLoopSrc, privateRunLoopMode);
        
        if (!result) {
            errMsg = MacErrorCode::GetLastError();
            LOG_ERROR("CFRunLoopRunInMode() failed. [%s]", errMsg.c_str());
            throw errMsg;
        }
        
        if (CFGetTypeID(result) == CFErrorGetTypeID()) {
            CFRelease(result);
            errMsg = MacErrorCode::GetLastError();
            LOG_ERROR("CFRunLoopRunInMode() failed. [%s]", errMsg.c_str());
            throw errMsg;
        }
        
        // 指定されたURLに接続する際に利用すべきプロキシ設定の優先度順リストを取得する
        const AutoCfRef<CFArrayRef> proxyArray = (CFArrayRef)result;
        const CFIndex count = CFArrayGetCount(proxyArray);
        for (CFIndex i = 0; i < count; i++) {
            // プロキシ設定を取得する
            const CFDictionaryRef proxyDic = (CFDictionaryRef)CFArrayGetValueAtIndex(proxyArray, i);
            if (!proxyDic) {
                errMsg = MacErrorCode::GetLastError();
                LOG_ERROR("CFArrayGetValueAtIndex(%d) failed. [%s]", i, errMsg.c_str());
                continue;
            }
            
            // プロキシ設定の種類に応じて、プロキシ設定を取得する
            errMsg = ProxyResolver::GetProxyFromDictionary(targetUrl, proxyDic, proxy);
            if (!errMsg.empty()) {
                continue;
            }
            
            // プロキシ設定を取得できた場合
            break;            
        }
    }
    catch (...) {
        if (errMsg.empty()) {
            errMsg = MacErrorCode::GetLastError();
            LOG_ERROR("Unknown error occurred. [%s]", errMsg.c_str());
        }
    }
    
    return errMsg;
}



/**
 * Proxy Auto Configuration (PAC) ファイルからプロキシ設定を取得する。
 */
std::string ProxyResolver::GetProxyServerString(
                                                /*[in]*/ const CFDictionaryRef proxyDic,
                                                /*[out]*/ std::string& proxy
                                                ) {
    std::string errMsg;
    
    try {
        // プロキシサーバーのホスト名を取得する
        const CFStringRef hostNameRef = (CFStringRef)CFDictionaryGetValue(proxyDic, kCFProxyHostNameKey);
        if (!hostNameRef) {
            errMsg = MacErrorCode::GetLastError();
            LOG_ERROR("CFDictionaryGetValue(kCFProxyHostNameKey) failed. [%s]", errMsg.c_str());
            throw errMsg;
        }
        
        std::string hostName = StringUtils::CFStringToStlString(hostNameRef, kCFStringEncodingASCII);
        if (hostName.empty()) {
            errMsg = MacErrorCode::GetLastError();
            LOG_ERROR("StringUtils::CFStringToStlString(hostName) failed. [%s]", errMsg.c_str());
            throw errMsg;
        }
        
        // プロキシサーバーのポート番号を取得する
        const CFNumberRef portNumberRef = (CFNumberRef)CFDictionaryGetValue(proxyDic, kCFProxyPortNumberKey);
        if (!portNumberRef) {
            errMsg = MacErrorCode::GetLastError();
            LOG_ERROR("CFDictionaryGetValue(kCFProxyPortNumberKey) failed. [%s]", errMsg.c_str());
            throw errMsg;
        }
        
        int portNumber = 0;
        if (!CFNumberGetValue(portNumberRef, kCFNumberSInt32Type, &portNumber)) {
            errMsg = MacErrorCode::GetLastError();
            LOG_ERROR("CFNumberGetValue(portNumber) failed. [%s]", errMsg.c_str());
            throw errMsg;
        }
        
        proxy = hostName + ":" + std::to_string(portNumber);
    }
    catch (...) {
        if (errMsg.empty()) {
            errMsg = MacErrorCode::GetLastError();
            LOG_ERROR("Unknown error occurred. [%s]", errMsg.c_str());
        }
    }
    
    return errMsg;
}




