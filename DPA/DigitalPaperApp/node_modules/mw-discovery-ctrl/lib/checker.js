/*
  checker.js

  description: device enable checker

  - HTTPの"GET /api_version" で通信先 DPT の生存確認を行う。   
  - HTTPの"GET /register/serial_number"で DPT のシリアルナンバーを取得する。
    - "node-mdns-js-mw"で、mDNS の Avertisement を受信した際に、送信元のmulticast adressを特定できず、
      無効な IP address を含む複数の IP address が通知されるため、それら全てのIP addressに対して、
      "GET /register/serial_number"を発行してDPTか否かを確認する。
*/

'use strict';

var http = require('http');
var url = require('url');
var portfwdr = require('mw-port-fwdr');
var accesser = portfwdr.createPortFwdr();

const log_e = require('debug')('mw-discovery-ctrl:checker:error');
const log_d = require('debug')('mw-discovery-ctrl:checker:debug');

/** @exports active device checker */
const DeviceChecker = exports;


/**
 * デバイスにping を投げて死活確認を行う
 */
DeviceChecker.ping = function(address, accessport, callback) {
  this.pfAccess('/api_version', address, accessport, function(res) {
    if (res !== null) {
      callback(address, res.value);
    }
    else {
      callback(address, null);
    }
  });
};


/**
 * デバイスのシリアルナンバーを取得する
 */
DeviceChecker.deviceid = function(address, accessport, callback) {
  this.pfAccess('/register/serial_number', address, accessport, function(res) {
    if (res !== null) {
      callback(address, res.value);
    }
    else {
      callback(address, null);
    }
  });
};


/**
 * デバイスの諸情報を取得する
 */
DeviceChecker.deviceinfo = function(address, accessport, callback) {
  this.pfAccess('/register/information', address, accessport, function(res) {
    callback(address, res);
  });
};



/* ----------------------------- */
/* --- local implement           */
/* ----------------------------- */

// ポートフォワーダー経由での API アクセス
DeviceChecker.pfAccess = function(url, address, accessport, callback) {
  const pfwdr = portfwdr.createPortFwdr();

  pfwdr.start(
    /* toIpAddr =     */ address,
    /* toPortHttp =   */ accessport,
    /* toPortHttps =  */ null,
    /* callback =     */ function (error) {

      if (error) {
        log_e('\n [ERROR] PortFwdr.start(): \n address: ' + address + ' accessport: ' + accessport, '\n error: \n', error);
        // [2016-07-29 00:12:25+09:00] kan.k: [TODO] レアケースですが、
        // portfwdrのエラーが握りつぶされているので、nodeのcallbackマ
        // ナーに従って、第一引数を、errとするべきと思います。
        return;
      }

      // port forwarder で IPv4 から IPv6 へ繋ぐ
      const host = pfwdr.getHost();
      const port = pfwdr.getHttpPort();
      let url_options = {
        family: 4,
        host: host,
        port: port,
        method: 'get',
        path: url
      };

      log_d('http.get(): \n', url_options);
      http.get(url_options, function (response) {
        // log_d('response: ', response);
        let body = '';
        response.on('data', function (chunk) {
          body += chunk;
        });

        response.on('end', function (res) {
          if (body.length > 0) {
            log_d('get ', url, body);
            pfwdr.close();
            try {
              var r = JSON.parse(body);
              log_d('r: ', r, ' for: ', address);
              callback(r);
            }
            catch (error) {
              log_e('\n [ERROR] JSON.parse() \n url_options: \n', url_options, '\n body: \n', body, '\n error: \n', error);
              callback(null);
            }
          }
        });
      }).on('error', function (error) {
        log_e('\n [ERROR] http.get() \n url_options: \n', url_options, '\n error: \n', error);
        callback(null);
        pfwdr.close();
      });
    });
};

