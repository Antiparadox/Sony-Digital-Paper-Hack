'use strict';

class TaskRunner {
    constructor() {
        this.queue = [];
        this.running = false;
    }

    pushFront(task) {
        var self = this;

        if (typeof task === 'function') {
            self.queue.unshift(task);
            self.compact();
        }
    };

    pushBack(task) {
        var self = this;

        if (typeof task === 'function') {
            self.queue.push(task);
            self.compact();
        }
    };

    remove(filter) {
		var self = this;
		
        if (typeof filter === 'function') {
            self.queue = self.queue.filter(function (task) {
                return !filter(task);
            });
			self.compact();
        }
    }

    clear() {
        this.queue = [];
    }

    compact() {
        var self = this;
        var previousTask = null;

		self.queue = self.queue.filter(function (task) {
			var result = (task !== previousTask);
			previousTask = task;
			return result;
		});
    };

    run() {
        var self = this;

        var runner = function () {
            if (!self.running) {
                if (self.queue.length > 0) {
					var task = self.queue.shift();
					
					self.running = true;
					task(function () {
						self.running = false;
					});
                }
            }

            setTimeout(runner, 1000);
        };

        runner();
    }
}

module.exports.TaskRunner = TaskRunner;