/*
  DeviceList.js
  
  description:
  Cache result of device discovery.

  管理するデバイスリストは以下の構造とする
  {
    deviceId: string,
    name: string,
    phyType: PhyType,
    remoteIp: string,
    remotePort: number,
    localIp: string
  }
*/

'use strict';

/** @exports discovery-proxy */
const DeviceList = exports;

/** @device cache */
DeviceList.buffer = [];


/**
 * Add a device
 * <br>
 * リストにデバイスを追加する。
 * 既に同一IPアドレスを持つデバイスがリストに登録済みの場合にはfalseを返す。
 *
 * @param {device} discoverr device 
 *   <br>
 *   追加するデバイスの情報, discovery_proxy.js に因る
 *
 * @return 実際に追加された場合にはtrueを返す。
 */
DeviceList.add = function(device) {
  // 既存アイテムの確認
  for (const item of this.buffer) {
    if (item.remoteIp === device.remoteIp) {
      // already exists then do not add.
      return false;
    }
  }
  // 新規なのでリストに追加
  this.buffer.push(device);
  return true;
}


/**
 * Update entry that already exists.
 * 
 * @param {string} remoteIp
 * @param {device} device
 * @return 実際にアップデートされた場合にはtrue
 */
DeviceList.update = function(remoteIp, device) {
  for (const item of this.buffer) {
    if (item.remoteIp === device.remoteIp ) {
      // item.remortPort = device.remotePort;
      if ( item.deviceId !== device.deviceId ) {
        return false;
      }
      item.deviceId = device.deviceId;
      item.name = device.name;
      item.phyType = device.phyType;
      item.localIp = device.localIp;
      return true;
    }
  }
  return false;
}

/**
 * Delete device
 * <br>
 * リストからデバイスを削除
 * 指定の情報にマッチしたものを削除する
 * マッチしたもの全てに適用
 *
 * @param {query} search key 
 *   "ip","id","physical","name"
 *   <br>
 *   "ip" IPアドレスで探す,
 *   "localip" ローカルIPアドレスで探す,
 *   "id" デバイスIDで探す,
 *   "physical" 接続経路で探す,
 *   "name" デバイス名で探す,
 *
 * @param {key} key value 
 *   matching key
 *   <br>
 *   探す値 query の実値
 *
 * @return 実際に消えたデバイスがあったら true
 *
 */
DeviceList.remove = function(query, key) {
  var removeitem = [];
  var index = this.indexSearch(query, key);
  index.sort(function(a,b) {
    return b-a;  // b -> a
  });
  for (const pos of index) {
    removeitem.push(DeviceList.buffer[pos]);
    this.buffer.splice(pos, 1);
  }

  return removeitem;
}


/**
 * Search device
 * <br>
 * リストからデバイスを探索
 * 指定の情報にマッチしたものを返す
 * マッチしたもの全てに適用
 *
 * @param {query} search key 
 *   "all","ip","id","physical","name"
 *   <br>
 *   "all" 全リストを返す,
 *   "ip" IPアドレスで探す,
 *   "localip" ローカルIPアドレスで探す,
 *   "id" デバイスIDで探す,
 *   "physical" 接続経路で探す,
 *   "name" デバイス名で探す,
 *
 * @param {key} key value 
 *   matching key
 *   <br>
 *   探す値 query の実値
 *
 * @return Array[device]
 *   device info
 *   <br>
 *   見つかったデバイスの情報を配列で返す
 *
 */
DeviceList.get = function(query, key) {
  var items = [];
  if (query === 'all') {
    items = DeviceList.buffer.concat();
    return items;
  }
  // フィルタ
  var index = DeviceList.indexSearch(query, key);
  items.sort();
  for (const pos of index) {
    items.push(DeviceList.buffer[pos]);
  }
  return items;
}


/**
 * list clear
 * <br>
 * デバイスリストの初期化
 *
 */
DeviceList.clear = function() {
  this.buffer = [];
}



/* -------------------- */
/* --- local scope      */
/* -------------------- */
/**
 * @private
 */
DeviceList.indexSearch = function(query, key) {
  var match = [];
  var num = DeviceList.buffer.length;

  var branch = {
    ip(item, key) {
      return (item.remoteIp.indexOf(key) === 0);
    },
    localip(item, key) {
      return (item.localIp.indexOf(key) === 0);
    },
    id(item, key) {
      return (item.deviceId.indexOf(key) === 0);
    },
    physical(item, key) {
      return (item.phyType === key);
    },
    name(item, key) {
      return (item.name === key);
    },
  };

  if (branch[query] === undefined) {
    return match;
  }

  for(var index=0; index<num; index++) {
    if (branch[query](DeviceList.buffer[index], key) == true) {
      match.push(index);
    }
  }

  return match;
}
