/*
  nicwatcher.js

  description:
  PC/Macに接続されているNetwork Interfaceの増減を検出する。
*/

'use strict';

const log_d = require('debug')('mw-discovery-ctrl:nicwatcher:debug');

const EventEmitter = require('events').EventEmitter;
const emitter = new EventEmitter();

const os = require('os');


/** @exports nic-watcher */
const NicWatcher = exports;

// PC/Macに接続されているNICの配列
NicWatcher.nicArray = [];

// 前回の探索で DENEB っぽいのが見つかっていたかどうかを意味するフラグ
NicWatcher.foundSomethingLikeDenebLastTime = false;

// PC/Macに接続されているNICの増減検出チェックの間隔
NicWatcher.POLLING_INTERVAL = 1000;  //1sec

//
NicWatcher.timeoutId = 0;


/* ----------------------------- */
/* --- interface                 */
/* ----------------------------- */

/**
 * NICの増減検出を開始する。
 */
NicWatcher.start = function () {
  log_d('NicWatcher.start()');

  // NICの配列を初期化する
  NicWatcher.initNicArray();

  // 定期チェックを開始する
  NicWatcher.timeoutId = setTimeout(
    NicWatcher.checkStatus,
    NicWatcher.POLLING_INTERVAL
  );
};

/**
 * NICの増減検出を終了する。
 */
NicWatcher.stop = function () {
  log_d('NicWatcher.stop()');
  clearTimeout(NicWatcher.timeoutId);
}

/* ----------------------------- */
/* --- event                     */
/* ----------------------------- */

/**
 * NIC変更時のイベント
 */
NicWatcher.changed = function () {
  log_d('NicWatcher.changed()');
  emitter.emit('changed');
};

/**
 * Deneb (Bluetooth 経由) っぽいもの発見イベント
 */
NicWatcher.foundSomethingLikeDeneb = function (localIp) {
  log_d('NicWatcher.foundSomethingLikeDeneb(' + localIp + ')');
  emitter.emit('foundSomethingLikeDeneb', localIp);
};

/**
 * イベントリスナーの登録
 */
NicWatcher.on = function (eventName, listener) {
  return emitter.on(eventName, listener);
};

/**
 * 一回のみイベントリスナーの登録
 */
NicWatcher.once = function (eventName, listener) {
  return emitter.once(eventName, listener);
};

/**
 * イベントリスナーの解除
 */
NicWatcher.removeListener = function (eventName, listener) {
  return emitter.removeListener(eventName, listener);
};


/* ------------------------------ */
/* --- local method               */
/* ------------------------------ */

/**
 * NICの配列を初期化する。
 * 
 * @private
 */
NicWatcher.initNicArray = function () {
  log_d('NicWatcher.initNicArray()');
  const nicList = os.networkInterfaces();
  let newNicArray = [];
    for (let nic in nicList) {
    newNicArray.push(nic);
  }
  NicWatcher.nicArray = newNicArray;
}

/**
 * NICの増減を確認する。
 * 
 * @return 増減を検出した際にはtrueを返却する。
 * @private
 */
NicWatcher.isUpdated = function (nicList) {
//  log_d('NicWatcher.isUpdated()');

  let isUpdated = false;
  let oldNicArray = NicWatcher.nicArray;
  let newNicArray = [];

  for (let nic in nicList) {
    if (oldNicArray.indexOf(nic) === -1) {
      isUpdated = true;
      log_d('added :', nic);
    }
    newNicArray.push(nic);
  }
  for (let nic of oldNicArray) {
    if (newNicArray.indexOf(nic) === -1) {
      isUpdated = true;
      log_d('removed :', nic);
    }
  }
  NicWatcher.nicArray = newNicArray;

  return isUpdated;
}

/**
 * DENEB っぽい何かを探す
 */
NicWatcher.findSomethingLikeDeneb = function (nicList) {
  for (let nic in nicList) {
    let info = nicList[nic];
    for (let subInfoKey in info) {
      let subInfo = info[subInfoKey];
      if ((subInfo) && (subInfo.address) && (subInfo.address.indexOf('172.25.47.') === 0)) {
        return subInfo;
      }
    }
  }

  return null;
};

/**
 * NICの増減を確認し、増減を検出した際にはイベントを通知する。
 * また、次回のチェックタイミングを設定する。
 * 
 * @private
 */
NicWatcher.checkStatus = function () {
//  log_d('NicWatcher.checkStatus()');

  let nicList = os.networkInterfaces();
  
  // NICの増減を確認する
  if (NicWatcher.isUpdated(nicList)) {
    // 増減を検出した際にはイベントを通知する
    NicWatcher.changed();
  }

  // DENEB っぽい何かを探す
  var somethingLikeDeneb = NicWatcher.findSomethingLikeDeneb(nicList);
  if (somethingLikeDeneb) {
    // 前回の探索では見つかっておらず、今回の探索で見つかったときは、発見イベントの発行を行う。
    if (!NicWatcher.foundSomethingLikeDenebLastTime) {
      // 起動後すぐだと、
      // 発見→Appearイベント→UIからWebAPI要求
      // ↑の瞬間にV6に切り替わるタイミングが多発するので、時間差を設ける。
      setTimeout( ()=> {
        NicWatcher.foundSomethingLikeDeneb(somethingLikeDeneb.address);
      }, 15*1000);
    }

    NicWatcher.foundSomethingLikeDenebLastTime = true;
  } else {
    NicWatcher.foundSomethingLikeDenebLastTime = false;
  }

  // 一定時間後にNICの増減をチェックする
  NicWatcher.timeoutId = setTimeout(
    NicWatcher.checkStatus,
    NicWatcher.POLLING_INTERVAL
  );
}


