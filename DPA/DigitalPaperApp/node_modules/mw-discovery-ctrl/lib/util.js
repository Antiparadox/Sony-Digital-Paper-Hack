/**
 * @fileoverview ユーティリティ関数などをここに集約する。
 * @requires node_module :: big-integer
 */

'use strict';

var bigInt = require("big-integer");


/** @exports utility functions */
const Util = exports;


/**
 * JSで64bit以上の数値を扱うためのユーティリティ。
 * @namespace {object} BigNumber
 * @memberof Util
 * @requires node_module :: big-integer
 */
Util.BigNumber = {
    ZEROPAD: Array(64 + 1).join('0'),
    /**
     * 64ビット超過の値を作る
     * @function bigValue
     * @memberof BigNumber
     * @return {big-integer} big-integer instance
     */
    bigValue: function() {
        return new bigInt('1' + this.ZEROPAD, 2)
    },
    /**
     * 64ビット桁に詰める
     * @function cut
     * @memberof BigNumber
     * @param {any} src number or big-integer instance
     * @return {big-integer} big-integer instance
     */
    cut: function(src) {
        return new bigInt((this.ZEROPAD + src.toString(2)).slice(-64), 2);
    },
    /**
     * 加算して64ビット桁に詰める
     * @function plus
     * @memberof BigNumber
     * @param {big-integer} src1 big-integer instance
     * @param {any} src2 number or big-integer instance
     * @return {big-integer} big-integer instance
     */
    plus: function(src1, src2) {
        return this.cut(src1.plus(src2));
    },
    /**
     * 減算して64ビット桁に詰める
     * @function minus
     * @memberof BigNumber
     * @param {big-integer} src1 number or big-integer instance
     * @param {any} src2 number or big-integer instance
     * @return {big-integer} big-integer instance
     */
    minus: function(src1, src2) {
        return this.cut(this.bigValue().plus(src1).minus(src2));
    },
    /**
     * 上位ビットシフトして64ビット桁に詰める
     * @function shiftLeft
     * @memberof BigNumber
     * @param {big-integer} src big-integer instance
     * @param {number} bits 詰める桁数
     * @return {big-integer} big-integer instance
     */
    shiftLeft: function(src, bits) {
        return this.cut(src.shiftLeft(bits));
    },
    /**
     * 下位ビットシフトして64ビット桁に詰める
     * @function shiftRight
     * @memberof BigNumber
     * @param {big-integer} src big-integer instance
     * @param {number} bits 詰める桁数
     * @return {big-integer} big-integer instance
     */
    shiftRight: function(src, bits) {
        return this.cut(src.shiftRight(bits));
    },
    /**
     * linux :: hash_64 のロジックでハッシュ値を生成
     * @function createHash
     * @memberof BigNumber
     * @param {any} serialNumber シリアル番号などの整数値または数字文字列
     * @return {String} 生成したハッシュ値を16進文字列で返す。無効な引数は空文字を返す。
     */
    createHash: function(serialNumber) {
        // 数字文字列の場合はNumberに変換。
        if (typeof serialNumber === 'string') {
            if (isNaN(serialNumber)) {
                return "";
            }
            
            serialNumber = Number(serialNumber);
        }
        // その他、数値以外はNG　※typeof NaN も number が返ってくるので isNaN と併用する
        else if (typeof serialNumber !== 'number' || isNaN(serialNumber)
        || !serialNumber.toString(2).match(/^[01]+$/) // Infinity 対策。↑だけでは数値判断される。。
        ) {
            return "";
        }

        /**
         * big-integer が整数にしか対応していないのでそのチェック
         */
        if (Number(serialNumber).toString().indexOf(".") >= 0) {
            return "";
        }

        var hash = this.cut(new bigInt(serialNumber));
        var n = new bigInt(hash);

        n = this.shiftLeft(n, 18);
        hash = this.minus(hash, n);
        n = this.shiftLeft(n, 33);
        hash = this.minus(hash, n);
        n = this.shiftLeft(n, 3);
        hash = this.plus(hash, n);
        n = this.shiftLeft(n, 3);
        hash = this.minus(hash, n);
        n = this.shiftLeft(n, 4);
        hash = this.plus(hash, n);
        n = this.shiftLeft(n, 2);
        hash = this.plus(n, hash);

        return this.shiftRight(hash, 64 - 48).toString(16);
    }
}

/**
 * Ipv6アドレスを自動生成するためのユーティリティ
 * @namespace {object} Ipv6Generator
 * @memberof Util
 */
Util.Ipv6Generator = {
    /**
     * シリアル番号からIPV6ローカルリンクアドレスを生成する。
     * @function createFromSerialNumber
     * @memberof Ipv6Generator
     * @param  {any} serialNumber シリアル番号などの整数値または数字文字列
     * @return {String} 生成できた場合はIpV6ローカルリンクアドレス。生成できなかった場合は空文字を返す。
     */
    createFromSerialNumber: function(serialNumber) {
        /**
         * linux :: hash_64 同等のハッシュ値を生成
         */
        var hash = Util.BigNumber.createHash(serialNumber);
        /**
         * 生成失敗時は空文字が返ってくる
         */
        if (hash === "" || hash.length < 12) {
            return "";
        }
        /**
         * ハッシュ値をMACアドレスに変換する
         */
        hash = (parseInt(hash.substr(0,2),16) & 0xfc).toString(16) + hash.substr(2);
        /**
         * MACアドレスをEUIｰ64でIPv6インターフェースIDに変換する
         * 1.24bitずつ分割し、分割の間に fffe を挿入する
         * 2.左から7bit目を反転させる (左から1byte目を 0x02 でXORする)
         * 3.2byteずつコロンで区切る
         * 4.先頭に fe80:: (リンクローカル用ネットワークID)を挿入する
         */
        return ["fe80:", hash.substr(0,4), hash.substr(4,2) + "ff", "fe" + hash.substr(6, 2), hash.substr(8)].join(':');
    }
};
