"use strict";

const expect = require('chai').expect;
const DiscoveryProxy = require('../lib/discovery_proxy');
const Constants = require('../lib/constants');

describe('DiscoveryProxy', function() {
    describe('#getRegisterDataFromUsbEther()', () => {
        it('should return null if any invalid parameter', () => {
            var f = DiscoveryProxy.getRegisterDataFromUsbEther;
            expect(f()).to.be.null;
            expect(f({})).to.be.null;
            expect(f({serialNumber: ""}), "null if no ipV6 prop").to.be.null;
            expect(f({
                serialNumber: "",
                ipV6: {}
            }), "null if no ipV6.address").to.be.null;
        });

        it('should return null if an invalid serialNumber', () => {
            var f = DiscoveryProxy.getRegisterDataFromUsbEther;
            expect(f({
                serialNumber: "",
                ipV6: {
                    address: ""
                }
            }), "null if empty serialNumber").to.be.null;
            expect(f({
                serialNumber: "aaa",
                ipV6: {
                    address: ""
                }
            }), "null if words").to.be.null;
            expect(f({
                serialNumber: {},
                ipV6: {
                    address: ""
                }
            }), "null if any object").to.be.null;
        })

        it('should return {localIp,remoteIp,remotePort,phyType,autoGenerated}', ()=> {
            var val = DiscoveryProxy.getRegisterDataFromUsbEther({
                serialNumber: "844301009002026",
                ipV6: {
                    address: "fe80::4531:9b7d:24f0:41cd",
                    scopeid: 21
                }
            });
            // console.log(val);
            expect(val).to.a('object');
            expect(val).to.have.any.keys("localIp","remoteIp","remotePort","phyType");
            expect(val.localIp.indexOf('fe80::')).to.eq(0);
            expect(val.remoteIp.indexOf('fe80::')).to.eq(0);
            expect(val.phyType).to.eq(DiscoveryProxy.PHY_TYPE_USB);
            expect(val.remotePort).to.eq(Constants.DEVICE_HTTP_PORT);
            expect(val.autoGenerated).to.be.true;
        })

        it('should add an scope-id if it exists.', () => {
            var val = DiscoveryProxy.getRegisterDataFromUsbEther({
                serialNumber: "844301009002026",
                ipV6: {
                    address: "fe80::4531:9b7d:24f0:41cd",
                    scopeid: 21
                }
            });
            // console.log(val);
            expect(val.remoteIp).to.match(/%21$/);
            expect(val.localIp).to.match(/%21$/);
        })

        it('should not add an scope-id if not exists.', () => {
            var val = DiscoveryProxy.getRegisterDataFromUsbEther({
                serialNumber: "844301009002026",
                ipV6: {
                    address: "fe80::4531:9b7d:24f0:41cd",
                    scopeid: ""
                }
            });
            // console.log(val);
            expect(val.remoteIp).to.not.match(/%21$/);
            expect(val.localIp).to.not.match(/%21$/);
        })
    });
});