'use strict';

const log_error = require('debug')('mw-automagic-client:update-checker:error');
const log_debug = require('debug')('mw-automagic-client:update-checker:debug');

const AutoMagic = require('./automagic');
const Downloader = require('./downloader');
const UpdateInfoParser = require('./update-info-parser');
const EulaXmlParser = require('./eula-xml-parser');
const DisclaimerXmlParser = require('./disclaimer-xml-parser');
const mwe = require('mw-error');


class UpdateChecker {

  constructor() {
    this.isRunning = false;
    this.isCancelled = false;
    this.cancelCallback = null;
  }

  setUpdateCheckStarted() {
    this.isRunning = true;
    this.isCancelled = false;
    this.cancelCallback = null;
  }

  setUpdateCheckFinished() {
    if (this.cancelCallback) {
      this.cancelCallback();
      this.cancelCallback = null;
    }
    this.isCancelled = false;
    this.isRunning = false;
  }


  /**
   * アプリのアップデートを確認する。
   *
   * @param {string} appVersion
   *    現在のアプリのバージョン番号。
   *      - 例）1.0.0.10250
   * @param {string} appLanguage
   *    アプリの表示言語。
   *    以下のいずれかを指定する。
   *      - 'Japanese'
   *      - 'English''
   * @param {function(?Error, object)} callback
   *    アップデートの確認結果を受け取るためのcallback関数。
   *    アップデートの確認に失敗した場合には、callback関数の
   *    第一引数に以下のいずれかのErrorオブジェクトが渡される。
   *      - E_MW_EXT_HTTP_ERROR
   *      - E_MW_EXT_HTTP_UNEXPECTED_STATUS
   *      - E_MW_EXT_HTTP_UNEXPECTED_VALUE
   *      - E_MW_EXT_RES_UNRECOGNIZABLE_VALUE
   *    アップデートが見つかった場合には、callback関数の
   *    第二引数に次のオブジェクトが渡される。
   *    `{
   *      updateType:     '<アップデートの種類(app)>',
   *      newVersion:     '<アップデート後のバージョン番号>',
   *      currentVersion: '<現在のバージョン番号>',
   *      description:    '<アップデート内容の文言>',
   *      disclaimer:     '<免責事項の文言>'
   *      eula:           '<EULAの文言>'
   *      updater:        '<アップデート用のオブジェクト>'
   *    }`
   *    アップデートが見つからなかった場合には、callback関数の
   *    第二引数に null が渡される。
   */
  checkForAppUpdate(
    appVersion,
    appLanguage,
    callback
  ) {
    this.verifyCallback(callback);

    // 既に処理を実行中の場合にはエラーを返す
    if (this.isRunning) {
      callback(mwe.genError(mwe.E_MW_ALREADY_RUNNING, 'Update Checker already running.'));
      return;
    }

    this.setUpdateCheckStarted();

    const languageCode = AutoMagic.getLanguageCode(appLanguage);
    let localeCode = null;
    let newVersion = null;
    let updateNotFound = false;

    const self = this;
    Promise.resolve()
      // Win/Mac のロケール情報を取得する
      .then(function () {
        return new Promise(function (resolve, reject) {
          if (self.isCancelled) {
            reject(mwe.genError(mwe.E_MW_CANCELLED, 'Cancelled'));
            return;
          }
          const osInfo = require('./os-info');
          osInfo.locale(function (error, locale) {
            if (error) {
              log_error(error);
              reject(error);
              return;
            }
            localeCode = AutoMagic.getLocaleCode(locale);
            resolve();
          });
        });
      })
      // 「アップデート情報ファイル」をダウンロードする
      .then(function () {
        return new Promise(function (resolve, reject) {
          if (self.isCancelled) {
            reject(mwe.genError(mwe.E_MW_CANCELLED, 'Cancelled'));
            return;
          }
          Downloader.downloadUpdateInfoFile(
            AutoMagic.getUrl_AppUpdateInfoXml(localeCode),
            AutoMagic.getUserAgentForAppUpdate(appVersion),
            function (error, data) {
              if (error) {
                if (error.mwWebApiResCode === 404) {
                  // アップデートが無かった場合
                  updateNotFound = true;
                  reject(null);
                  return;
                }
                log_error(error);
                reject(error);
                return;
              }
              resolve(data);
            });
        });
      })
      // 「アップデート情報ファイル」を検証する
      .then(function (data) {
        return new Promise(function (resolve, reject) {
          if (self.isCancelled) {
            reject(mwe.genError(mwe.E_MW_CANCELLED, 'Cancelled'));
            return;
          }
          UpdateInfoParser.verify(
            data,
            AutoMagic.CATEGORY_ID,
            AutoMagic.SERVICE_ID_APP,
            function (error, xml) {
              if (error) {
                log_error(error);
                reject(error);
                return;
              }
              resolve(xml);
            });
        });
      })
      // 「アップデート情報ファイル」のXML部分を解析する
      .then(function (xml) {
        return new Promise(function (resolve, reject) {
          if (self.isCancelled) {
            reject(mwe.genError(mwe.E_MW_CANCELLED, 'Cancelled'));
            return;
          }
          UpdateInfoParser.parse(
            xml,
            function (error, updateInfoArray) {
              if (error) {
                log_error(error);
                reject(error);
                return;
              }
              resolve(updateInfoArray);
            });
        });
      })
      // アプリのアップデートの有無を確認する
      .then(function (updateInfoArray) {
        return new Promise(function (resolve, reject) {
          if (self.isCancelled) {
            reject(mwe.genError(mwe.E_MW_CANCELLED, 'Cancelled'));
            return;
          }
          UpdateInfoParser.checkForAppUpdate(
            appVersion,
            languageCode,
            updateInfoArray,
            function (error, updateInfo) {
              if (error) {
                log_error(error);
                reject(error);
                return;
              }

              // アップデートが無かった場合
              if (!updateInfo) {
                updateNotFound = true;
                reject(null);
                return;
              }

              // アップデートが有った場合
              newVersion = updateInfo.updater.newVersion;
              resolve(updateInfo);
            });
        });
      })
      // 「免責事項」のXMLをダウンロードする
      .then(function (updateInfo) {
        return new Promise(function (resolve, reject) {
          if (self.isCancelled) {
            reject(mwe.genError(mwe.E_MW_CANCELLED, 'Cancelled'));
            return;
          }
          const userAgent = AutoMagic.getUserAgentForAppUpdate(appVersion, newVersion);
          const disclaimerUrl = updateInfo.disclaimer.url;
          const disclaimerMd5 = updateInfo.disclaimer.md5;
          const disclaimerSize = updateInfo.disclaimer.size;
          Downloader.downloadDocumentXml(
            disclaimerUrl, userAgent, disclaimerMd5, disclaimerSize,
            function (error, xmlData) {
              if (error) {
                log_error(error);
                reject(error);
                return;
              }
              updateInfo.disclaimer = xmlData;
              resolve(updateInfo);
            });
        });
      })
      // 「免責事項」のXMLを解析する
      .then(function (updateInfo) {
        return new Promise(function (resolve, reject) {
          if (self.isCancelled) {
            reject(mwe.genError(mwe.E_MW_CANCELLED, 'Cancelled'));
            return;
          }
          DisclaimerXmlParser.parse(
            updateInfo.disclaimer,
            localeCode,
            function (error, strings) {
              if (error) {
                log_error(error);
                reject(error);
                return;
              }
              updateInfo.disclaimer = strings;
              resolve(updateInfo);
            });
        });
      })
      // 「EULA」のXMLをダウンロードする
      .then(function (updateInfo) {
        return new Promise(function (resolve, reject) {
          if (self.isCancelled) {
            reject(mwe.genError(mwe.E_MW_CANCELLED, 'Cancelled'));
            return;
          }
          const userAgent = AutoMagic.getUserAgentForAppUpdate(appVersion, newVersion);
          const eulaUrl = updateInfo.eula.url;
          const eulaMd5 = updateInfo.eula.md5;
          const eulaSize = updateInfo.eula.size;
          Downloader.downloadDocumentXml(
            eulaUrl, userAgent, eulaMd5, eulaSize,
            function (error, xmlData) {
              if (error) {
                log_error(error);
                reject(error);
                return;
              }
              updateInfo.eula = xmlData;
              resolve(updateInfo);
            });
        });
      })
      // 「EULA」のXMLを解析する
      .then(function (updateInfo) {
        return new Promise(function (resolve, reject) {
          if (self.isCancelled) {
            reject(mwe.genError(mwe.E_MW_CANCELLED, 'Cancelled'));
            return;
          }
          EulaXmlParser.parse(
            updateInfo.eula,
            localeCode,
            function (error, strings) {
              if (error) {
                log_error(error);
                reject(error);
                return;
              }
              updateInfo.eula = strings;
              resolve(updateInfo);
            });
        });
      })
      // 結果をcallbackする
      .then(
        function onFullfilled(updateInfo) {
          // アップデートが見つかった場合
          callback(null, {
            updateType: 'app',
            newVersion: newVersion,
            currentVersion: appVersion,
            description: updateInfo.description,
            disclaimer: updateInfo.disclaimer,
            eula: updateInfo.eula,
            updater: updateInfo.updater
          });
          self.setUpdateCheckFinished();
        },
        function onRejected(error) {
          if (!error && updateNotFound) {
            // アップデートが無かった場合
            callback(null, null);
          } else {
            // エラーの場合
            callback(error);
          }
          self.setUpdateCheckFinished();
        }
      );
  }

  /**
   * デバイスのアップデートを確認する。
   *
   * @param {string} deviceVersion
   *    現在のデバイスのバージョン番号。
   *      - 例）1.1.00.10259
   * @param {string} deviceModel
   *    デバイスのモデル名。
   *      - 例）DPT-RP1
   * @param {string} deviceSkuCode
   *    デバイスのロケール情報（SKU code）。
   *    以下のいずれかを指定する。
   *      - 'J'
   *      - 'U'
   * @param {string} appLanguage
   *    アプリの表示言語。
   *    以下のいずれかを指定する。
   *      - 'Japanese'
   *      - 'English''
   * @param {function(?Error, object)} callback
   *    アップデートの確認結果を受け取るためのcallback関数。
   *    アップデートの確認に失敗した場合には、callback関数の
   *    第一引数に以下のいずれかのErrorオブジェクトが渡される。
   *      - E_MW_DEVICE_NOT_FOUND
   *      - E_MW_WEBAPI_ERROR
   *      - E_MW_WEBAPI_UNEXPECTED_STATUS
   *      - E_MW_WEBAPI_UNEXPECTED_VALUE
   *      - E_MW_FILE_READ_LOCAL_FAILED
   *    アップデートが見つかった場合には、callback関数の
   *    第二引数に次のオブジェクトが渡される。
   *    `{
   *      updateType:     '<アップデートの種類(device)>',
   *      newVersion:     '<アップデート後のバージョン番号>',
   *      currentVersion: '<現在のバージョン番号>',
   *      description:    '<アップデート内容の文言>',
   *      disclaimer:     '<免責事項の文言>'
   *      eula:           '<EULAの文言>'
   *      updater:        '<アップデート用のオブジェクト>'
   *    }`
   *    アップデートが見つかった場合には、callback関数の
   *    第二引数に null が渡される。
   */
  checkForDeviceUpdate(
    deviceVersion,
    deviceModel,
    deviceSkuCode,
    appLanguage,
    callback
  ) {
    this.verifyCallback(callback);

    // 既に処理を実行中の場合にはエラーを返す
    if (this.isRunning) {
      callback(mwe.genError(mwe.E_MW_ALREADY_RUNNING, 'Update Checker already running.'));
      return;
    }

    this.setUpdateCheckStarted();

    const languageCode = AutoMagic.getLanguageCode(appLanguage);
    const localeCode = AutoMagic.getLocaleCodeBySku(deviceSkuCode);
    let newVersion = null;
    let updateNotFound = false;

    const self = this;
    Promise.resolve()
      // 「アップデート情報ファイル」をダウンロードする
      .then(function () {
        return new Promise(function (resolve, reject) {
          if (self.isCancelled) {
            reject(mwe.genError(mwe.E_MW_CANCELLED, 'Cancelled'));
            return;
          }
          Downloader.downloadUpdateInfoFile(
            AutoMagic.getUrl_DeviceUpdateInfoXml(deviceSkuCode),
            AutoMagic.getUserAgentForDeviceUpdate(deviceVersion),
            function (error, data) {
              if (error) {
                if (error.mwWebApiResCode === 404) {
                  // アップデートが無かった場合
                  updateNotFound = true;
                  reject(null);
                  return;
                }
                log_error(error);
                reject(error);
                return;
              }
              resolve(data);
            });
        });
      })
      // 「アップデート情報ファイル」を検証する
      .then(function (data) {
        return new Promise(function (resolve, reject) {
          if (self.isCancelled) {
            reject(mwe.genError(mwe.E_MW_CANCELLED, 'Cancelled'));
            return;
          }
          UpdateInfoParser.verify(
            data,
            AutoMagic.CATEGORY_ID,
            AutoMagic.SERVICE_ID_DEVICE,
            function (error, xml) {
              if (error) {
                log_error(error);
                reject(error);
                return;
              }
              resolve(xml);
            });
        });
      })
      // 「アップデート情報ファイル」のXML部分を解析する
      .then(function (xml) {
        return new Promise(function (resolve, reject) {
          if (self.isCancelled) {
            reject(mwe.genError(mwe.E_MW_CANCELLED, 'Cancelled'));
            return;
          }
          UpdateInfoParser.parse(
            xml,
            function (error, updateInfoArray) {
              if (error) {
                log_error(error);
                reject(error);
                return;
              }
              resolve(updateInfoArray);
            });
        });
      })
      // デバイスのアップデートの有無を確認する
      .then(function (updateInfoArray) {
        return new Promise(function (resolve, reject) {
          if (self.isCancelled) {
            reject(mwe.genError(mwe.E_MW_CANCELLED, 'Cancelled'));
            return;
          }
          UpdateInfoParser.checkForDeviceUpdate(
            deviceVersion,
            deviceModel,
            languageCode,
            updateInfoArray,
            function (error, updateInfo) {
              if (error) {
                log_error(error);
                reject(error);
                return;
              }

              // アップデートが無かった場合
              if (!updateInfo) {
                updateNotFound = true;
                reject(null);
                return;
              }

              // アップデートが有った場合
              newVersion = updateInfo.updater.newVersion;
              resolve(updateInfo);
            });
        });
      })
      // 「免責事項」のXMLをダウンロードする
      .then(function (updateInfo) {
        return new Promise(function (resolve, reject) {
          if (self.isCancelled) {
            reject(mwe.genError(mwe.E_MW_CANCELLED, 'Cancelled'));
            return;
          }
          const userAgent = AutoMagic.getUserAgentForDeviceUpdate(deviceVersion, newVersion);
          const disclaimerUrl = updateInfo.disclaimer.url;
          const disclaimerMd5 = updateInfo.disclaimer.md5;
          const disclaimerSize = updateInfo.disclaimer.size;
          Downloader.downloadDocumentXml(
            disclaimerUrl, userAgent, disclaimerMd5, disclaimerSize,
            function (error, xmlData) {
              if (error) {
                log_error(error);
                reject(error);
                return;
              }
              updateInfo.disclaimer = xmlData;
              resolve(updateInfo);
            });
        });
      })
      // 「免責事項」のXMLを解析する
      .then(function (updateInfo) {
        return new Promise(function (resolve, reject) {
          if (self.isCancelled) {
            reject(mwe.genError(mwe.E_MW_CANCELLED, 'Cancelled'));
            return;
          }
          DisclaimerXmlParser.parse(
            updateInfo.disclaimer,
            localeCode,
            function (error, strings) {
              if (error) {
                log_error(error);
                reject(error);
                return;
              }
              updateInfo.disclaimer = strings;
              resolve(updateInfo);
            });
        });
      })
      // 「EULA」のXMLをダウンロードする
      .then(function (updateInfo) {
        return new Promise(function (resolve, reject) {
          if (self.isCancelled) {
            reject(mwe.genError(mwe.E_MW_CANCELLED, 'Cancelled'));
            return;
          }
          const userAgent = AutoMagic.getUserAgentForAppUpdate(deviceVersion, newVersion);
          const eulaUrl = updateInfo.eula.url;
          const eulaMd5 = updateInfo.eula.md5;
          const eulaSize = updateInfo.eula.size;
          Downloader.downloadDocumentXml(
            eulaUrl, userAgent, eulaMd5, eulaSize,
            function (error, xmlData) {
              if (error) {
                log_error(error);
                reject(error);
                return;
              }
              updateInfo.eula = xmlData;
              resolve(updateInfo);
            });
        });
      })
      // 「EULA」のXMLを解析する
      .then(function (updateInfo) {
        return new Promise(function (resolve, reject) {
          if (self.isCancelled) {
            reject(mwe.genError(mwe.E_MW_CANCELLED, 'Cancelled'));
            return;
          }
          EulaXmlParser.parse(
            updateInfo.eula,
            localeCode,
            function (error, strings) {
              if (error) {
                log_error(error);
                reject(error);
                return;
              }
              updateInfo.eula = strings;
              resolve(updateInfo);
            });
        });
      })
      // 結果をcallbackする
      .then(
        function onFullfilled(updateInfo) {
          // アップデートが見つかった場合
          callback(null, {
            updateType: 'device',
            newVersion: newVersion,
            currentVersion: deviceVersion,
            description: updateInfo.description,
            disclaimer: updateInfo.disclaimer,
            eula: updateInfo.eula,
            updater: updateInfo.updater
          });
          self.setUpdateCheckFinished();
        },
        function onRejected(error) {
          if (!error && updateNotFound) {
            // アップデートが無かった場合
            callback(null, null);
          } else {
            // エラーの場合
            callback(error);
          }
          self.setUpdateCheckFinished();
        }
      );
  }


  /**
   * アップデートの確認中か否かを確認する。
   *
   * @return {boolean}  アップデートの確認中の場合にtrue
   */
  isCheckingForUpdate() {
    return this.isRunning;
  }

  /**
   *  アップデートの確認を中断する。
   *
   * @param {function} 中断完了時にcallbackされる関数。
   */
  cancelUpdateCheck(callback) {
    if (!this.isRunning) {
      callback();
      return;
    }
    this.isCancelled = true;
    this.cancelCallback = callback;
  }  

  /**
   * 指定されたcallbackが適切なfunctionか否かを確認する。
   *
   * @param {function} callback コールバック先のfunction
   * @private
   */
  verifyCallback(callback) {
    if (typeof callback !== 'function') {
      const error = new TypeError('[ERROR] callback must be a function. (' + typeof callback + ')');
      log_error(error);
      throw error;
    }
  }

}

/**
 * @export UpdateChecker
 */
module.exports = UpdateChecker;
