'use strict';

const log_error = require('debug')('mw-automagic-client:eula-xml-parser:error');
const log_debug = require('debug')('mw-automagic-client:eula-xml-parser:debug');

const xml2js = require('xml2js');
const mwe = require('mw-error');


class EulaXmlParser {

  /**
   * 「EULA」のXMLを解析する。
   *
   * @param {string} xml        文字列形式の「EULA」
   * @param {string} localeCode Win/Macのロケール情報（Auto Magic ロケールコード）
   * @param {function} callback 処理結果通知用のcallback関数
   */
  static parse(xml, localeCode, callback) {
    log_debug('parse()');

    if (typeof xml !== 'string') {
      const err = new TypeError('[ERROR] xml must be a string. (' + typeof xml + ')');
      log_error(err);
      throw err;
    }

    if (typeof callback !== 'function') {
      const err = new TypeError('[ERROR] callback must be a function. (' + typeof callback + ')');
      log_error(err);
      throw err;
    }

    const parser = new xml2js.Parser({ trim: true });
    parser.parseString(xml, function (err, result) {
      if (err) {
        callback(mwe.genError(mwe.E_MW_EXT_HTTP_UNEXPECTED_VALUE, 'Parse failed.', err));
        return;
      }

      const eulaMap = new Map();
      try {
        const eulaArray = result.EULAFile.EULA;
        for (let i = 0; i < eulaArray.length; i++) {
          const eula = eulaArray[i];

          // Locale
          const locale = eula.$.Locale.toUpperCase();
          if (!locale) {
            callback(mwe.genError(mwe.E_MW_EXT_HTTP_UNEXPECTED_VALUE, 'Locale is not found.'));
            return;
          }

          // Text
          const strings = eula.Text[0];
          if (!strings) {
            callback(mwe.genError(mwe.E_MW_EXT_HTTP_UNEXPECTED_VALUE, 'Text is not found.'));
            return;
          }

          eulaMap.set(locale, strings);          
        }

        // DefaultLocale
        const defaultLocale = result.EULAFile.$.DefaultLocale.toUpperCase();
        if (!eulaMap.has(defaultLocale)) {
          callback(mwe.genError(mwe.E_MW_EXT_HTTP_UNEXPECTED_VALUE,
          'DefaultLocale is invalid.(' + defaultLocale + ')'));
          return;
        }

        // Win/Mac のロケール情報に合った文言を探す
        let strings = null;
        if (localeCode) {
          strings = eulaMap.get(localeCode);
        }
        if (!strings) {
          strings = eulaMap.get(defaultLocale);
        }

        callback(null, strings);
      }
      catch (e) {
        let err = e;
        if (!(err instanceof Error)) {
          err = new Error('Error: ' + e);
        }
        callback(mwe.genError(mwe.E_MW_EXT_HTTP_UNEXPECTED_VALUE, 'Parse failed.', err));
        return;
      }
    });
  }


}

module.exports = EulaXmlParser;
