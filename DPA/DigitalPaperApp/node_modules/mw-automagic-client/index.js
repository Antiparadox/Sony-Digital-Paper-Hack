'use strict';

const log_error = require('debug')('mw-automagic-client:automagic-client:error');
const log_debug = require('debug')('mw-automagic-client:automagic-client:debug');


const UpdateChecker = require('./lib/update-checker');
const UpdateDownloader = require('./lib/update-downloader');

/**
 * Auto Magic の配信サーバーへアクセスするためのクライアント。
 */
class AutoMagicClient {

  constructor() {
    this.appUpdateChecker = new UpdateChecker();
    this.deviceUpdateChecker = new UpdateChecker();
    this.updateDownloader = new UpdateDownloader();
  }

  /**
   * アプリのアップデートを確認する。
   *
   * @param {string} appVersion
   *    現在のアプリのバージョン番号。
   *      - 例）1.0.0.10250
   * @param {string} appLanguage
   *    アプリの表示言語。
   *    以下のいずれかを指定する。
   *      - 'Japanese'
   *      - 'English''
   * @param {function(?Error, object)} callback
   *    アップデートの確認結果を受け取るためのcallback関数。
   *    アップデートの確認に失敗した場合には、callback関数の
   *    第一引数に以下のいずれかのErrorオブジェクトが渡される。
   *      - E_MW_EXT_HTTP_ERROR
   *      - E_MW_EXT_HTTP_UNEXPECTED_STATUS
   *      - E_MW_EXT_HTTP_UNEXPECTED_VALUE
   *      - E_MW_EXT_RES_UNRECOGNIZABLE_VALUE
   *    アップデートが見つかった場合には、callback関数の
   *    第二引数に次のオブジェクトが渡される。
   *    `{
   *      updateType:     '<アップデートの種類(app)>',
   *      newVersion:     '<アップデート後のバージョン番号>',
   *      currentVersion: '<現在のバージョン番号>',
   *      description:    '<アップデート内容の文言>',
   *      disclaimer:     '<免責事項の文言>'
   *      eula:           '<EULAの文言>'
   *      updater:        '<アップデート用のオブジェクト>'
   *    }`
   *    アップデートが見つからなかった場合には、callback関数の
   *    第二引数に null が渡される。
   */
  checkForAppUpdate(
    appVersion,
    appLanguage,
    callback
  ) {
    this.appUpdateChecker.checkForAppUpdate(
      appVersion,
      appLanguage,
      function (error, update) {
        if (error) {
          callback(error);
          return;
        }
        callback(null, update);
      });
  }

  /**
   * アプリのアップデートの確認中か否かを確認する。
   *
   * @return {boolean}  アップデートの確認中の場合にtrue
   */
  isCheckingForAppUpdate() {
    return this.appUpdateChecker.isCheckingForUpdate();
  }

  /**
   * アプリのアップデートの確認を中断する。
   *
   * @param {function()} callback 中断完了時にcallbackされる関数。
   */
  stopCheckingForAppUpdate(callback) {
    this.appUpdateChecker.cancelUpdateCheck(
      function(){
        callback();
    });
  }


  /**
   * デバイスのアップデートを確認する。
   *
   * @param {string} deviceVersion
   *    デバイスのバージョン番号。
   *      - 例）1.1.00.10259
   * @param {string} deviceModel
   *    デバイスのモデル名。
   *      - 例）DPT-RP1
   * @param {string} deviceSkuCode
   *    デバイスのロケール情報（SKU code）。
   *    以下のいずれかを指定する。
   *      - 'J'
   *      - 'U'
   * @param {string} appLanguage
   *    アプリの表示言語。
   *    以下のいずれかを指定する。
   *      - 'Japanese'
   *      - 'English''
   * @param {function(?Error, object)} callback
   *    アップデートの確認結果を受け取るための callback 関数。
   *    アップデートの確認に失敗した場合には、callback 関数の
   *    第一引数に以下のいずれかの Error オブジェクトが渡される。
   *      - E_MW_EXT_HTTP_ERROR
   *      - E_MW_EXT_HTTP_UNEXPECTED_STATUS
   *      - E_MW_EXT_HTTP_UNEXPECTED_VALUE
   *      - E_MW_EXT_RES_UNRECOGNIZABLE_VALUE
   *    アップデートが見つかった場合には、callback 関数の
   *    第二引数に次のオブジェクトが渡される。
   *    `{
   *      updateType:     '<アップデートの種類(device)>',
   *      newVersion:     '<アップデート後のバージョン番号>',
   *      currentVersion: '<現在のバージョン番号>',
   *      description:    '<アップデート内容の文言>',
   *      disclaimer:     '<免責事項の文言>'
   *      eula:           '<EULAの文言>'
   *      updater:        '<アップデーターのオブジェクト>'
   *    }`
   *    アップデートが見つからなかった場合には、callback関数の
   *    第二引数に null が渡される。
   */
  checkForDeviceUpdate(
    deviceVersion,
    deviceModel,
    deviceSkuCode,
    appLanguage,
    callback
  ) {
    this.deviceUpdateChecker.checkForDeviceUpdate(
      deviceVersion,
      deviceModel,
      deviceSkuCode,
      appLanguage,
      function (error, update) {
        if (error) {
          callback(error);
          return;
        }
        callback(null, update);
      });
  }

  /**
   * デバイスのアップデートの確認中か否かを確認する。
   *
   * @return {boolean}  アップデートの確認中の場合にtrue
   */
  isCheckingForDeviceUpdate() {
    return this.deviceUpdateChecker.isCheckingForUpdate();
  }

  /**
   * デバイスのアップデートの確認を中断する。
   *
   * @param {function()} callback 中断完了時にcallbackされる関数。
   */
  stopCheckingForDeviceUpdate(callback) {
    this.deviceUpdateChecker.cancelUpdateCheck(
      function(){
        callback();
    });
  }


  /**
   * アプリのアップデーターをダウンロードする。
   *
   * @param {object} updater
   *    ダウンロード対象のアップデーターの情報。
   *    checkForAppUpdate() で取得した updater オブジェクトを指定する。
   * @param {string} dstDirPath
   *    ダウンロード先のディレクトリのパス。
   * @param {function(?Error, string)} callback
   *    ダウンロードの処理結果を受け取るための callback 関数。
   *    ダウンロードに失敗した場合には、callback 関数の
   *    第一引数に以下のいずれかの Error オブジェクトが渡される。
   *      - E_MW_ALREADY_RUNNING
   *      - E_MW_CANCELLED
   *      - E_MW_EXT_HTTP_ERROR
   *      - E_MW_FILE_WRITE_LOCAL_FAILED
   *      - E_MW_EXT_HTTP_UNEXPECTED_STATUS
   *      - E_MW_EXT_HTTP_UNEXPECTED_VALUE
   *    ダウンロードに成功した場合には、callback関数の
   *    第二引数にダウンロード先のファイルパスがが渡される。
   */
  downloadAppUpdater(
    updater,
    dstDirPath,
    callback
  ) {
    this.updateDownloader.downloadAppUpdater(
      updater,
      dstDirPath,
      function (error, filePath) {
        if (error) {
          log_error('[downloadAppUpdater] ' + error);
          callback(error);
          return;
        }
        log_debug('[downloadAppUpdater] ' + filePath);
        callback(null, filePath);
      });
  }


  /**
   * デバイスのアップデーターをダウンロードする。
   *
   * @param {object} updater
   *    ダウンロード対象のアップデーターの情報。
   *    checkForDeviceUpdate() で取得した updater オブジェクトを指定する。
   * @param {string} dstDirPath
   *    ダウンロード先のディレクトリのパス。
   * @param {function(?Error, string)} callback
   *    ダウンロードの処理結果を受け取るための callback 関数。
   *    ダウンロードに失敗した場合には、callback 関数の
   *    第一引数に以下のいずれかの Error オブジェクトが渡される。
   *      - E_MW_ALREADY_RUNNING
   *      - E_MW_CANCELLED
   *      - E_MW_EXT_HTTP_ERROR
   *      - E_MW_FILE_WRITE_LOCAL_FAILED
   *      - E_MW_EXT_HTTP_UNEXPECTED_STATUS
   *      - E_MW_EXT_HTTP_UNEXPECTED_VALUE
   *    ダウンロードに成功した場合には、callback関数の
   *    第二引数にダウンロード先のファイルパスがが渡される。
   */
  downloadDeviceUpdater(
    updater,
    dstDirPath,
    callback
  ) {
    this.updateDownloader.downloadDeviceUpdater(
      updater,
      dstDirPath,
      function (error, filePath) {
        if (error) {
          log_error('[downloadDeviceUpdater] ' + error);
          callback(error);
          return;
        }
        log_debug('[downloadDeviceUpdater] ' + filePath);
        callback(null, filePath);
      });
  }

  /**
   * アプリまたはデバイスのアップデーターをダウンロード中か否かを確認する。
   *
   * @return {boolean} ダウンロード中の場合には true を返却する。
   */
  isDownloading() {
    return this.updateDownloader.isDownloading();
  }

  /**
   * アプリまたはデバイスのアップデーターのダウンロードの進捗を取得する。
   *
   * @return {object}
   *    ダウンロードの進捗として以下のオブジェクトを返却する。
   *    `{
   *      current:  '<ダウンロード済みのbyte数>',
   *      total:    '<ダウンロード全体のbyte数>'
   *    }`
   */
  getDownloadProgress() {
    return this.updateDownloader.getDownloadProgress();
  }

  /**
   * アプリまたはデバイスのアップデーターのダウンロードを中断する。
   *
   * @param {function()} callback
   *    ダウンロードの中断完了を受け取るための callback 関数。
   */
  stopDownloading(callback) {
    this.updateDownloader.cancelDownload(
      function(){
        callback();
    });
  }

}

/**
 * @export AutoMagicClient
 */
module.exports = new AutoMagicClient();
