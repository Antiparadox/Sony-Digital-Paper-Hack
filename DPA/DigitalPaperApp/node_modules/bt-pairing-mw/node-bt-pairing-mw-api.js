/**
 * @module node-bt-pairing-mw
 * @version 1.0.0.03150
 */

/**
 * @external String
 * @external number
 */

/**
 * @class
 * @extends EventEmitter
 * @classdesc pairing operation class
 */
function SBluetoothPairing() {


    /* ************************************************* */
    /* scan */
    /* ************************************************* */

    /**
     * Enum for Bluetooth device class.
     * @readonly
     * @enum {number} 
     */
    var S_BT_PAIRING_DEVICE_CLASS = {
        /** class mask **/
        S_BT_PAIRING_DEVICE_CLASS_MASK_SERVICE: 0x00ffe000,
        S_BT_PAIRING_DEVICE_CLASS_MASK_DEVICE: 0x00001ffc,
        S_BT_PAIRING_DEVICE_CLASS_MASK_MAJOR: 0x00001f00,
        S_BT_PAIRING_DEVICE_CLASS_MASK_MINOR: 0x000000fc,

        /** major service class **/
        S_BT_PAIRING_DEVICE_CLASS_SERVICE_LIMITED_DISCOVERABLE_MODE: 0x00002000,
        S_BT_PAIRING_DEVICE_CLASS_SERVICE_RESERVED_14: 0x00004000,
        S_BT_PAIRING_DEVICE_CLASS_SERVICE_RESERVED_15: 0x00008000,
        S_BT_PAIRING_DEVICE_CLASS_SERVICE_POSITIONING: 0x00010000,
        S_BT_PAIRING_DEVICE_CLASS_SERVICE_NETWORKING: 0x00020000,
        S_BT_PAIRING_DEVICE_CLASS_SERVICE_RENDERING: 0x00040000,
        S_BT_PAIRING_DEVICE_CLASS_SERVICE_CAPTURING: 0x00080000,
        S_BT_PAIRING_DEVICE_CLASS_SERVICE_OBJECT_TRANSFER: 0x00100000,
        S_BT_PAIRING_DEVICE_CLASS_SERVICE_AUDIO: 0x00200000,
        S_BT_PAIRING_DEVICE_CLASS_SERVICE_TELEPHONY: 0x00400000,
        S_BT_PAIRING_DEVICE_CLASS_SERVICE_INFORMATION: 0x00800000,

        /** major device class **/
        S_BT_PAIRING_DEVICE_CLASS_AUDIO_VIDEO: 0x00000400,
        S_BT_PAIRING_DEVICE_CLASS_COMPUTER: 0x00000100,
        S_BT_PAIRING_DEVICE_CLASS_HEALTH: 0x00000900,
        S_BT_PAIRING_DEVICE_CLASS_IMAGING: 0x00000600,
        S_BT_PAIRING_DEVICE_CLASS_MISC: 0x00000000,
        S_BT_PAIRING_DEVICE_CLASS_NETWORKING: 0x00000300,
        S_BT_PAIRING_DEVICE_CLASS_PERIPHERAL: 0x00000500,
        S_BT_PAIRING_DEVICE_CLASS_PHONE: 0x00000200,
        S_BT_PAIRING_DEVICE_CLASS_TOY: 0x00000800,
        S_BT_PAIRING_DEVICE_CLASS_UNCATEGORIZED: 0x00001f00,
        S_BT_PAIRING_DEVICE_CLASS_WEARABLE: 0x00000700,

        /** full device class **/
        S_BT_PAIRING_DEVICE_CLASS_COMPUTER_DESKTOP: 0x00000104,
        S_BT_PAIRING_DEVICE_CLASS_COMPUTER_HANDHELD_PC_PDA: 0x00000110,
        S_BT_PAIRING_DEVICE_CLASS_COMPUTER_LAPTOP: 0x0000010c,
        S_BT_PAIRING_DEVICE_CLASS_COMPUTER_PALM_SIZE_PC_PDA: 0x00000114,
        S_BT_PAIRING_DEVICE_CLASS_COMPUTER_SERVER: 0x00000108,
        S_BT_PAIRING_DEVICE_CLASS_COMPUTER_UNCATEGORIZED: 0x00000100,
        S_BT_PAIRING_DEVICE_CLASS_COMPUTER_WEARABLE: 0x00000118,
        S_BT_PAIRING_DEVICE_CLASS_PHONE_CELLULAR: 0x00000204,
        S_BT_PAIRING_DEVICE_CLASS_PHONE_CORDLESS: 0x00000208,
        S_BT_PAIRING_DEVICE_CLASS_PHONE_ISDN: 0x00000214,
        S_BT_PAIRING_DEVICE_CLASS_PHONE_MODEM_OR_GATEWAY: 0x00000210,
        S_BT_PAIRING_DEVICE_CLASS_PHONE_SMART: 0x0000020c,
        S_BT_PAIRING_DEVICE_CLASS_PHONE_UNCATEGORIZED: 0x00000200,
    };

    /**
     * ErrorInfo Property
     * @typedef {object} module:node-bt-pairing-mw~SBluetoothPairing~ErrorInfo
     * @prop {number} error_code
     * @prop {string} message
     * @prop {any} other properties
     */


    /**
     * This callback is called when the destroy operation is finished.
     *
     * @callback module:node-bt-pairing-mw~SBluetoothPairing~destroyCallback
     * @param {module:node-bt-pairing-mw~SBluetoothPairing~ErrorInfo} error - error object. null or undefined if api succeed.
     */

    /**
     * Release internal resources.
     * After calling this methods, this instance is invalid. All calling methods for this instance fails.
     *
     * @param {module:node-bt-pairing-mw~SBluetoothPairing~destroyCallback} callback - The function to be called when
                                                    the operation is finished.
                                                    This method is processed as async mode if the callback is a valid function
                                                    This method is processed as sync mode if the callback is not a valid function (ex. null or undefined)
     *
     */
    this.destroy = function (callback) { }

    /**
     * Start to scan bluetooth devices.
     * fire detected/undected/scanError events until calling stopScanDevice 
     *
     * @fires module:node-bt-pairing-mw~SBluetoothPairing#deviceFound
     * @fires module:node-bt-pairing-mw~SBluetoothPairing#deviceChanged
     * @fires module:node-bt-pairing-mw~SBluetoothPairing#deviceLost
     * @fires module:node-bt-pairing-mw~SBluetoothPairing#deviceScanError
     * @param {Array.<number>} [classFilter] - Array of the target deviceClassId. None filter if null or empty array
     *                         S_BT_PAIRING_DEVICE_CLASS
                               Tip: For Digital Paper, the class filter could be set to:
                               [S_BT_PAIRING_DEVICE_CLASS.S_BT_PAIRING_DEVICE_CLASS_PHONE_SMART | S_BT_PAIRING_DEVICE_CLASS.S_BT_PAIRING_DEVICE_CLASS_SERVICE_NETWORKING],
                               which represents a smart phone device with networking ability.
     * @param {Array.<string>} [serviceFilter] - Array of the target service uuid. None filter if null or empty array
     *                         "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
     *                         Refer the below url about the service uuid
     *                         https://www.bluetooth.com/ja-jp/specifications/assigned-numbers/service-discovery
                               Tip: For Digital Paper, this service filter could be set to:
                               ["00001116-0000-1000-8000-00805F9B34FB"],
                               which represents the NAP service UUID.
                               Note:
                               - Using service filter may slow down the device scanning progress because the service inquiry is performed synchronously.
                               - Without using service filter, already paired devices (remembered by OS) would be returned regardless of its detectability.
                                 That is to say, once the device is paired, even it is physically undetectable, the OS would consider it to be "present" and return it when scanning.
                                 One can use the service filter to avoid this because the service inquiry is performed in real time.
                                 The device must be able to communicate via Bluetooth to respond to the inquiry and prevent itself from being filtered.

     * @param {module:node-bt-pairing-mw~SBluetoothPairing~startScanDeviceCallback} [callback] - callback function
     */
    this.startScanDevice = function (classFilter, serviceFiletr, callback) { }

    /**
     * This callback is called when the startScanDevice operation is finished.
     *
     * @callback module:node-bt-pairing-mw~SBluetoothPairing~startScanDeviceCallback
     * @param {module:node-bt-pairing-mw~SBluetoothPairing~ErrorInfo} error - error object. null or undefined if api succeed.
     */

    /**
     * @typedef {object} module:node-bt-pairing-mw~SBluetoothPairing~DeviceInfo - Properties of device info
     * @prop {string} btAddress - Bluetooth address (xx:xx:xx:xx:xx:xx)
     * @prop {string} name - Bluetooth device name
     * @prop {boolean} paired - The device is paired or not, true if paired
     * @prop {boolean} connected - The device is connected or not, true if connected
     * @prop {boolean} remembered - The device is remembered or not, true if remembered
     * @prop {number} classOfDevice - class of device (S_BT_PAIRING_DEVICE_CLASS)
     * @prop {Date} lastSeen - The date that device is last seen
     * @prop {Date} lastUsed - The date that device is last used
     * @prop {module:node-bt-pairing-mw~SBluetoothPairing~DeviceId} deviceId - The device identification information.
                                This field could be undefined, null, or a valid DeviceId object.
                                This field is undefined when one of the following happens:
                                    - The Device ID information of this device has not been retrieved yet.
                                    - An error has occured before trying to retrieve the Device ID information of this device.
                                    - An error has occured when trying to retrieve the Device ID information of this device,
                                      and the error was neither "WSASERVICE_NOT_FOUND" nor "WSANO_DATA".
                                This field is null when one of the following happens:
                                    - An error has occured when trying to retrieve the Device ID information of the device,
                                      and the error was "WSASERVICE_NOT_FOUND" or "WSANO_DATA".
                                    - No valid Device ID record was retrieved from the device.
                                    - Failed to retrieve Device ID information from the Device ID record.
                                Otherwise, if the Device ID information was successfully retrieved, this field contains a valid DeviceId object.
                                
     * @prop {any} reserved - Property reserved for future use
     */

    /**
     * @typedef {object} module:node-bt-pairing-mw~SBluetoothPairing~DeviceId - Properties of device identification
     * @prop {number} specificationId - This is intended to reflect the version number of the Bluetooth Device ID Profile specification supported by the device. (0x0103)
     * @prop {number} vendorId - This is intended to uniquely identify the vendor of the device. Used in conjunction with required attribute VendorIDSource, which determines which organization assigned the VendorID value. The VendorID ‘0xFFFF’ is reserved as the default VendorID when no Device ID Service Record is present in the device.
     * @prop {number} productId - This is intended to distinguish between different products made by the vendor above. These IDs are managed by the vendors themselves.
     * @prop {number} version - A numeric expression identifying the device release number in Binary-Coded Decimal. This is a vendor-assigned field, which defines the version of the product identified by the VendorID and ProductID attributes.
     * @prop {boolean} primaryRecord - This is intended to designate one particular Device ID Service Record (in case multiple Device ID Service Records exist on a device) as the primary Device ID Service Record for the device – the PrimaryRecord attribute is set to TRUE for that record and FALSE for all other records.
     * @prop {number} vendorIdSource - This attribute designates which organization assigned the VendorID attribute, 0x201.
                      Defined values:
                        0x0001 = Bluetooth SIG assigned Device ID Vendor ID value from the Assigned Numbers document
                        0x0002 = USB Implementer’s Forum assigned Vendor ID value
                        0x0000, 0x0003 – 0xFFFF = Reserved for future use
     */

    /**
     * Stop Bluetooth scanning.
     * Just stops scanning, without any return value or status result specified
     *
     * @param {module:node-bt-pairing-mw~SBluetoothPairing~stopScanDeviceCallback} [callback] - callback function
     */
    this.stopScanDevice = function (callback) { }

    /**
     * This callback is called when the stopScanDevice operation is finished.
     *
     * @callback module:node-bt-pairing-mw~SBluetoothPairing~stopScanDeviceCallback
     * @param {module:node-bt-pairing-mw~SBluetoothPairing~ErrorInfo} error - error object. null or undefined if api succeed.
     */


    /* ************************************************* */
    /* paring */
    /* ************************************************* */

    /**
     * pair device
     * @fires module:node-bt-pairing-mw~SBluetoothPairing#deviceRegistered
     * @param {string} btAddress - bluetooth address of target (xx:xx:xx:xx:xx:xx)
     * @param {Array.<string>} serviceUuids - Array of the target service uuid. Error if null or empty array
     *                         "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
     *                         Refer the below url about the service uuid
     *                         https://www.bluetooth.com/ja-jp/specifications/assigned-numbers/service-discovery
     * @param {module:node-bt-pairing-mw~SBluetoothPairing~registerDeviceCallback} [callback] - callback function
     */
    this.registerDevice = function (btAddress, serviceUuids, callback) { }

    /**
     * This callback is called when the registerDevice operation is finished.
     *
     * @callback module:node-bt-pairing-mw~SBluetoothPairing~registerDeviceCallback
     * @param {module:node-bt-pairing-mw~SBluetoothPairing~ErrorInfo} error - error information. null if succeeded
     */


    /**
     * remove the paired device
     * @fires module:node-bt-pairing-mw~SBluetoothPairing#deviceUnregistered
     * @param {string} btAddress - bluetooth address of target (xx:xx:xx:xx:xx:xx)
     * @param {module:node-bt-pairing-mw~SBluetoothPairing~unregisterDeviceCallback} [callback] - callback function
     */
    this.unregisterDevice = function (btAddress, callback) { }


    /**
     * This callback is called when the unregisterDevice operation is finished.
     *
     * @callback module:node-bt-pairing-mw~SBluetoothPairing~unregisterDeviceCallback
     * @param {ErrorInfo} error - error information. null if succeeded
     */


    /* ************************************************* */
    /* environment */
    /* ************************************************* */


    /**
     * Get the On/Off status of Bluetooth function of the PC
     * @param {module:node-bt-pairing-mw~SBluetoothPairing~isBluetoothEnabledCallback} callback - Callback function
     */
    this.isBluetoothEnabled = function (callback) { }


    /**
     * This callback is called when the isBluetoothEnabled operation is finished.
     *
     * @callback module:node-bt-pairing-mw~SBluetoothPairing~isBluetoothEnabledCallback
     * @param {module:node-bt-pairing-mw~SBluetoothPairing~ErrorInfo} error - error object. null or undefined if api succeed.
     * @param {module:node-bt-pairing-mw~SBluetoothPairing~BluetoothInfo} btInfo - Bluetooth function and setting information
     */

    /**
     * Information returned from Win32 API. Off = No Bluetooth device could be recognized.
     * @typedef {object} module:node-bt-pairing-mw~SBluetoothPairing~BluetoothInfo - Properties of Bluetooth function and setting information
     * @prop {boolean} enabled - True if the Bluetooth function is enabled
     * @prop {any} reserved - Property reserved for future use
     */


    /* ************************************************* */
    /* event */
    /* ************************************************* */

    /**
     * Indicates the bluetooth device is detected
     * @event module:node-bt-pairing-mw~SBluetoothPairing#deviceFound
     * @param {module:node-bt-pairing-mw~SBluetoothPairing~DeviceInfo} deviceInfo - bluetooth device information
     */

    /**
     * Indicates the bluetooth device has changed
     * @event module:node-bt-pairing-mw~SBluetoothPairing#deviceChanged
     * @param {module:node-bt-pairing-mw~SBluetoothPairing~DeviceInfo} deviceInfo - bluetooth device information
     */

    /**
     * Indicates the bluetooth device disappeared
     * @event module:node-bt-pairing-mw~SBluetoothPairing#deviceLost
     * @param {module:node-bt-pairing-mw~SBluetoothPairing~DeviceInfo} deviceInfo - bluetooth device information
     */

    /**
     * Indicates occurring error while scanning
     * @event module:node-bt-pairing-mw~SBluetoothPairing#deviceScanError
     * @param {module:node-bt-pairing-mw~SBluetoothPairing~ErrorInfo} error - error object.
     */

    /**
     * Indicates the bluetooth device is paired
     * @event module:node-bt-pairing-mw~SBluetoothPairing#deviceRegistered
     * @param {module:node-bt-pairing-mw~SBluetoothPairing~DeviceInfo} deviceInfo - bluetooth device information
     */

    /**
     * Indicates the paired bluetooth device is removed
     * @event module:node-bt-pairing-mw~SBluetoothPairing#deviceUnregistered
     * @param {module:node-bt-pairing-mw~SBluetoothPairing~DeviceInfo} deviceInfo - bluetooth device information
     */
}