//
//  StopDetectionWorker.h
//
//  Copyright 2016 Sony Corporation
//

#pragma once

#include <nan.h>
#include "UsbDetectManager.h"
#include "Event.h"


class StopDetectionWorker : public Nan::AsyncWorker, IUsbDetectObserver
{
private:
	Event mDetectEvent;

public:
    /**
     * Constructor
     */
    StopDetectionWorker(/*[in]*/ Nan::Callback* callback)
        : Nan::AsyncWorker(callback)
    {
	}
    
	/**
	 * Destructor
	 */
	virtual ~StopDetectionWorker()
	{
		// USB機器の接続/切断イベントのcallbackを解放する
		UsbDetectManager::RemoveObserver(this);
	}

	/**
	 * Execute tasks in background
	 */
	virtual void Execute()
    {
		// USB機器の接続/切断イベントのcallbackを設定する
		UsbDetectManager::AddObserver(this);


		// USB機器の接続/切断検出処理を終了する
		const std::string error = UsbDetectManager::StopDeteciton();
		if (!error.empty()) {
			this->SetErrorMessage(error.c_str());
			return;
		}

		// 終了処理を待機する
		this->mDetectEvent.Wait();
    }
    
	/**
	 * Executed when the async work is complete
	 * this function will be run inside the main event loop
	 * so it is safe to use V8 again
	 */
    virtual void HandleOKCallback()
    {
		Nan::HandleScope scope;

		// USB機器の接続/切断イベントのcallbackを解放する
		UsbDetectManager::RemoveObserver(this);

		const int argc = 1;
		v8::Local<v8::Value> argv[] = {
			Nan::Null(),
		};

		callback->Call(argc, argv);
	}

	/**
	 * Executed when the async work is failed
	 * this function will be run inside the main event loop
	 * so it is safe to use V8 again
	 */
	virtual void HandleErrorCallback()
	{
		Nan::HandleScope scope;

		const int argc = 2;
		v8::Local<v8::Value> argv[] = {
			Nan::Error(this->ErrorMessage()),
		};

		callback->Call(argc, argv);
	}

	/**
	* USB機器の接続/切断検出処理が開始された際に呼び出される。
	*/
	virtual void OnDetectStarted(/*[in]*/ std::string error)
	{
	}

	/**
	* USB機器の接続/切断検出処理が終了された場合に呼び出される。
	*/
	virtual void OnDetectStopped(/*[in]*/ std::string error) {
		if (!error.empty()) {
			this->SetErrorMessage(error.c_str());
		}
		this->mDetectEvent.Signal();
	}

	/**
	* USB機器の接続が検出された場合に呼び出される。
	*/
	virtual void OnDeviceAdded(void) {
	}

	/**
	* USB機器の切断が検出された場合に呼び出される。
	*/
	virtual void OnDeviceRemoved(void) {
	}
};
