//
//  UsbDetector.h
//
//  Copyright 2016 Sony Corporation
//

#pragma once

#include <CoreFoundation/CoreFoundation.h>
#include <IOKit/IOKitLib.h>
#include <IOKit/usb/IOUSBLib.h>
#include <pthread.h>
#include <string>
#include <vector>
#include <deque>

#include "../DeviceEvent.h"
#include "../UsbDevice.h"
#include "../UsbDetectObserver.h"


class UsbDetector
{
private:
    UsbDetector() {}
    ~UsbDetector() {}
    
    static void* StartRunLoop(
        /*[in]*/ void* param
        );
    
    static void OnDeviceAdded(
        /*[in]*/ void* refCon,
        /*[in]*/ io_iterator_t iterator
        );
    
    static void EnumDevices(
        /*[in]*/ io_iterator_t iterator,
        /*[in]*/ bool isAdded
        );
    
    static void OnDeviceRemoved(
        /*[in]*/ void *         refCon,
        /*[in]*/ io_service_t   service,
        /*[in]*/ natural_t      messageType,
        /*[in]*/ void *         messageArgument
        );
    
    static kern_return_t GetDeviceInfo(
        /*[in]*/ io_service_t ioDevice,
        /*[out]*/ std::shared_ptr<UsbDevice>& device,
        /*[out]*/ IOUSBDeviceInterface*** pppDeviceInterface
        );
    
public:
	static void AddObserver(
		/*[in]*/ IUsbDetectObserver* pObserver
		);

	static void RemoveObserver(
		/*[in]*/ IUsbDetectObserver* pObserver
		);

    static std::string StartDeteciton(void);

    static std::string StopDeteciton(void);

    static bool IsRunning(void);
    
    static bool HasEvent();

    static void GetAllEvents(
        /*[out]*/ std::deque<std::shared_ptr<DeviceEvent>>& eventQueue
        );

    static std::string FindDevice(
        /*[in]*/ const int* pIdVendor,
        /*[in]*/ const int* pIdProduct,
        /*[out]*/ std::vector<std::shared_ptr<UsbDevice>>& deviceList
        );
};