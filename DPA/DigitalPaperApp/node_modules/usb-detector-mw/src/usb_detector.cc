//
//  usb_detector.cc
//
//  Copyright 2016 Sony Corporation
//

#include <nan.h>
#include <node.h>

#include "StartDetectionWorker.h"
#include "StopDetectionWorker.h"
#include "FindDeviceWorker.h"
#include "UsbDetectManager.h"

/**
 * USB機器の検出を開始/再開する。
 * PC/Macに接続されている全てのUSB機器の接続/切断が検出対象となる。
 *
 * @param idVendor			検索対象のUSB機器のVID (0の場合には全てのidVendorが対象)
 * @param idProduct			検索対象のUSB機器のPID (0の場合には全てのidProductが対象)
 * @param startCallback     USB機器の接続/切断検出処理が開始された際のcallback 
 * @param addCallback       USB機器が接続された際のcallback
 * @param removeCallback    USB機器が切断された際のcallback
 */
NAN_METHOD(start)
{
	Nan::HandleScope();

	// check the number of function arguments
	if (info.Length() != 5) {
        Nan::ThrowTypeError("Number of arguments must be 5.");
        return;
    }
    
	// check the types of function arguments
	if (!info[0]->IsInt32()) {
		Nan::ThrowTypeError("1st argument (idVendor) must be an Int32.");
		return;
	}
	if (!info[1]->IsInt32()) {
		Nan::ThrowTypeError("2nd argument (idProduct) must be an Int32.");
		return;
	}
	if (!info[2]->IsFunction()) {
        Nan::ThrowTypeError("3rd argument (startCallback) must be a Function.");
        return;
    }
    if (!info[3]->IsFunction()) {
        Nan::ThrowTypeError("4th argument (addCallback) must be a Function.");
        return;
    }
    if (!info[4]->IsFunction()) {
        Nan::ThrowTypeError("5ht argument (removeCallback) must be a Function.");
        return;
    }
    
	// acquire the values of function arguments
	int idVendor		= info[0]->Int32Value();
	int idProduct		= info[1]->Int32Value();
    auto startCallback	= new Nan::Callback(info[2].As<v8::Function>());
    auto addCallback	= new Nan::Callback(info[3].As<v8::Function>());
    auto removeCallback = new Nan::Callback(info[4].As<v8::Function>());

	// start a background task
	Nan::AsyncQueueWorker(
		new StartDetectionWorker(idVendor, idProduct, startCallback, addCallback, removeCallback));
}

/**
 * USB機器の検出を終了/中断する。
 *
 * @param stopCallback   USB機器の接続/切断検出処理が終了された際のcallback
 */
NAN_METHOD(stop)
{
	Nan::HandleScope();
	
	// check the number of function arguments
	if (info.Length() > 1) {
        Nan::ThrowTypeError("Number of arguments must be 0 or 1.");
        return;
    }
    
	// check the types of function arguments
	if (!info[0]->IsFunction()) {
        Nan::ThrowTypeError("1st argument must be Function.");
        return;
    }
    
	// check the types of function arguments
	auto callback = new Nan::Callback(info[0].As<v8::Function>());
    
	// start a background task
	Nan::AsyncQueueWorker(new StopDetectionWorker(callback));
}

/**
 * PC/Macに接続されているUSB機器を検索する。
 *
 * @param idVendor	検索対象のUSB機器のVID (0の場合には全てのidVendorが対象)
 * @param idProduct	検索対象のUSB機器のPID (0の場合には全てのidProductが対象)
 * @param callback	検索処理が完了した際のcallback
 */
NAN_METHOD(find)
{
	Nan::HandleScope();

	// check the number of function arguments
	if (info.Length() != 3) {
		Nan::ThrowTypeError("Number of arguments must be 3.");
		return;
	}

	// check the types of function arguments
	if (!info[0]->IsInt32()) {
		Nan::ThrowTypeError("1st argument (idVendor) must be an Int32.");
		return;
	}
	if (!info[1]->IsInt32()) {
		Nan::ThrowTypeError("2nd argument (idProduct) must be an Int32.");
		return;
	}
	if (!info[2]->IsFunction()) {
		Nan::ThrowTypeError("3rd argument (callback) must be a Function.");
		return;
	}

	int idVendor = info[0]->Int32Value();
	int idProduct = info[1]->Int32Value();
	auto callback = new Nan::Callback(info[2].As<v8::Function>());
    
    // start a background task
    Nan::AsyncQueueWorker(new FindDeviceWorker(idVendor, idProduct, callback));
}

/**
 * Node.js の event loop が終了し、JavaScript VM / Node.js がシャットダウンする前に呼び出される。
 * USB機器の接続/切断検出用のmesasge loopを終了させる。
 */
static void at_exit_callback(void* arg) {
	Nan::HandleScope();
	Nan::AsyncQueueWorker(new StopDetectionWorker(nullptr));
}


NAN_MODULE_INIT(init)
{
    NAN_EXPORT(target, start);
    NAN_EXPORT(target, stop);
    NAN_EXPORT(target, find);
	node::AtExit(at_exit_callback, target->GetIsolate());
}

NODE_MODULE(usb_detector, init);

