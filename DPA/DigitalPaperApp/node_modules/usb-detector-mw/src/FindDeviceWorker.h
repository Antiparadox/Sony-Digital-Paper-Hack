//
//  FindDeviceWorker.h
//
//  Copyright 2016 Sony Corporation
//

#pragma once

#include <nan.h>
#include "UsbDetectManager.h"
#include "Event.h"

class FindDeviceWorker : public Nan::AsyncWorker
{
private:
    int idVendor;
    int idProduct;
    std::vector<std::shared_ptr<UsbDevice>> deviceList;

public:
    /**
     * Constructor
     */
    FindDeviceWorker(int idVendor, int idProduct, Nan::Callback* callback)
        : Nan::AsyncWorker(callback), idVendor(idVendor), idProduct(idProduct)
    {}
    
	/**
	 * Executed inside the worker-thread.
	 * It is not safe to access V8, or V8 data structures
	 * here, so everything we need for input and output
	 * should go on `this`.
	 */
	virtual void Execute()
    {
        int* pVid = (idVendor != 0) ? &idVendor : nullptr;
        int* pPid = (idProduct != 0) ? &idProduct : nullptr;
        
        // Find USB devices which have specified VID and PID
        const std::string result = UsbDetectManager::FindDevice(pVid, pPid, deviceList);
		if (!result.empty()) {
			this->SetErrorMessage(result.c_str());
		}
    }

	/**
	 * Executed when the async work is complete
	 * this function will be run inside the main event loop
	 * so it is safe to use V8 again
	 */
	virtual void HandleOKCallback()
    {
        Nan::HandleScope scope;

        int i = 0;
        v8::Local<v8::Array> array = Nan::New<v8::Array>();
        for (auto it = deviceList.cbegin(); it != deviceList.cend(); it++) {
            v8::Local<v8::Object> item = (*it)->genV8Object();
            array->Set(i++, item);
        }

        const int argc = 2;
        v8::Local<v8::Value> argv[] = {
			Nan::Null(),
            array,
        };
		
        callback->Call(argc, argv);
    }

	/**
	 * Executed when the async work is failed
	 * this function will be run inside the main event loop
	 * so it is safe to use V8 again
	 */
	virtual void HandleErrorCallback()
	{
		Nan::HandleScope scope;

		const int argc = 2;
		v8::Local<v8::Value> argv[] = {
			Nan::Error(this->ErrorMessage()),
			Nan::Undefined(),
		};
		
		callback->Call(argc, argv);
	}
    
};
