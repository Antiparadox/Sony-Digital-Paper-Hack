//
//  UsbDetectManager.h
//
//  Copyright 2016 Sony Corporation
//

#pragma once

#include "UsbDetectObserver.h"
#include "DeviceEvent.h"
#include <deque>
#include <vector>
#include <memory>

#ifdef _MSC_VER
// Windows
#include "win/UsbDetector.h"
#else
// Mac OS X
#include "mac/UsbDetector.h"
#endif


class UsbDetectManager
{
public:
    /**
     * USBの接続/切断通知用のobserverを追加する。
     *
     * @param pObserver USBの接続/切断通知用のobserver
     */
	static void AddObserver(
		/*[in]*/ IUsbDetectObserver* pObserver
		)
	{
		UsbDetector::AddObserver(pObserver);
	};


	/**
	 * USBの接続/切断通知用のobserverを削除する。
	 *
	 * @param pObserver USBの接続/切断通知用のobserver
	 */
	static void RemoveObserver(
		/*[in]*/ IUsbDetectObserver* pObserver
		)
	{
		UsbDetector::RemoveObserver(pObserver);
	};


    /**
     * USB機器の接続/切断の検出処理を開始する。
     * 既にUSB機器の検出を開始済みの場合には一旦終了し、再度開始する。
	 *
	 * @return エラー文字列。成功時には空文字列。
     */
	static std::string StartDeteciton(void)
	{
		return UsbDetector::StartDeteciton();
	}
    

    /**
     * USB機器の接続/切断の検出処理を終了する。
	 *
	 * @return エラー文字列。成功時には空文字列。
     */
	static std::string StopDeteciton(void)
	{
		return UsbDetector::StopDeteciton();
	}


	/**
	 * USB機器の接続/切断の検出処理が動作中か？
	 */
	static bool IsRunning()
	{
		return UsbDetector::IsRunning();
	}


	/**
     * イベントキューに未だイベントオブジェクトが残っているか？
     */
	static bool HasEvent()
	{
		return UsbDetector::HasEvent();
	}

    
    /**
     * イベントキュー内の全てのイベントオブジェクトを取得する。
     *
     * @param rEventQueue イベントキュー
     */
	static void GetAllEvents(
		/*[out]*/ std::deque<std::shared_ptr<DeviceEvent>>& eventQueue
		)
	{
		UsbDetector::GetAllEvents(eventQueue);
	}


    /**
     * 指定したVID/PIDを持つUSB機器の一覧を取得する。
     * 
     * @param pIdVendor     検索対象のVID (opttional)
     * @param pIdProduct    検索対象のVID (opttional)
     * @param deviceList    検索結果のUSB機器の一覧
	 * @return エラー文字列。成功時には空文字列。
     */
	static std::string FindDevice(
		/*[in]*/ const int* pIdVendor,
		/*[in]*/ const int* pIdProduct,
		/*[out]*/ std::vector<std::shared_ptr<UsbDevice>>& deviceList
		)
	{
		return UsbDetector::FindDevice(pIdVendor, pIdProduct, deviceList);
	}
};