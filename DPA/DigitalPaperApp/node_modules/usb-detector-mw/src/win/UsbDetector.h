//
//  UsbDetector.h
//
//  Copyright 2016 Sony Corporation
//

#pragma once

#include <string>
#include <vector>
#include <map>
#include <deque>

#include "../DeviceEvent.h"
#include "../UsbDetectObserver.h"
#include "../tstring.h"
#include "UsbDeviceFinder.h"


class UsbDetector
{
private:
	UsbDetector() {}
	~UsbDetector() {}

	static void __stdcall OnStart(/*[in]*/ std::string errMsg);
	static void __stdcall OnStop(/*[in]*/ std::string errMsg);
	static void __stdcall OnDeviceChange(/*[in]*/ WPARAM wParam, /*[in]*/ LPARAM lParam);

	static void OnDeviceAdded(/*[in]*/ tstring& sPnpDeviceId);
	static void OnDeviceRemoved(/*[in]*/ tstring& sPnpDeviceId);

	static void CreateDeviceMap(
		/*[in]*/ const std::vector<std::shared_ptr<UsbDeviceFinder::USB_DEVICE>>& srcDeviceList,
		/*[out]*/ std::map<tstring, std::shared_ptr<UsbDevice>>& dstDeviceMap,
		/*[out]*/ std::vector<std::shared_ptr<UsbDevice>>& dstDeviceList
		);
	static std::shared_ptr<UsbDevice> ConvertUsbDevice(
		/*[in]*/ const std::shared_ptr<UsbDeviceFinder::USB_DEVICE>& srcDevice
		);

public:
	static void AddObserver(
		/*[in]*/ IUsbDetectObserver* pObserver
		);

	static void RemoveObserver(
		/*[in]*/ IUsbDetectObserver* pObserver
		);

	static std::string StartDeteciton(void);

	static std::string StopDeteciton(void);

	static bool IsRunning();

	static bool HasEvent();

	static void GetAllEvents(
		/*[out]*/ std::deque<std::shared_ptr<DeviceEvent>>& eventQueue
		);

	static std::string FindDevice(
		/*[in]*/ const int* pIdVendor,
		/*[in]*/ const int* pIdProduct,
		/*[out]*/ std::vector<std::shared_ptr<UsbDevice>>& deviceList
		);
};