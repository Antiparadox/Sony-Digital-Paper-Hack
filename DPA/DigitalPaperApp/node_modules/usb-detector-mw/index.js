/**
 * Win/Mac へのUSB機器の接続/切断を検出するクラス。
 */

'use strict';

const log_error = require('debug')('usb-detector-mw:usb-detector:error');
const log_debug = require('debug')('usb-detector-mw:usb-detector:debug');
const detector = require('./build/Release/usb_detector');
const EventEmitter2 = require('eventemitter2').EventEmitter2;

class UsbDetector extends EventEmitter2 {
  
  /**
   * コンストラクタ。
   * EventEmitter2のコンストラクタを呼び出して、イベント通知のオプションを変更する。
   * 
   * @constructor
   * @extends {EventEmitter2}
   */
  constructor() {
    super({
      wildcard: true,
      delimiter: ':',
      maxListeners: 10
    });
  }  

  /**
   * start(), find() の引数チェックと変換を行う。
   * 
   * @private
   * @param {number} vid
   *     検出開始時に接続されいるUSB機器の中で、開始結果に含めるUSB機器のVID (optional)
   * @param {number} pid
   *     検出開始時に接続されいるUSB機器の中で、開始結果に含めるUSB機器のPID (optional)
   * @param {function(Array.<object>)} callback
   *     検出処理が開始された際に呼び出されるcallback
   * @return {{vid:number, pid:number, callback:function(Array.<object>)}}
   *     変換後の引数
   */  
  checkArguments_(vid, pid, callback) {
    // 実際の引数の数に応じて、変数に値を入れ直す
    let _vid = 0;
    let _pid = 0;
    let _callback = undefined;
    if (vid && pid && callback) {
      // start(vid, pid, callback)
      _vid = vid;
      _pid = pid;
      _callback = callback;
    }
    else if (vid && pid) {
      // start(vid, callback)
      _vid = vid;
      _callback = pid;      
    }
    else if (vid) {
      // start(callback)
      _callback = vid;
    }

    // 引数の型チェック
    if (!Number.isInteger(_vid)) {
      const error = new TypeError('[ERROR] vid is not integer. [' + _vid + ']');
      log_error(error);
      throw error;
    }

    if (!Number.isInteger(_pid)) {
      const error = new TypeError('[ERROR] pid is not integer. [' + _pid + ']');
      log_error(error);
      throw error;
    }

    if (_callback !== null && typeof _callback !== 'function') {
      const error = new TypeError('[ERROR] callback !== function [' + typeof _callback + ']');
      log_error(error);
      throw error;
    }
    
    return {
      vid: _vid,
      pid: _pid,
      callback: _callback,
    };
  }

  /**
   * Win/Mac に対するUSB機器の接続/切断の検出処理を開始する。
   * 
   * @param {number} vid
   *    検出開始時に接続されいるUSB機器の中で、開始結果に含めるUSB機器のVID (optional)
   * @param {number} pid
   *    検出開始時に接続されいるUSB機器の中で、開始結果に含めるUSB機器のPID (optional)
   * @param {function(?Error, Array.<object>)} callback
   *    検出処理が開始された際に呼び出されるcallback
   * 
   * <pre>
   *     [ { deviceId: 'USB\\VID_054C&PID_0BE5\\012345678900001',
   *         vendorId: 1356,
   *         productId: 3045,
   *         vendorName: '(標準 USB ホスト コントローラー)',
   *         deviceName: 'USB Composite Device',
   *         serialNumber: '012345678900001' } ]
   * </pre>
   */
  start(vid, pid, callback) {
    log_debug('UsbDetector#start()');

    const args = this.checkArguments_(vid, pid, callback);
    
    const _self = this; 
    detector.start(
      args.vid,
      args.pid,
      function onStarted(error, deviceArray) {
        if (error) {
          log_error(error);
          if (args.callback) {
            args.callback(error);
          }
          return;
        }
        if (args.callback) {
          args.callback(null, deviceArray);
        }
        if (deviceArray && Array.isArray(deviceArray)) {
          for (let i = 0; i < deviceArray.length; i++) {
                const device = deviceArray[i];
                _self.emit('start:' + device.vendorId + ':' + device.productId, device);
                _self.emit('start:' + device.vendorId, device);
                _self.emit('start', device);
          }
        }
      },
      function onAdded(device) {
        _self.emit('add:' + device.vendorId + ':' + device.productId, device);
        _self.emit('add:' + device.vendorId, device);
        _self.emit('add', device);
      },
      function onRemoved(device) {
        _self.emit('remove:' + device.vendorId + ':' + device.productId, device);
        _self.emit('remove:' + device.vendorId, device);
        _self.emit('remove', device);
      });
  }
  
  /**
   * Win/Mac に対するUSB機器の接続/切断の検出処理を終了する。
   * 
   * @param {function(?Error)} callback
   *    検出処理の終了が完了した際に呼び出されるcallback
   */
  stop(callback) {
    log_debug('UsbDetector#stop()');

    if (callback !== null && typeof callback !== 'function') {
      const error = new TypeError('[ERROR] callback !== function [' + typeof callback + ']');
      log_error(error);
      throw error;
    }
    
    const _self = this;
    detector.stop(
      function onStopped(error) {
        if (callback) {
          if (error) {
            log_error(error);
            callback(error);
          } else {
            callback(null);
          }
        }
        _self.emit('stop');
      }
    );
  }
  
  /**
   * 現在、Win/Mac に接続されているUSB機器を検索する。
   * 
   * @param {number} vid  検索対象のUSB機器のVID (optional)
   * @param {number} pid  検索対象のUSB機器のPID (optional)
   * @param {function(?Error, Array.<object>)} callback 検索が完了したた際に呼び出されるcallback
   */
  find(vid, pid, callback) {
    log_debug('UsbDetector#find()');
    const args = this.checkArguments_(vid, pid, callback);
    detector.find(args.vid, args.pid, args.callback);
  }

  /**
   * 現在、Win/Mac に接続されているUSB機器を数える。
   * 
   * @param {number} vid  検索対象のUSB機器のVID (optional)
   * @param {number} pid  検索対象のUSB機器のPID (optional)
   * @param {function(?Error, Array.<object>)} callback 検索が完了したた際に呼び出されるcallback
   */
  count(vid, pid, callback) {
    log_debug('UsbDetector#count()');
    const args = this.checkArguments_(vid, pid, callback);
    detector.find(args.vid, args.pid, function onFound(error, deviceArray) {
      if (error) {
        log_error(error);
        args.callback(error);
        return;
      }
      if (!Array.isArray(deviceArray)) {
        const error = new TypeError('[ERROR] devices is not array. [' + devices + ']');
        log_error(error);
        args.callback(error);
        return;
      }
      args.callback(null, deviceArray.length);
    });
  }
}

module.exports = UsbDetector;




