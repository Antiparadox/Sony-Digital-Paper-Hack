/*
	error.js
	
	created:	[2016-05-19 19:35:39+09:00]
	modified:	[2016-11-25 02:41:21+09:00]
	description:
	Error definitions and common functions.
*/


const errorCodeCommon = require('./lib/common');
const errorCodeUserOperation = require('./lib/useroperation');
const errorCodeDatabase = require('./lib/database');
const errorCodeBluetooth = require('./lib/bluetooth');
const errorCodeExternalNetwork = require('./lib/externalnetwork');
const gencode = require('./lib/codegen');

const ERROR_RAW_FORMAT = (!!process.env.MW_ERROR_RAW_FORMAT);
const ERROR_LOGGING = (!!process.env.MW_ERROR_LOGGING);

Object.assign(exports, errorCodeCommon);
Object.assign(exports, errorCodeUserOperation);
Object.assign(exports, errorCodeDatabase);
Object.assign(exports, errorCodeBluetooth);
Object.assign(exports, errorCodeExternalNetwork);


var logger = null;

if ( ERROR_LOGGING ) {
    try {
        const electron = require('electron');
        if ( typeof electron.remote === 'undefined' ) {
            logger = electron.app.logger;
        } else {
            logger = electron.remote.app.logger;
        }
    } catch (e) {
        // nothing.
    }
}

/**
 * @exports mwe
 *
 * @desc Common functions to generate operational errors
 *   <br>
 *   Operational Errorを生成する共通関数群。
 */
const mwe = exports;

const MW_CODE_LIST = Object.keys(mwe).sort();

/**
 * Error object represent operational error in MilkyWay.
 * <br>
 * MilkyWay共通で利用する、オペレーショナルエラーを表す、Errorオブジェクト。
 * 
 * @typedef {Object} MWError
 * @property {string} mwCode An error code defined in this module. The
 *   error receiver may determine whether MEError or the other kind of
 *   Error object by this property.
 *   <br>
 *   このModuleで定義しているエラーコード。
 *   Errorオブジェクトが、MWErrorか別の種類のErrorオブジェクトかは、こ
 *   のPropertyで判断できる。
 *
 * @property {string} mwWebApiMethod A HTTP method string used to call
 *   Web API. 
 *   <br>
 *   Web APIを呼び出すために利用された、HTTPメソッドの文字列。
 *   Errorオブジェクトを判別する際に、このPropertyが存在すればWebAPI起
 *   因のエラーであると判断できる。
 *
 * @property {string} mwWebApiPath A path part of URL to call Web API.
 *   <br>
 *   Web APIを呼び出した際の、URLのPath部分の文字列。
 *   
 * @property {string} mwWebApiResCode A status code of HTTP response.
 *   <br>
 *   HTTP responseの Status Code
 *
 * @property {object} cause A object represents reason why the error
 *   occured, if availabe. When the error is of Web API, the response
 *   body will be set in regular case.
 *   <br>
 *   可能な場合には、このErrorが発行された理由を表すオブジェクトが入っている。
 *   WebAPIに起因したエラーの場合には、通常ResponseのBodyがセットされている。
 *
 * @property {string} mwTargetName A supplemental property that error
 *   handler can define and use.
 *   <br>
 *   エラーハンドル時に補足的に利用できるProperty。エラーに、操作対象
 *   の名前を付けて伝搬させたい場合に利用する。
 *
 * @property {string} mwTargetId A supplemental property that error
 *   handler can define and use.
 *   <br>
 *   エラーハンドル時に補足的に利用できるProperty。エラーに操作対象の
 *   IDを付けて伝搬させたい場合に利用する。
 * 
 */


/**
 * Generates new Error object for operational error.
 * <br>
 * Operational Errorのためのエラーオブジェクトを生成する。
 *
 * @param {ErrorCode} code A code that identifies error cause among
 *   the app. The code must be defined in this module.
 *   <br>
 *   アプリケーション内でエラーを識別するためのエラーコード。エラーコー
 *   ドは、このモジュール内で定義されている必要がある。
 *
 * @param {string} message A human readable text represent error. This
 *   is not intended to be read by the end user but for a developper.
 *   <br>
 *   人が識別できるエラーメッセージ。エンドユーザにこのメッセージを見
 *   せるためのものではなく、開発者のためのもの。
 *
 * @param {Error} [cause] An error object to be wrapped. When an error
 *   need to be translated according to different context for example,
 *   pass original error to here.
 *   <br>
 *   ラップしたいエラーオブジェクト。 コンテキストが変わる場合など、エ
 *   ラーを変換して伝搬させたい場合、元のエラーオブジェクトをここに渡
 *   す。
 *
 * @return {MWError} An error object generated.
 *  <br>
 *  生成されたエラーオブジェクト
 */
mwe.genError = function(code, message, cause) {
  var err = new Error(message);
  err.mwCode = code;
  if ( cause ) {
	err.cause = cause;
  }
  if ( MW_CODE_LIST.indexOf(code) < 0 ) {
    console.error('Wrong error code:', err);
    err = mwe.genError(mwe.E_MW_FATAL_ERROR, 'Unknown error code is set.', err);
  }
  return err;
}

/**
 * Generates new Error object for operational error caused by Web API
 * response.
 * <br>
 * Web APIの戻り値に起因した、Operational Errorのためのエラーオブジェ
 * クトを生成する。
 * 
 *
 * @param {ErrorCode} code A code that identifies error cause among
 *   the app. The code must be defined in this module.
 *   <br>
 *   アプリケーション内でエラーを識別するためのエラーコード。エラーコー
 *   ドは、このモジュール内で定義されている必要がある。
 *
 * @param {string} message A human readable text represent error. This
 *   is not intended to be read by the end user but for a developper.
 *   <br>
 *   人が識別できるエラーメッセージ。エンドユーザにこのメッセージを見
 *   せるためのものではなく、開発者のためのもの。
 *
 * @param {string} method A method used to call web api. (ex: "GET",
 *   "POST" or "PUT", etc...)
 *   <br>
 *   Web API を呼び出すために利用されたMethod(例: "GET", "POST" or
 *   "PUT"等)
 *
 * @param {string} path A path part of web api. (e.g.:
 *   "/api/serial_number")
 *   <br>
 *   Web APIのPath部分(例: "/api/serial_number")
 *
 * @param {string|number} resCode A status code of Web API HTTP response.
 *   <br>
 *   Web APIのHTTP ResponseのStatus Code。
 *
 * @param {Error} [cause] An error object to be wrapped. When an error
 *   need to be translated according to different context for example,
 *   pass original error to here. 
 *   <br>
 *   ラップしたいエラーオブジェクト。 コンテキストが変わる場合など、エ
 *   ラーを変換して伝搬させたい場合、元のエラーオブジェクトをここに渡
 *   す。
 *
 * @return {MWError} An error object represents error caused by Web
 *   API. Error handler assumed to know this error is for Web API by
 *   mwWebApiMethod property.
 *   <br>
 *   WebAPI起因で起きたエラーを表すError Objectを返す。エラーハンドラ
 *   側は、mwWebApiMethod property からWebAPIのErrorオブジェクトか判断
 *   することを想定している。
 */
mwe.genWebApiError = function(code, message, method, path, resCode, cause) {
  var err = new Error(message);
  err.mwCode = code;
  err.mwWebApiMethod = method;
  err.mwWebApiPath = path;
  err.mwWebApiResCode = resCode;
  if ( cause ) {
	err.cause = cause;
  }
  if ( MW_CODE_LIST.indexOf(err.mwCode) < 0 ) {
    console.error('Wrong error code: ', err);
    err = mwe.genError(mwe.E_MW_FATAL_ERROR, 'Unknown error code is set.', err);
  } else {
    if ( typeof err.mwWebApiMethod !== 'string' ) {
      console.error('Wrong web api method: ', err.mwWebApiMethod, err);
    }
    if ( typeof err.mwWebApiPath !== 'string' ) {
      console.error('Wrong web api path: ', err.mwWebApiPath, err);
    }
    if ( typeof err.mwWebApiResCode === 'undefined' ) {
      console.error('Wrong web api response code: ', err.mwWebApiResCode, err);
    }
  }
  
  return err;
}

/**
 * Generate error code string to show in dialog message.
 * <br>
 * ダイアログで表示するためのエラーコード文字列を生成する。
 * 
 * @note エラーメッセージは、このメソッドではケアしない。UIでは、Error
 *   オブジェクトのmwCodeを参照して、表示するメッセージを判断すること
 *   を想定している。
 *
 * @param {Error} err
 *
 * @return {string} A strint to be shown as error code. エラーコードと
 *   して表示するべき文字列。
 */
mwe.genUserErrorCode = function(err) {
  console.log('ErrorGenerating');
  // [2016-07-07 17:11:00+09:00] kan.k: [TODO] Tentative
  if ( typeof err.mwCode === 'undefined' ) {
    console.error('Unknown error: ', err);
    err = mwe.genError(mwe.E_MW_FATAL_ERROR, 'Unknown error', err);
  }

  var mwCodeIndex = MW_CODE_LIST.indexOf(err.mwCode) + 1;
  if ( mwCodeIndex < 0 ) {
    console.error('Wrong error code: ', err);
    err = mwe.genError(mwe.E_MW_FATAL_ERROR, 'Unknown error code is set.', err);
  }

  var mwWebApiMethodCode = '0';

  if ( typeof err.mwWebApiMethod !== 'undefined' ) {
    mwWebApiMethodCode = gencode.genWebApiMethodCode(err.mwWebApiMethod, 1);
  }

  var mwWebApiPathCode = '00';
  
  if ( typeof err.mwWebApiPath !== 'undefined' ) {
    var mwWebApiPathCode = gencode.genWebApiPathCode(err.mwWebApiPath, 2);
  }

  var mwWebApiResCode = '00000';

  if ( typeof err.mwWebApiResCode !== 'undefined' ) {
    mwWebApiResCode = gencode.genWebApiResCode(err, 5);
  }

  var displayErrorCode =
      gencode.genPartCode(mwCodeIndex, 2) +
      mwWebApiMethodCode +
      mwWebApiPathCode +
      mwWebApiResCode;
  
  displayErrorCode =
    displayErrorCode.slice(0,2) + '-' +
    displayErrorCode.slice(2,6) + '-' +
    displayErrorCode.slice(6);

  if ( ERROR_RAW_FORMAT ) {
    var rawFormatMessage = '';
    try {
      rawFormatMessage = JSON.stringify(err, null, '  ');
    } catch (e) {
      rawFormatMessage = ('{ code: ' + err.mwCode + ', message: ' + err.message +
			  ', method: ' + err.mwWebApiMethod + ', path: ' + err.mwWebApiPath +
			  ', resCode: ' + err.mwWebApiResCode + '}');
    }
    displayErrorCode += ' : \n' + rawFormatMessage;
  }
  
  if ( logger ) {
    try {
      logger.log('warn', 'Error: ' + JSON.stringify(err) + ', Stack: ' + err.stack);
    } catch (e) {
      // nothing.
    }
  }

  return displayErrorCode;
}

mwe.genUserErrorCodeHelp = function() {
  return gencode.genUserErrorCodeHelp(MW_CODE_LIST);
}

/*
  DPMW.Model.BackboneSync.errorEmulate(408, { error_code: "40800"})
*/

