/*
	gencode.js
	
	created:	[2016-10-28 10:15:50+09:00]
	modified:	[2016-10-28 10:15:50+09:00]
	description:
	Generating error code
	
*/

const codeparams = require('./codeparams');

const gencode = exports;

const CODEPADDING = '000000000' // '0' * 9

/**
 * Max len is 10.
 * @private
 */
gencode.genPartCode = function(num, len) {
    var numStr = num.toString(16);
    return (CODEPADDING + num.toString(16)).slice(-len).toUpperCase();
}

gencode.genWebApiMethodCode = function(webApiMethod, len) {
  var mwWebApiMethodIndex = 0;
  if ( typeof webApiMethod !== 'undefined' ) {
    mwWebApiMethodIndex = codeparams.MW_WEB_API_METHOD_LIST.indexOf(webApiMethod) + 1;
    if ( mwWebApiMethodIndex < 0 ) {
      console.error('Wrong error web api method: ', err);
      // err = mwe.genError(mwe.E_MW_FATAL_ERROR, 'Unknown error web api method is set.', err);
      mwWebApiMethodIndex = 0xFFFF;
    }
  }
  return gencode.genPartCode(mwWebApiMethodIndex, len);
}

gencode.genWebApiPathCode = function(webApiPath, len) {
  webApiPath = compactWebApiPath(webApiPath);

  var mwWebApiPathIndex = codeparams.MW_WEB_API_PATH_LIST.indexOf(webApiPath);
  if ( mwWebApiPathIndex < 0 ) {
    console.error('Web API path is not known: ', webApiPath);
    return 'FFFF'.slice(0, len);
    // return "'" + webApiPath + "'";
  }

  return gencode.genPartCode(mwWebApiPathIndex, len);

  // exclude ids
  // return "001";
  // return webApiPath;
}

gencode.genWebApiResCode = function(err, len) {
  var mwWebApiResCodeIndex = 0;
  if ( typeof err.mwWebApiResCode !== 'undefined' ) {
    if ( typeof err.cause !== 'undefined' && typeof err.cause.error_code !== 'undefined' ) {
      mwWebApiResCodeIndex = parseInt(err.cause.error_code);
      if ( isNaN(mwWebApiResCodeIndex) ) {
        // broken res code, then use status code.
        mwWebApiResCodeIndex = 0;
      }
    }
    if ( mwWebApiResCodeIndex === 0 ) {
      if ( typeof err.mwWebApiResCode === 'number' ) {
        mwWebApiResCodeIndex = err.mwWebApiResCode;
      } else if ( typeof err.mwWebApiResCode === 'string' ) {
        mwWebApiResCodeIndex = parseInt(err.mwWebApiResCode);
        if ( isNaN(mwWebApiResCodeIndex) ) {
          console.error('Wrong error web api res code: ', err);
          // err = mwe.genError(mwe.E_MW_FATAL_ERROR, 'Unknown error web api res code is set.', err);
          mwWebApiResCodeIndex = 0xFFFFF;
        }
      } else {
        mwWebApiResCodeIndex = 0xFFFFF;
      }
    }
  }
  return gencode.genPartCode(mwWebApiResCodeIndex, len);
}

const WEB_API_PATH_PARAM_COUNT_MAP = {
    'documents': 1,
    'folders' : 1,
    'note_templates' : 1,
    'configs/wifi_accesspoints' : 2,
    'nonce': 1,
    'extensions/status': 1,
    'extensions/configs': 1,
    'entry': 1
}

function compactWebApiPath(webApiPath) {
  for ( var pathPart in WEB_API_PATH_PARAM_COUNT_MAP ) {
    var paramCount = WEB_API_PATH_PARAM_COUNT_MAP[pathPart];
    var pathPartIndex = webApiPath.indexOf('/' + pathPart + '/');
    if ( pathPartIndex < 0 ) {
      continue;
    }
    var pathParamStartIndex = pathPartIndex + pathPart.length + 2;
    for ( var i = 0; i < paramCount; i++ ) {
      var pathParamEndIndex = webApiPath.indexOf('/', pathParamStartIndex);
      // 2017/04/14 hiro-anzy 
      // pathParamStartIndex 以降に '/' が存在しない場合 pathParamEndIndex は -1 になるが
      // そのまま処理しているため、/xxxx/id の場合 /xxxx/{}x と最後に不必要な文字が挿入されてしまう
      // 問題の修正
      if (-1 === pathParamEndIndex) {
        webApiPath = webApiPath.slice(0, pathParamStartIndex) + '{}';
      } else {
        webApiPath = webApiPath.slice(0, pathParamStartIndex) + '{}' + webApiPath.slice(pathParamEndIndex);
      }
      // hiro-anzy
      pathParamStartIndex += 3;
    }
  }

  var excIndex = webApiPath.indexOf('?');
  if ( excIndex >= 0 ) {
    webApiPath = webApiPath.slice(0, excIndex);
  }
  return webApiPath;
}

gencode.genUserErrorCodeHelp = function(codelist) {
  var message =
      'MWErrorCode 2 hex digit: \n----------------------------------------\n\n' +
      getCodeIndexHelp(codelist, 2, 1) + '\n\n' +
      'WebAPI method 1 hex digit: \n----------------------------------------\n\n' +
      getCodeIndexHelp(codeparams.MW_WEB_API_METHOD_LIST, 1, 1) + '\n\n' +
      'WebAPI path 2 hex digit: \n--------------------\n\n' +
      getCodeIndexHelp(codeparams.MW_WEB_API_PATH_LIST, 2, 0) + '\n\n' +
      'WebAPI response error code 5 hex digit: \n--------------------\n\n' +
      " * When response body has { error_code: '{}' } in json, return it's number.\n" +
      " * Otherwise, return HTTP response code,(e.g. 404, 400) in hex.\n";
  return message;
}

function getCodeIndexHelp(codelist, codelength, codebase) {
  var message = '';
  for ( var i = 0; i < codelist.length; i++ ) {
    message += ' * ' + gencode.genPartCode(i + codebase, codelength) + ' : ' + codelist[i] + '\n';
  }
  return message;
}
