/*
    authctrl.js
    
    created:    [2016-04-25 12:06:02+09:00]
    modified:   [2016-06-21 21:40:51+09:00]
    description:
    Auth Ctrl Entry Point
    
*/

'use strict';

const store = require('reg-store-mw');
const authadpt = require('auth-adpt-mw');
const mwe = require('mw-error');
const btoa = require('btoa');

const WEBAPI_AUTH_NONCE = '/auth/nonce/';
const WEBAPI_AUTH = '/auth';
const METHOD_GET = 'GET';
const METHOD_PUT = 'PUT';

// [2016-06-01 14:07:43+09:00] kan.k: 極力このモジュールは、mainで動作
// させたい、

/**
 * @exports mw-auth-ctrl
 */
const authctrl = exports;

/**
 * Generate HTTP request information to prepare authentication.
 * 
 * @param {string} baseUrl A base part of URL to call Web API.
 *   A properties for HTTP request is made based on this URL.
 *   <br>
 *   Web APIを呼び出すための、ベースURL。HTTPリクエストのための、プロ
 *   パティはこのURLを元に作成される。
 *
 * @param {function(?Error, ?{method: string, url: string})} callback
 *   The function to receive result information for HTTP request.
 *   When failed to generate, an Error object will be returned as
 *   first argument. When succeed to generate, first argument will be
 *   `null` and information to call Web API will be passed to second
 *   argument as object. The second object will have `method` that
 *   indicates HTTP method ('PUT', 'POST', 'GET', etc...) and `url` to
 *   be called. The error code of Error object can be:
 *   - E_MW_STORE_SET_DEVICE_ID_FAILED
 *   - E_MW_STORE_GET_DEVICE_ID_FAILED
 *   <br>
 *   認証開始のためのHTTPリクエストの情報を受け取るためのコールバック
 *   関数。情報の生成に失敗した場合には、第一引数にErrorオブジェクトが
 *   返る。成功した場合には第一引数は、`null`で、情報が第二引数に返る。
 *   情報のオブジェクトが持つプロパティは、HTTPメソッド('PUT', 'POST',
 *   'GET', etc...)  を持つ`method`、実際にWebAPIを呼び出すためのURLを
 *   保持する`url`がある。エラーのエラーコードは次のものを返す場合があ
 *   る:
 *   - E_MW_STORE_SET_DEVICE_ID_FAILED
 *   - E_MW_STORE_GET_DEVICE_ID_FAILED
 */
authctrl.genAuthPrepare = function(baseUrl, callback) {
  if ( typeof baseUrl !== 'string' ) {
    throw new TypeError('baseUrl must be a string');
    return;
  }
  
  store.getClientDeviceId(function(err, deviceId) {
    if ( err ) {
      callback(err);
      return;
    }
    if ( typeof deviceId !== 'string' ) {
      // [2016-05-31 23:16:39+09:00] kan.k: [TODO] To consider
      callback(new TypeError('device is is not string'));
      return;
    }

    var req = { method: METHOD_GET,
                url: baseUrl + WEBAPI_AUTH_NONCE + deviceId };
    callback(null, req);
  });
  return;
};

/**
 * Generate HTTP request information to run authentication.
 *
 * @param {string} baseUrl A base part of URL to call Web API for
 *   authentication.
 *   <br>
 *   認証のWebAPIを呼び出すための、ベースURL。
 *
 * @param {number} lastStatus A status number of last Web API call.
 *   <br>
 *   直前のWebAPIのstatus code.
 *
 * @param {object|null} lastResponse A body object that received as a
 *   result of a first Web API call.
 *   <br>
 *   最初のWeb API呼び出しの結果のBodyのオブジェクト
 *
 * @param {function(?Error, {method: string, url: string, body:
 *   string})} callback The function to receive result information for
 *   HTTP request.  When failed to generate, an Error object will be
 *   returned as first argument. When succeed to generate, first
 *   argument will be `null` and information to call Web API will be
 *   passed to second argument as object. The second object will have
 *   `method` that indicates HTTP method ('PUT', 'POST', 'GET',
 *   etc...), `url` to be called and `body` to be sent with HTTP
 *   request. The error code of Error object can be:
 *   - E_MW_AUTH_FAILED
 *   - E_STORE_SET_DEVICE_ID_FAILED
 *   - E_STORE_GET_DEVICE_ID_FAILED
 *   - E_STORE_GET_PRIVKEY_FAILED
 *   <br>
 *   認証開始のためのHTTPリクエストの情報を受け取るためのコールバック
 *   関数。情報の生成に失敗した場合には、第一引数にErrorオブジェクトが
 *   返る。成功した場合には第一引数は、`null`で、情報が第二引数に返る。
 *   情報のオブジェクトが持つプロパティは、HTTPメソッド('PUT', 'POST',
 *   'GET', etc...)  を持つ`method`、実際にWebAPIを呼び出すためのURLを
 *   保持する`url`、HTTPリクエストとともに送信するための`body`がある。
 *   - E_MW_AUTH_FAILED
 *   - E_STORE_SET_DEVICE_ID_FAILED
 *   - E_STORE_GET_DEVICE_ID_FAILED
 *   - E_STORE_GET_PRIVKEY_FAILED
 */
authctrl.genAuth = function(baseUrl, lastStatus, lastResponse, callback) {
  if ( typeof baseUrl !== 'string' ) {
    throw new TypeError('baseUrl must be a string');
    return;
  }
  if ( typeof lastStatus !== 'number' ) {
    throw new TypeError('lastStatus must be a number');
    return;
  }
  if ( typeof lastResponse !== 'object' ) {
    throw new TypeError('lastResponse must be a object');
    return;
  }
  if ( typeof callback !== 'function' ) {
    throw new TypeError('callback must be a function');
    return;
  }

  if ( lastStatus !== 200 ) {
    // callback(mwe.genError(mwe.E_MW_AUTH_FAILED, 'Response code was wrong'));
    callback(mwe.genWebApiError(mwe.E_MW_AUTH_FAILED, 'Response code was wrong',
                                METHOD_GET, WEBAPI_AUTH_NONCE, lastStatus));
    return;
  }

  // [2016-05-31 16:34:00+09:00] kan.k: [TODO] Error handling.
  store.getClientDeviceId(function(err, deviceId) {
    if ( err ) {
      callback(err);
      return;
    }
    
    if ( typeof deviceId !== 'string' ) {
      // [2016-05-31 23:17:18+09:00] kan.k: [TODO] to consider
      callback(new TypeError('device is is not string'));
      return;
    }
    
    var res = lastResponse;
    const nonce = res.nonce;

    store.getClientPrivateKey(function(err, data) {
      if ( err ) {
        console.error(err);
        callback(err);
        return;
      }

      var nonceSigned = authadpt.signNonce(nonce, data);

      if ( typeof nonceSigned !== 'string' ) {
        callback(mwe.genError(mwe.E_MW_AUTH_FAILED, 'Failed to sign nonce.'));
        return;
      }
      
      var authInfo = {
        "client_id" : deviceId,
        "nonce_signed" : btoa(nonceSigned)
      };

      // console.log('attempt to put /auth');
      // console.log(JSON.stringify(authInfo, null, "  "));

      var body = JSON.stringify(authInfo);

      var req = { method: METHOD_PUT,
                  url: baseUrl + WEBAPI_AUTH,
                  body: authInfo };

      callback(null, req);
      return;
    });
  });
}

/**
 * Interpret last HTTP response of authentication.
 * <br>
 * 最後の認証のHTTP responseを解釈する。
 *
 * @param {string} baseUrl A base part of URL to call Web API for
 *   authentication.
 *   <br>
 *   認証のWebAPIを呼び出すための、ベースURL。
 *
 * @param {number} lastStatus A status number of last Web API call.
 *   <br>
 *   直前のWebAPIのstatus code.
 *
 * @param {object|null} lastResponse A body object that received as a
 *   result of a first Web API call.
 *   <br>
 *   最初のWeb API呼び出しの結果のBodyのオブジェクト
 *
 * @param {function(?Error)} callback The function to receive result
 *   of authentication. When failed to authenticate, an Error object
 *   will be returned with known reason as first argument.
 *   The error code of Error can be:
 *   - E_MW_AUTH_FAILED
 *   <br>
 *   認証結果を取得するためのコールバック関数。認証に失敗した場合には、
 *   モジュールで知りうる理由を設定したErrorオブジェクトが、第一引数に
 *   わたる。
 */
authctrl.handleAuthRes = function(baseUrl, lastStatus, lastResponse, callback) {
  if ( typeof baseUrl !== 'string' ) {
    throw new TypeError('baseUrl must be a string');
    return;
  }
  if ( typeof lastStatus !== 'number' ) {
    throw new TypeError('lastStatus must be a number');
    return;
  }
  if ( typeof lastResponse !== 'object' ) {
    throw new TypeError('lastResponse must be a string');
    return;
  }
  if ( typeof callback !== 'function' ) {
    throw new TypeError('callback must be a function');
    return;
  }

  if ( lastStatus !== 204 ) {
    // callback(mwe.genError(mwe.E_MW_AUTH_FAILED, 'Response code was wrong'));
    callback(mwe.genWebApiError(mwe.E_MW_AUTH_FAILED, 'Response code was wrong',
                                METHOD_PUT, WEBAPI_AUTH, lastStatus));
    return;
  }
  // [2016-05-31 16:34:36+09:00] kan.k: [TODO] Error handling

  callback(null);
}

