//
//  CmApiWrap.cpp
//
//  Copyright 2016 Sony Corporation
//

#include "CmApiWrap.h"
#include "WinErrorCode.h"
#include "macro.h"
#include "../Log.h"
#include <tchar.h>


std::string CmApiWrap::GetDevNodeDriverName(
	/*[in]*/ const DEVINST ulDevInst,
	/*[out]*/ tstring& rsDriverName
	)
{
	std::string errMsg;
	try
	{
		ULONG ulDataType = 0;
		ULONG ulDataSize = 0;
		AutoBinaryPtr spData;
		errMsg = CmApiWrap::GetDevNodeRegistryProperty(ulDevInst, CM_DRP_DRIVER, ulDataType, ulDataSize, spData);
		if (!errMsg.empty()) {
			LOG_ERROR(_T("CmApiWrap::GetDevNodeRegistryProperty( CM_DRP_DRIVER ) failed. [%S]"), errMsg.c_str());
			throw CR_FAILURE;
		}

		rsDriverName.assign((LPCTSTR)spData.m_pData, ulDataSize / sizeof(TCHAR));
	}
	catch (...) {
		if (errMsg.empty()) {
			errMsg = WinErrorCode::GetLastError();
			LOG_ERROR(_T("Unknown error occurred. [%S]"), errMsg.c_str());
		}
	}
	return errMsg;
}


std::string CmApiWrap::GetDevNodeDeviceDesc(
	/*[in]*/ const DEVINST ulDevInst,
	/*[out]*/ tstring& rsDeviceDesc
	)
{
	std::string errMsg;
	try
	{
		ULONG ulDataType = 0;
		ULONG ulDataSize = 0;
		AutoBinaryPtr spData;
		errMsg = CmApiWrap::GetDevNodeRegistryProperty(ulDevInst, CM_DRP_DEVICEDESC, ulDataType, ulDataSize, spData);
		if (!errMsg.empty()) {
			LOG_ERROR(_T("CmApiWrap::GetDevNodeRegistryProperty( CM_DRP_DEVICEDESC ) failed. [%S]"), errMsg.c_str());
			throw CR_FAILURE;
		}
		rsDeviceDesc.assign((LPCTSTR)spData.m_pData, ulDataSize / sizeof(TCHAR));
	}
	catch (...) {
		if (errMsg.empty()) {
			errMsg = WinErrorCode::GetLastError();
			LOG_ERROR(_T("Unknown error occurred. [%S]"), errMsg.c_str());
		}
	}
	return errMsg;
}


std::string CmApiWrap::GetDevNodeRegistryProperty(
	/*[in]*/ const DEVINST ulDevInst,
	/*[in]*/ const ULONG ulPropertyId,
	/*[out]*/ ULONG& rulRegType,
	/*[out]*/ ULONG& rulDataSize,
	/*[out]*/ AutoBinaryPtr& rspData
	)
{
	std::string errMsg;
	try
	{
		CONFIGRET cResult = CR_SUCCESS;

		ULONG ulDataSize = 0;
		cResult = ::CM_Get_DevNode_Registry_Property(ulDevInst, ulPropertyId, NULL, NULL, &ulDataSize, 0);
		if (cResult != CR_SUCCESS && cResult != CR_BUFFER_SMALL) {
			errMsg = WinErrorCode::ToWinErrStr(cResult);
			LOG_DEBUG(_T("::CM_Get_DevNode_Registry_Property( 0x%08X ) failed. [%S]"), ulPropertyId, errMsg.c_str());
			throw cResult;
		}
		if (ulDataSize == 0) {
			cResult = CR_FAILURE;
			errMsg = WinErrorCode::ToWinErrStr(cResult);
			LOG_DEBUG(_T("::CM_Get_DevNode_Registry_Property( 0x%08X ) failed. [%S]"), ulPropertyId, errMsg.c_str());
			throw cResult;
		}

		AutoBinaryPtr spData;
		bool br = spData.AllocateBytes(ulDataSize);
		if (!br || !spData) {
			cResult = CR_OUT_OF_MEMORY;
			errMsg = WinErrorCode::ToWinErrStr(cResult);
			LOG_ERROR(_T("AutoBinaryPtr::AllocateBytes( %u ) failed."), ulDataSize, errMsg.c_str());
			throw cResult;
		}
		::memset(spData.m_pData, 0, ulDataSize);

		ULONG ulDataType = 0;
		cResult = ::CM_Get_DevNode_Registry_Property(ulDevInst, ulPropertyId, &ulDataType, spData, &ulDataSize, 0);
		if (cResult != CR_SUCCESS) {
			errMsg = WinErrorCode::ToWinErrStr(cResult);
			LOG_ERROR(_T("::CM_Get_DevNode_Registry_Property( 0x%08X ) failed. [%S]"), ulPropertyId, errMsg.c_str());
			throw cResult;
		}

		rulRegType = ulDataType;
		rulDataSize = ulDataSize;
		rspData = spData;
	}
	catch (...) {
		if (errMsg.empty()) {
			errMsg = WinErrorCode::GetLastError();
			LOG_ERROR(_T("Unknown error occurred. [%S]"), errMsg.c_str());
		}
	}
	return errMsg;
}


std::string CmApiWrap::GetDeviceId(
	/*[in]*/ const DEVINST ulDevInst,
	/*[out]*/ tstring& rsDeviceId
	)
{
	std::string errMsg;
	try
	{
		CONFIGRET cResult = CR_SUCCESS;

		ULONG ulStrLength = 0;
		cResult = ::CM_Get_Device_ID_Size(&ulStrLength, ulDevInst, 0);
		if (cResult != CR_SUCCESS) {
			errMsg = WinErrorCode::ToWinErrStr(cResult);
			LOG_ERROR(_T("::CM_Get_Device_ID_Size() failed. [%S]"), errMsg.c_str());
			throw cResult;
		}

		AutoBinaryPtr spDeviceId;
		const ULONG ulDeviceIdSize = sizeof(TCHAR) * (ulStrLength + 1);
		bool br = spDeviceId.AllocateBytes(ulDeviceIdSize);
		if (!br || !spDeviceId) {
			cResult = CR_OUT_OF_MEMORY;
			errMsg = WinErrorCode::ToWinErrStr(cResult);
			LOG_ERROR(_T("AutoBinaryPtr::AllocateBytes( %u ) failed."), ulDeviceIdSize, errMsg.c_str());
			throw cResult;
		}
		::memset(spDeviceId.m_pData, 0, ulDeviceIdSize);

		cResult = ::CM_Get_Device_ID(ulDevInst, (TCHAR*)spDeviceId.m_pData, ulStrLength, 0);
		if (cResult != CR_SUCCESS) {
			errMsg = WinErrorCode::ToWinErrStr(cResult);
			LOG_ERROR(_T("::CM_Get_Device_ID() failed. [%S]"), errMsg.c_str());
			throw cResult;
		}

		rsDeviceId.assign((LPCTSTR)spDeviceId.m_pData);
	}
	catch (...) {
		if (errMsg.empty()) {
			errMsg = WinErrorCode::GetLastError();
			LOG_ERROR(_T("Unknown error occurred. [%S]"), errMsg.c_str());
		}
	}
	return errMsg;
}


std::string CmApiWrap::GetDeviceDescByDriverKeyName(
	/*[in]*/ const tstring& rsDriverKeyName,
	/*[out]*/ tstring& rsDeviceDesc
	)
{
	std::string errMsg;

	try
	{
		CONFIGRET cResult = CR_SUCCESS;
		DEVINST ulDevInst = 0;

		// ÉãÅ[ÉgÇÃ"DevNode"ÇéÊìæÇ∑ÇÈ
		DEVINST ulRootDevInst = 0;
		cResult = ::CM_Locate_DevNode(&ulRootDevInst, NULL, CM_LOCATE_DEVNODE_NORMAL);
		if (cResult != CR_SUCCESS) {
			errMsg = WinErrorCode::ToWinErrStr(cResult);
			LOG_ERROR(_T("::CM_Locate_DevNode(CM_LOCATE_DEVNODE_NORMAL) failed. [%S]"), errMsg.c_str());
			throw cResult;
		}
		ulDevInst = ulRootDevInst;

		// ê[Ç≥óDêÊíTçıÇ≈"DriverKeyName"Ç™ìØÇ∂"DevNode"ÇíTÇ∑
		while (true)
		{
			tstring sDriverKeyName;
			errMsg = CmApiWrap::GetDevNodeDriverName(ulDevInst, sDriverKeyName);
			if (!errMsg.empty() || ::_tcsicmp(rsDriverKeyName.c_str(), sDriverKeyName.c_str()) != 0)
			{
				// éqÇÃ"DevNode"ÇéÊìæÇ∑ÇÈ
				DEVINST ulDevInstChild = 0;
				cResult = ::CM_Get_Child(&ulDevInstChild, ulDevInst, 0);
				if (cResult == CR_SUCCESS)
				{
					ulDevInst = ulDevInstChild;
					continue;
				}

				// éqÇ™Ç¢Ç»Ç¢èÍçá
				while (true)
				{
					// åZíÌÇÃ"DevNode"ÇéÊìæÇ∑ÇÈ
					DEVINST ulDevInstSibling = 0;
					cResult = ::CM_Get_Sibling(&ulDevInstSibling, ulDevInst, 0);
					if (cResult == CR_SUCCESS)
					{
						ulDevInst = ulDevInstSibling;
						break;
					}

					// êeÇÃ"DevNode"ÇéÊìæÇ∑ÇÈ
					DEVINST ulDevInstParent = 0;
					cResult = ::CM_Get_Parent(&ulDevInstParent, ulDevInst, 0);
					if (cResult == CR_SUCCESS)
					{
						ulDevInst = ulDevInstParent;
					}
					else
					{
						errMsg = WinErrorCode::ToWinErrStr(cResult);
						LOG_ERROR(_T("The DevNode(DriverKeyName:%s) couldn't be found. [%S]"), rsDriverKeyName.c_str(), errMsg.c_str());
						throw cResult;
					}
				}
				continue;
			}

			// "DriverKeyName"Ç™ìØÇ∂"DevNode"Ç™å©Ç¬Ç©Ç¡ÇΩèÍçá
			errMsg = CmApiWrap::GetDevNodeDeviceDesc(ulDevInst, rsDeviceDesc);
			if (!errMsg.empty()) {
				errMsg = WinErrorCode::ToWinErrStr(cResult);
				LOG_ERROR(_T("CmApiWrap::GetDevNodeDeviceDesc() failed. [%S]"), errMsg.c_str());
				throw cResult;
			}
			break;
		}
	}
	catch (...) {
		if (errMsg.empty()) {
			errMsg = WinErrorCode::GetLastError();
			LOG_ERROR(_T("Unknown error occurred. [%S]"), errMsg.c_str());
		}
	}
	return errMsg;
}
