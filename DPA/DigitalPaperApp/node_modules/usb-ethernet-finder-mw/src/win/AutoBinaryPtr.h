//
//  AutoBinaryPtr.h
//
//  Copyright 2016 Sony Corporation
//

#pragma once

typedef unsigned char byte;

class AutoBinaryPtr
{
public:
	byte* m_pData;

public:
	AutoBinaryPtr() throw() :
		m_pData(nullptr)
	{
	}

	AutoBinaryPtr(AutoBinaryPtr& p) throw()
	{
		m_pData = p.Detach();  // Transfer ownership
	}
	explicit AutoBinaryPtr(byte* pData) throw() :
		m_pData(pData)
	{
	}

	~AutoBinaryPtr() throw()
	{
		Free();
	}

	AutoBinaryPtr& operator=(AutoBinaryPtr& p) throw()
	{
		if (m_pData != p.m_pData){
			Attach(p.Detach());  // Transfer ownership
		}
		return *this;
	}

	operator byte*() const throw()
	{
		return m_pData;
	}

	byte* operator->() const throw()
	{
		return m_pData;
	}

	byte** operator&() throw()
	{
		return &m_pData;
	}

	// Allocate a buffer with the given number of bytes
	bool AllocateBytes(size_t nBytes) throw()
	{
		m_pData = new byte[nBytes];
		if (m_pData == nullptr) {
			return false;
		}
		return true;
	}

	// Attach to an existing pointer (takes ownership)
	void Attach(byte* pData) throw()
	{
		if (m_pData) {
			delete[] m_pData;
		}
		m_pData = pData;
	}

	// Detach the pointer (releases ownership)
	byte* Detach() throw()
	{
		byte* pTemp = m_pData;
		m_pData = nullptr;
		return pTemp;
	}

	// Free the memory pointed to, and set the pointer to NULL
	void Free() throw()
	{
		delete[] m_pData;
		m_pData = nullptr;
	}
};