/**
 * Macに接続されているUSB(Ethernet)機器を検索するクラス。
 * 
 * 現在、MacにUSB(Ethernet)として接続されたUSB機器を検索し、
 * 検出されたNetwork Interfaceの情報を返却する。
 */

'use strict';

const log_error = require('debug')('usb-ethernet-finder-mw:mac-usb-ethernet-finder:error');
const log_debug = require('debug')('usb-ethernet-finder-mw:mac-usb-ethernet-finder:debug');

const finder = require('../build/Release/usb_ethernet_finder');
const os = require('os');


class UsbEthernetFinder {

  /**
   * 現在、Mac に接続されているUSB(Ethernet)機器を検索する。
   * 
   * @param {number} vid
   *    検索対象のUSB機器のVID
   * @param {number} pid
   *    検索対象のUSB機器のPID
   * @param {function(?Error, Array.<Object>)} callback
   *    検索結果を通知するcallback
   */
  static find(vid, pid, callback) {
    log_debug('UsbEthernetFinder#find()');

    // 引数の型チェック
    if (!Number.isInteger(vid)) {
      const error = new TypeError('[ERROR] vid is not integer. [' + vid + ']');
      log_error(error);
      throw error;
    }

    if (!Number.isInteger(pid)) {
      const error = new TypeError('[ERROR] pid is not integer. [' + pid + ']');
      log_error(error);
      throw error;
    }

    if (typeof callback !== 'function') {
      const error = new TypeError('[ERROR] callback !== function [' + typeof callback + ']');
      log_error(error);
      throw error;
    }

    // 指定されたVID,PIDに対するUSB(Ethernet)の一覧を取得する
    finder.find(vid, pid, function onFind(error, usbArray) {
      if (error) {
        log_error(error);
        callback(error);
        return;
      }

      if (!Array.isArray(usbArray)) {
        const error = new TypeError('[ERROR] usbArray is not Array : ' + usbArray);
        log_error(error);
        callback(error);
        return;
      }

      // "Network Interface"の一覧を取得する
      const networkInterfaceList = os.networkInterfaces();

      // USB(Ethernet) の BSD 名から"Network Interface"を探す
      let usbEthernetArray = [];
      for (let i = 0; i < usbArray.length; i++) {
        const usb = usbArray[i];
        if (!usb) {
          log_error(new Error('[ERROR] usb is invalid : ' + usb));
          continue;
        }

        if (!usb.bsdName) {
          log_error(new Error('[ERROR] usb.bsdName is empty : ' + usb.bsdName));
          continue;
        }

        const ipInfoArray = networkInterfaceList[usb.bsdName];
        if (!ipInfoArray) {
          log_error(new Error('[ERROR] network interface is not found : ' + usb.bsdName));
          continue;
        }

        const usbEthernet = {
          deviceId: usb.deviceId,
          vendorId: usb.vendorId,
          productId: usb.productId,
          vendorName: usb.vendorName,
          deviceName: usb.deviceName,
          serialNumber: usb.serialNumber,
          adapterName: usb.bsdName,
          ipInfoArray: ipInfoArray,
        };
        usbEthernetArray.push(usbEthernet);
      }

      callback(null, usbEthernetArray);
    });
  }
}

module.exports = UsbEthernetFinder;

