/**
 * Windowsに接続されているUSB(Ethernet)機器を検索するクラス。
 * 
 * 現在、WindowsにUSB(Ethernet)として接続されたUSB機器を検索し、検出された"Network Adapter"の情報を返却する。
 */

'use strict';

const log_error = require('debug')('usb-ethernet-finder-mw:win-usb-network-adapter-finder:error');
const log_debug = require('debug')('usb-ethernet-finder-mw:win-usb-network-adapter-finder:debug');

const Wmi = require('node-wmi');
const PnpIdHelper = require('./win-pnpid-helper');


class UsbNetworkAdapterFinder {

  /**
   * 現在、WindowsにUSB接続されている"Network Adapter"の一覧を取得する。
   * 
   * @private
   * @param {number} vid  検索対象のUSB機器のVID
   * @param {number} pid  検索対象のUSB機器のPID
   * @param {function(error:Error,usbNaIdArray:Array.<object>)} callback
   *    - USB(Network Adapter ID)の列挙結果通知用のcallback
   */
  static findNetworkAdapter_(vid, pid, callback) {
    
    if (typeof callback !== 'function') {
      const err = new Error('[ERROR] callback !== function [' + typeof callback + ']');
      log_error(err);
      throw err;
    }

    // WMI (Windows Management Instrumentation)
    Wmi
      .Query()
      .class('Win32_NetworkAdapter')
      .props(['Name', 'GUID', 'PNPDeviceID'])
      .where('NetEnabled=TRUE')
      .exec(function onResult(error, nicArray) {
        if (error) {
          log_error(error);
          callback(error);
          return;
        }

        // USB(Ethernet)のGUID一覧を作成する 
        let usbNaIdArray = [];
        
        if (!nicArray) {
          // nicArray が空の場合
          callback(null, usbNaIdArray);
          return ;
        }
        if (!Array.isArray(nicArray)) {
          const err = new TypeError('[ERROR] nicArray is not Array : ' + nicArray);
          log_error(err);
          callback(err);
          return;
        }

        for (let i = 0; i < nicArray.length; i++) {
          // NIC情報
          const nic = nicArray[i];
          if (!nic) {
            log_error(new Error('[ERROR] nic is invalid : ' + nic));
            continue;
          }

          // NIC情報からUSBのVID/PIDを抜き出す
          const usbVidPid = PnpIdHelper.extractUsbVidPid(nic.PNPDeviceID);
          if (!usbVidPid) {
            // USB機器ではない場合
            continue;
          }
          if (vid !== usbVidPid.vid) {
            // VIDが異なる場合
            continue;
          }
          if (pid !== usbVidPid.pid) {
            // VIDが異なる場合
            continue;
          }

          log_debug('[' + nic.Name + '] VID: ' + usbVidPid.vid + ' PID: ' + usbVidPid.pid);

          // USB機器の場合には、GUIDとPNPDeviceIDを保存する
          const usbNaId = {
            GUID: nic.GUID,
            PNPDeviceID: nic.PNPDeviceID,
          };
          usbNaIdArray.push(usbNaId);
        }

        callback(null, usbNaIdArray);
      });
    return null;
  }

  /**
   * 現在、WindowsにUSB接続されている"Network Adapter"の詳細情報の一覧を取得する。
   * 
   * @private
   * @param {function(error:Error,usbNaArray:Array.<object>)} callback
   *    - USB(Network Adapter)の列挙結果通知用のcallback
   */
  static findNetworkAdapterConfig_(usbNaIdArray, callback) {

    if (!Array.isArray(usbNaIdArray)) {
      const err = new TypeError('[ERROR] usbNaIdArray is not Array : ' + usbNaIdArray);
      log_error(err);
      throw err;
    }

    if (typeof callback !== 'function') {
      const err = new TypeError('[ERROR] callback !== function [' + typeof callback + ']');
      log_error(err);
      throw err;
    }

    // WMI (Windows Management Instrumentation)
    Wmi
      .Query()
      .class('Win32_NetworkAdapterConfiguration')
      .props(["Description", "MACAddress", "SettingID"])
      .where("IpEnabled=TRUE")
      .exec(function onResult(error, naConfigArray) {
        if (error) {
          log_error(error);
          callback(error);
          return;
        }

        // USB(Ethernet)のGUIDを持つNetwork Adapterの詳細情報一覧を作成する 
        let usbNaArray = [];
        if (!naConfigArray) {
          // naConfigArray が空の場合
          callback(null, usbNaArray);
          return ;
        }
        if (!Array.isArray(naConfigArray)) {
          const err = new TypeError('[ERROR] naConfigArray is not Array : ' + naConfigArray);
          log_error(err);
          callback(err);
          return;
        }

        for (let i = 0; i < naConfigArray.length; i++) {
          const naConf = naConfigArray[i];
          if (!naConf) {
            log_error(new Error('[ERROR] naConf is invalid : ' + naConf));
            continue;
          }

          for (let j = 0; j < usbNaIdArray.length; j++) {
            const usbNaId = usbNaIdArray[j];
            if (!usbNaId) {
              log_error(new Error('[ERROR] usbNaId is invalid. ' + usbNaId));
              continue;
            }

            // NetworkAdapter.GUID === NetworkAdapterConfiguration.SettingID の確認
            if (usbNaId.GUID !== naConf.SettingID) {
              continue;
            }

            const usbNicInfo = {
              pnpDeviceId: usbNaId.PNPDeviceID,
              macAddress: naConf.MACAddress,
              adapterName: naConf.Description,
            };
            usbNaArray.push(usbNicInfo);
          }
        }
        callback(null, usbNaArray);
      });
    return null;
  }

  /**
   * 現在、WindowsにUSB接続されている"Network Adapter"の一覧を取得する。
   * 
   * @param {number} vid  検索対象のUSB機器のVID
   * @param {number} pid  検索対象のUSB機器のPID
   * @param {function(error:Error,usbNaArray:Array.<object>)} callback
   *    - USB(Network Adapter)の列挙結果通知用のcallback
   */
  static find(vid, pid, callback) {
    log_debug('UsbNetworkAdapterFinder#find()');

    Promise.resolve()
      // 1. USB(Ethernet)の"Network Adpater"のID一覧を取得する
      .then(function onFullfilled() {
        return new Promise(function (resolve, reject) {
          UsbNetworkAdapterFinder.findNetworkAdapter_(vid, pid, function (error, usbNaIdArray) {
            if (error) {
              log_error(error);
              return reject(error);
            }
            if (!Array.isArray(usbNaIdArray)) {
              const err = new Error('[ERROR] usbNaIdArray is not Array : ' + usbNaIdArray);
              log_debug(err);
              return reject(err);
            }
            return resolve(usbNaIdArray);
          });
        });
      })
      // 2.  USB(Ethernet)の"Network Adpater Config"の一覧を取得する
      .then(function onFullfilled(usbNaIdArray) {
        return new Promise(function (resolve, reject) {
          UsbNetworkAdapterFinder.findNetworkAdapterConfig_(usbNaIdArray, function (error, usbNaArray) {
            if (error) {
              log_error(error);
              return reject(error);
            }
            if (!Array.isArray(usbNaArray)) {
              const err = new Error('[ERROR] usbNaArray is not Array : ' + usbNaArray);
              log_error(err);
              return reject(err);
            }
            if (usbNaIdArray.length != usbNaArray.length) {
              const err = new Error('[ERROR] The number of USB(RNDIS) is illegal. NaId:' + usbNaIdArray.length + ' Na:' + usbNaArray.length);
              log_error(err);
              return reject(err);
            }
            return resolve(usbNaArray);
          });
        });
      })
      // 4. 結果をcallbackする
      .then(function onFullfilled(usbNaArray) {
        callback(null, usbNaArray);
      }, function onRejected(error) {
        log_error(error);
        callback(error);
      });
  }
}

module.exports = UsbNetworkAdapterFinder;

