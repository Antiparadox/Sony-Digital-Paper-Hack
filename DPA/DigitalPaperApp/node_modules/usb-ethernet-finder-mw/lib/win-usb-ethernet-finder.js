/**
 * Windowsに接続されているUSB(Ethernet)機器を検索するクラス。
 * 
 * 現在、WindowsにUSB(Ethernet)として接続されたUSB機器を検索し、検出されたUSB(Ethernet)の情報を返却する。
 */

'use strict';

const log_error = require('debug')('usb-ethernet-finder-mw:win-usb-ethernet-finder:error');
const log_debug = require('debug')('usb-ethernet-finder-mw:win-usb-ethernet-finder:debug');

const UsbDeviceFinder = require('../build/Release/usb_device_finder');
const UsbNetworkAdapterFinder = require('./win-usb-network-adapter-finder');
const os = require('os');


class UsbEthernetFinder {

  /**
   * UsbDeviceFinderから取得したUSB機器一覧から、指定した"PNP Device ID"のUSB機器を検索する。
   * 
   * @private
   * @param {string}          pnpDeviceId - 検索対象の"PNP Device ID"
   * @param {Array.<Object>}  usbArray    - UsbDeviceFinderから取得したUSB機器一覧
   * @return {Object}         usb         - 見つかったUSB機器の情報（見つからなかった場合にはnull）
   * 
   * Object
   *   { pnpDeviceId: 'USB\\VID_054C&PID_0BDD\\012345678900001',
   *     deviceDesc: 'USB Composite Device',
   *     friendlyName: '',
   *     manufacturer: '(標準 USB ホスト コントローラー)',
   *     class: 'USB',
   *     service: 'usbccgp',
   *     serialNumber: '012345678900001',
   *     idVendor: 1356,
   *     idProduct: 3037,
   *     children:
   *      [ { pnpDeviceId: 'USB\\VID_054C&PID_0BDD&MI_00\\6&29D54BF2&0&0000',
   *          deviceDesc: 'Digital Paper network port',
   *          friendlyName: 'Digital Paper network port #10',
   *          manufacturer: 'Sony Corporation',
   *          class: 'Net',
   *          service: 'usbrndis6',
   *          serialNumber: '6&29D54BF2&0&0000',
   *          idVendor: 1356,
   *          idProduct: 3037,
   *          children: [] } ] }
   *  
   */
  static findUsbInfo_(pnpDeviceId, usbArray) {
    const upperPnpDeviceId = pnpDeviceId.toUpperCase();
    for (let i = 0; i < usbArray.length; i++) {
      const usb = usbArray[i];
      if (!usb) {
        log_error(new Error('[ERROR] usb is invalid : ' + usb));
        continue;
      }
      if (upperPnpDeviceId === usb.pnpDeviceId.toUpperCase()) {
        return usb;
      }
      if (UsbEthernetFinder.hasPnpDeviceId_(upperPnpDeviceId, usb.children)) {
        return usb;
      }
    }
    return null;
  }

  static hasPnpDeviceId_(upperPnpDeviceId, usbChildArray) {
    for (let i = 0; i < usbChildArray.length; i++) {
      const usb = usbChildArray[i];
      if (!usb) {
        log_error(new Error('[ERROR] usb is invalid : ' + usb));
        continue;
      }
      if (upperPnpDeviceId === usb.pnpDeviceId.toUpperCase()) {
        return true;
      }
      const isFound = UsbEthernetFinder.hasPnpDeviceId_(upperPnpDeviceId, usb.children);
      if (isFound) {
        return true;
      }
    }
    return false;
  }

  /**
   * 指定された"MAC Address"を元に、"IP Address"の情報を検索する。
   * 
   * @param   {string}          macAddress  - 検索対象の"MAC Address"
   * @return  {Array.<Object>}  ipInfoArray - 見つかったNetwork InterfaceのIP情報の配列
   * 
   * Array.<Object>
   *    [ { address: 'fe80::4133:b287:492b:3ec7',
   *        netmask: 'ffff:ffff:ffff:ffff::',
   *        family: 'IPv6',
   *        mac: '02:35:37:35:3b:3c',
   *        scopeid: 32,
   *        internal: false },
   *      { address: '169.254.62.199',
   *        netmask: '255.255.0.0',
   *        family: 'IPv4',
   *        mac: '02:35:37:35:3b:3c',
   *        internal: false } ]
   */
  static findIpInfoArray_(macAddress) {
    const upperMacAddress = macAddress.toUpperCase();

    // "Network Interface"の一覧を取得する
    const networkInterfaceList = os.networkInterfaces();
    for (const key in networkInterfaceList) {
      const ipInfoArray = networkInterfaceList[key]
      if (!ipInfoArray) {
        log_error(new Error('[ERROR] ipInfoArray is invalid : ' + ipInfoArray));
        continue;
      }

      for (let i = 0; i < ipInfoArray.length; i++) {
        const ipInfo = ipInfoArray[i];
        if (!ipInfo) {
          log_error(new Error('[ERROR] ipInfo is invalid : ' + ipInfo));
          continue;
        }

        // 指定された"MAC Address"を持つ"Network Interface"か確認する
        if (upperMacAddress === ipInfo.mac.toUpperCase()) {
          return ipInfoArray;
        }
      }
    }
    return null;
  }

  /**
   * 現在、Windows に接続されているUSB(Ethernet)機器を検索する。
   * 
   * @param {number}                    vid       - 検索対象のUSB機器のVID
   * @param {number}                    pid       - 検索対象のUSB機器のPID
   * @param {function(Array.<Object>)}  callback  - 検索結果を通知するcallback
   * 
   * Array.<Object>
   *    [ { "deviceId":"USB\\VID_054C&PID_0BDD\\012345678900001",
   *        "vendorId":1356,
   *        "productId":3037,
   *        "vendorName":"(標準 USB ホスト コントローラー)",
   *        "deviceName":"USB Composite Device",
   *        "serialNumber":"012345678900001",
   *        "adapterName":"Digital Paper network port #10",
   *        "ipInfoArray":[ { "address":"fe80::4133:b287:492b:3ec7",
   *                          "netmask":"ffff:ffff:ffff:ffff::",
   *                          "family":"IPv6",
   *                          "mac":"02:35:37:35:3b:3c",
   *                          "scopeid":32,
   *                          "internal":false },
   *                        {
   *                          "address":"169.254.62.199",
   *                          "netmask":"255.255.0.0",
   *                          "family":"IPv4",
   *                          "mac":"02:35:37:35:3b:3c",
   *                          "internal":false
   *                        } ] } ] 
   */
  static find(vid, pid, callback) {

    Promise.resolve()
      // 1. USB機器の一覧を取得する
      .then(function onFullfilled() {
        return new Promise(function (resolve, reject) {
          log_debug('UsbDeviceFinder#find()');
          UsbDeviceFinder.find(vid, pid, function onFind(error, usbArray) {
             if (error) {
              log_error(error);
              reject(error);
              return;
            }
            if (!Array.isArray(usbArray)) {
              const err = new TypeError('[ERROR] usbArray is not Array : ' + usbArray);
              log_error(err);
              reject(err);
              return;
            }
            log_debug('UsbDeviceFinder#find() Count: ' + usbArray.length);
            resolve(usbArray);
          });
        });
      })
      // 2. USB(Ethernet)のNetworkAdpaterの一覧を取得する
      .then(function onFullfilled(usbArray) {
        return new Promise(function (resolve, reject) {
          log_debug('UsbNetworkAdapterFinder#find()');
          UsbNetworkAdapterFinder.find(vid, pid, function onFind(error, usbNaArray) {
            if (error) {
              log_error(error);
              reject(error);
              return;
            }
            if (!Array.isArray(usbNaArray)) {
              const err = new TypeError('[ERROR] usbNaArray is not Array : ' + usbNaArray);
              log_error(err);
              reject(err);
              return;
            }
            if (usbArray.length != usbNaArray.length) {
              log_debug('[WARNING] The number of USB(RNDIS) is invalid. USB:' + usbArray.length + ' NA:' + usbNaArray.length);
            }

            // USB(Ethernet)の一覧を作成する 
            let usbEthernetArray = [];
            for (let i = 0; i < usbNaArray.length; i++) {
              const usbNa = usbNaArray[i];
              if (!usbNa) {
                log_error(new Error('[ERROR] usbNa is invalid : ' + usbNa));
                continue;
              }

              const usb = UsbEthernetFinder.findUsbInfo_(usbNa.pnpDeviceId, usbArray);
              if (!usb) {
                log_error(new Error('[ERROR] usb is not found : ' + usbNa.pnpDeviceId));
                continue;
              }

              const ipInfoArray = UsbEthernetFinder.findIpInfoArray_(usbNa.macAddress);
              if (!ipInfoArray) {
                log_error(new Error('[ERROR] ipInfoArray is not found : ' + usbNa.pnpDeviceId));
                continue;
              }

              const usbEthernet = {
                deviceId: usb.pnpDeviceId,
                vendorId: usb.idVendor,
                productId: usb.idProduct,
                vendorName: usb.manufacturer,
                deviceName: usb.friendlyName ? usb.friendlyName : usb.deviceDesc,
                serialNumber: usb.serialNumber,
                adapterName: usbNa.adapterName,
                ipInfoArray: ipInfoArray,
              };
              usbEthernetArray.push(usbEthernet);
            }
            resolve(usbEthernetArray);
          });
        });
      })
      // 3. 結果をcallbackする
      .then(function onFullfilled(usbEthernetArray) {
        callback(null, usbEthernetArray);
      }, function onRejected(error) {
        log_error('[ERROR] ' + error);
        callback(error);
      });
  }

}

module.exports = UsbEthernetFinder;

