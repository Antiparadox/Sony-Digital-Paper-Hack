/**
 * Win/Macに接続されているUSB(Ethernet)機器を検索するクラス。
 * 
 * 現在、Win/MacにUSB(RNDIS/CDC-ACM)で接続されたNICを検索し、検出されたNICの情報を返却する。
 */

'use strict';

const log_error = require('debug')('usb-ethernet-finder-mw:usb-ethernet-finder:error');
const log_debug = require('debug')('usb-ethernet-finder-mw:usb-ethernet-finder:debug');


class UsbEthernetFinder {

  /**
   * 現在、Windows/Mac に接続されているUSB(Ethernet)機器を検索する。
   * 
   * @param {number} vid - 検索対象のUSB機器のVID
   * @param {number} pid - 検索対象のUSB機器のPID
   * @param {function(error:Error, Array.<Object>)} callback
   *    - 検索結果のUSB(Ethernet)の情報を通知するcallback
   * 
   * Array.<Object>
   *    [ { "deviceId":"USB\\VID_054C&PID_0BDD\\012345678900001",
   *        "vendorId":1356,
   *        "productId":3037,
   *        "vendorName":"(標準 USB ホスト コントローラー)",
   *        "deviceName":"USB Composite Device",
   *        "serialNumber":"012345678900001",
   *        "adapterName":"Digital Paper network port #10",
   *        "ipInfoArray":[ { "address":"fe80::4133:b287:492b:3ec7",
   *                          "netmask":"ffff:ffff:ffff:ffff::",
   *                          "family":"IPv6",
   *                          "mac":"02:35:37:35:3b:3c",
   *                          "scopeid":32,
   *                          "internal":false },
   *                        {
   *                          "address":"169.254.62.199",
   *                          "netmask":"255.255.0.0",
   *                          "family":"IPv4",
   *                          "mac":"02:35:37:35:3b:3c",
   *                          "internal":false
   *                        } ] } ] 
   * 
   */
  static find(vid, pid, callback) {

    // 引数の型チェック
    if (!Number.isInteger(vid)) {
      const err = new TypeError('[ERROR] vid is not integer. [' + vid + ']');
      log_error(err);
      throw err;
    }

    if (!Number.isInteger(pid)) {
      const err = new TypeError('[ERROR] pid is not integer. [' + pid + ']');
      log_error(err);
      throw err;
    }

    if (typeof callback !== 'function') {
      const error = new TypeError('[ERROR] callback !== function [' + typeof callback + ']');
      log_error(err);
      throw err;
    }

    // Platform 毎に処理を切り替える
    switch (process.platform) {
      case 'win32':
        {
          const finder = require('./lib/win-usb-ethernet-finder');
          finder.find(vid, pid, callback);
        }
        break;

      case 'darwin':
        {
          const finder = require('./lib/mac-usb-ethernet-finder');
          finder.find(vid, pid, callback);
        }
        break;

      default:
        const err = new Error('[ERROR] unsupported platform : ' + process.platform);
        log_error(err);
        throw err;
    }
  }
}

module.exports = UsbEthernetFinder;

