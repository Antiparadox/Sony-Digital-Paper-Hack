{
  "_from": "uuid@^3.0.0",
  "_id": "uuid@3.1.0",
  "_inBundle": false,
  "_integrity": "sha512-DIWtzUkw04M4k3bf1IcpS2tngXEL26YUD2M0tMDUpnUrz2hgzUBlD55a4FjdLGPvfHxS6uluGWvaVEqgBcVa+g==",
  "_location": "/sqlite3/uuid",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "uuid",
    "fetchSpec": "^3.0.0",
    "name": "uuid",
    "raw": "uuid@^3.0.0",
    "rawSpec": "^3.0.0",
    "registry": true,
    "saveSpec": null,
    "type": "range"
  },
  "_requiredBy": [
    "/sqlite3/request"
  ],
  "_resolved": "https://registry.npmjs.org/uuid/-/uuid-3.1.0.tgz",
  "_shasum": "3dd3d3e790abc24d7b0d3a034ffababe28ebbc04",
  "_shrinkwrap": null,
  "_spec": "uuid@^3.0.0",
  "_where": "/Users/dane/projects/tagging/node-sqlite3/node_modules/request",
  "bin": {
    "uuid": "./bin/uuid"
  },
  "browser": {
    "./lib/rng.js": "./lib/rng-browser.js",
    "./lib/sha1.js": "./lib/sha1-browser.js"
  },
  "bugs": {
    "url": "https://github.com/kelektiv/node-uuid/issues"
  },
  "bundleDependencies": false,
  "contributors": [
    {
      "email": "robert@broofa.com",
      "name": "Robert Kieffer"
    },
    {
      "email": "dev@tavan.de",
      "name": "Christoph Tavan"
    },
    {
      "email": "coolaj86@gmail.com",
      "name": "AJ ONeal"
    },
    {
      "email": "vincent@zeroload.net",
      "name": "Vincent Voyer"
    },
    {
      "email": "shtylman@gmail.com",
      "name": "Roman Shtylman"
    }
  ],
  "dependencies": {},
  "deprecated": false,
  "description": "RFC4122 (v1, v4, and v5) UUIDs",
  "devDependencies": {
    "mocha": "3.1.2"
  },
  "homepage": "https://github.com/kelektiv/node-uuid#readme",
  "keywords": [
    "uuid",
    "guid",
    "rfc4122"
  ],
  "license": "MIT",
  "name": "uuid",
  "optionalDependencies": {},
  "readme": "# uuid [![Build Status](https://secure.travis-ci.org/kelektiv/node-uuid.svg?branch=master)](http://travis-ci.org/kelektiv/node-uuid) #\n\nSimple, fast generation of [RFC4122](http://www.ietf.org/rfc/rfc4122.txt) UUIDS.\n\nFeatures:\n\n* Support for version 1, 4 and 5 UUIDs\n* Cross-platform\n* Uses cryptographically-strong random number APIs (when available)\n* Zero-dependency, small footprint (... but not [this small](https://gist.github.com/982883))\n\n## Quickstart - CommonJS (Recommended)\n\n```shell\nnpm install uuid\n```\n\nThen generate your uuid version of choice ...\n\nVersion 1 (timestamp):\n\n```javascript\nconst uuidv1 = require('uuid/v1');\nuuidv1(); // -> '6c84fb90-12c4-11e1-840d-7b25c5ee775a'\n```\n\nVersion 4 (random):\n\n```javascript\nconst uuidv4 = require('uuid/v4');\nuuidv4(); // -> '110ec58a-a0f2-4ac4-8393-c866d813b8d1'\n```\n\nVersion 5 (namespace):\n\n```javascript\nconst uuidv5 = require('uuid/v5');\n\n// ... using predefined DNS namespace (for domain names)\nuuidv5('hello.example.com', uuidv5.DNS)); // -> 'fdda765f-fc57-5604-a269-52a7df8164ec'\n\n// ... using predefined URL namespace (for, well, URLs)\nuuidv5('http://example.com/hello', uuidv5.URL); // -> '3bbcee75-cecc-5b56-8031-b6641c1ed1f1'\n\n// ... using a custom namespace\nconst MY_NAMESPACE = '<UUID string you previously generated elsewhere>';\nuuidv5('Hello, World!', MY_NAMESPACE); // -> '90123e1c-7512-523e-bb28-76fab9f2f73d'\n```\n\n## Quickstart - Browser-ready Versions\n\nBrowser-ready versions of this module are available via [wzrd.in](https://github.com/jfhbrook/wzrd.in).\n\nFor version 1 uuids:\n\n```html\n<script src=\"http://wzrd.in/standalone/uuid%2Fv1@latest\"></script>\n<script>\nuuidv1(); // -> v1 UUID\n</script>\n```\n\nFor version 4 uuids:\n\n```html\n<script src=\"http://wzrd.in/standalone/uuid%2Fv4@latest\"></script>\n<script>\nuuidv4(); // -> v4 UUID\n</script>\n```\n\nFor version 5 uuids:\n\n```html\n<script src=\"http://wzrd.in/standalone/uuid%2Fv5@latest\"></script>\n<script>\nuuidv5('http://example.com/hello', uuidv5.URL); // -> v5 UUID\n</script>\n```\n\n## API\n\n### Version 1\n\n```javascript\nconst uuidv1 = require('uuid/v1');\n\n// Allowed arguments\nuuidv1();\nuuidv1(options);\nuuidv1(options, buffer, offset);\n```\n\nGenerate and return a RFC4122 v1 (timestamp-based) UUID.\n\n* `options` - (Object) Optional uuid state to apply. Properties may include:\n\n  * `node` - (Array) Node id as Array of 6 bytes (per 4.1.6). Default: Randomly generated ID.  See note 1.\n  * `clockseq` - (Number between 0 - 0x3fff) RFC clock sequence.  Default: An internally maintained clockseq is used.\n  * `msecs` - (Number | Date) Time in milliseconds since unix Epoch.  Default: The current time is used.\n  * `nsecs` - (Number between 0-9999) additional time, in 100-nanosecond units. Ignored if `msecs` is unspecified. Default: internal uuid counter is used, as per 4.2.1.2.\n\n* `buffer` - (Array | Buffer) Array or buffer where UUID bytes are to be written.\n* `offset` - (Number) Starting index in `buffer` at which to begin writing.\n\nReturns `buffer`, if specified, otherwise the string form of the UUID\n\nNote: The <node> id is generated guaranteed to stay constant for the lifetime of the current JS runtime. (Future versions of this module may use persistent storage mechanisms to extend this guarantee.)\n\nExample: Generate string UUID with fully-specified options\n\n```javascript\nuuidv1({\n  node: [0x01, 0x23, 0x45, 0x67, 0x89, 0xab],\n  clockseq: 0x1234,\n  msecs: new Date('2011-11-01').getTime(),\n  nsecs: 5678\n});   // -> \"710b962e-041c-11e1-9234-0123456789ab\"\n```\n\nExample: In-place generation of two binary IDs\n\n```javascript\n// Generate two ids in an array\nconst arr = new Array(32); // -> []\nuuidv1(null, arr, 0);   // -> [02 a2 ce 90 14 32 11 e1 85 58 0b 48 8e 4f c1 15]\nuuidv1(null, arr, 16);  // -> [02 a2 ce 90 14 32 11 e1 85 58 0b 48 8e 4f c1 15 02 a3 1c b0 14 32 11 e1 85 58 0b 48 8e 4f c1 15]\n```\n\n### Version 4\n\n```javascript\nconst uuidv4 = require('uuid/v4')\n\n// Allowed arguments\nuuidv4();\nuuidv4(options);\nuuidv4(options, buffer, offset);\n```\n\nGenerate and return a RFC4122 v4 UUID.\n\n* `options` - (Object) Optional uuid state to apply. Properties may include:\n  * `random` - (Number[16]) Array of 16 numbers (0-255) to use in place of randomly generated values\n  * `rng` - (Function) Random # generator function that returns an Array[16] of byte values (0-255)\n* `buffer` - (Array | Buffer) Array or buffer where UUID bytes are to be written.\n* `offset` - (Number) Starting index in `buffer` at which to begin writing.\n\nReturns `buffer`, if specified, otherwise the string form of the UUID\n\nExample: Generate string UUID with fully-specified options\n\n```javascript\nuuid.v4({\n  random: [\n    0x10, 0x91, 0x56, 0xbe, 0xc4, 0xfb, 0xc1, 0xea,\n    0x71, 0xb4, 0xef, 0xe1, 0x67, 0x1c, 0x58, 0x36\n  ]\n});\n// -> \"109156be-c4fb-41ea-b1b4-efe1671c5836\"\n```\n\nExample: Generate two IDs in a single buffer\n\n```javascript\nconst buffer = new Array(32); // (or 'new Buffer' in node.js)\nuuid.v4(null, buffer, 0);\nuuid.v4(null, buffer, 16);\n```\n\n### Version 5\n\n```javascript\nconst uuidv5 = require('uuid/v4');\n\n// Allowed arguments\nuuidv5(name, namespace);\nuuidv5(name, namespace, buffer);\nuuidv5(name, namespace, buffer, offset);\n```\n\nGenerate and return a RFC4122 v4 UUID.\n\n* `name` - (String | Array[]) \"name\" to create UUID with\n* `namespace` - (String | Array[]) \"namespace\" UUID either as a String or Array[16] of byte values\n* `buffer` - (Array | Buffer) Array or buffer where UUID bytes are to be written.\n* `offset` - (Number) Starting index in `buffer` at which to begin writing. Default = 0\n\nReturns `buffer`, if specified, otherwise the string form of the UUID\n\nExample:\n\n```javascript\n// Generate a unique  namespace (typically you would do this once, outside of\n// your project, then bake this value into your code)\nconst uuidv4 = require('uuid/v4');\nconst MY_NAMESPACE = uuidv4();  //\n\n// Generate a couple namespace uuids\nconst uuidv5 = require('uuid/v5');\nuuidv5('hello', MY_NAMESPACE);\nuuidv5('world', MY_NAMESPACE);\n```\n\n## Testing\n\n```shell\nnpm test\n```\n\n## Deprecated / Browser-ready API\n\nThe API below is available for legacy purposes and is not expected to be available post-3.X\n\n```javascript\nconst uuid = require('uuid');\n\nuuid.v1(...); // alias of uuid/v1\nuuid.v4(...); // alias of uuid/v4\nuuid(...);    // alias of uuid/v4\n\n// uuid.v5() is not supported in this API\n```\n\n## Legacy node-uuid package\n\nThe code for the legacy node-uuid package is available in the `node-uuid` branch.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/kelektiv/node-uuid.git"
  },
  "scripts": {
    "test": "mocha test/test.js"
  },
  "version": "3.1.0"
}
