/**
 * @module node-bt-pan-mw
 * @version 1.0.0.03150
 */

/**
 * @class
 * @extends EventEmitter
 * @classdesc pan connection operation class
 */
function SBluetoothPan() {

    /**
     * Enum for Bluetooth PAN roles.
     * @readonly
     * @enum {number}
     */
    var S_BT_PAN_ROLE = {
        /** None **/
        S_BT_PAN_ROLE_NONE: 0,
        /** PAN User **/
        S_BT_PAN_ROLE_PANU: 16,
        /** Group Ad-hoc Network **/
        S_BT_PAN_ROLE_GN: 32,
        /** Network Access Point **/
        S_BT_PAN_ROLE_NAP: 64
    };

    /**
     * Enum for Bluetooth PAN status.
     * @readonly
     * @enum {number}
     */
    var S_BT_PAN_STATUS = {
        /** None **/
        S_BT_PAN_STATUS_NONE: 0,
        /** Connected **/
        S_BT_PAN_STATUS_CONNECTED: 16
    };

    /**
     * ErrorInfo Property
     * @typedef {object} module:node-bt-pan-mw~SBluetoothPan~ErrorInfo
     * @prop {number} error_code
     * @prop {string} message
     * @prop {any} other properties
     */

    /**
     * NetworkInfo Property of Network
     * @typedef {object} module:node-bt-pan-mw~SBluetoothPan~NetworkInfo
     * @prop {string} btAddress - Bluetooth address (xx:xx:xx:xx:xx:xx)
     * @prop {string} networkName - PAN network name
     * @prop {string} interfaceId -
     * @prop {string} containerId -
     * @prop {number} availableRoles - role of PAN (S_BT_PAN_ROLE)
     * @prop {number} status - PAN connection status (S_BT_PAN_STATUS)
     */

    /**
     * NetworkStatus Property of Network
     * @typedef {object} module:node-bt-pan-mw~SBluetoothPan~NetworkStatus
     * @prop {string} btAddress - Bluetooth address (xx:xx:xx:xx:xx:xx)
     * @prop {number} status - PAN connection status (S_BT_PAN_STATUS)
     */

    /**
     * This callback is called when the operation is finished.
     *
     * @callback module:node-bt-pan-mw~SBluetoothPan~networkStatusCallback
     * @param {module:node-bt-pan-mw~SBluetoothPan~ErrorInfo} error - error object. null or undefined if api succeed.
     * @param {module:node-bt-pan-mw~SBluetoothPan~NetworkStatus} status - PAN network status
     */


    /**
     * This callback is called when the destroy operation is finished.
     *
     * @callback module:node-bt-pan-mw~SBluetoothPan~destroyCallback
     * @param {module:node-bt-pan-mw~SBluetoothPan~ErrorInfo} error - error object. null or undefined if api succeed.
     */

    /**
     * Release internal resources.
     * After calling this methods, this instance is invalid. All calling methods for this instance fails.
     *
     * @param {module:node-bt-pan-mw~SBluetoothPan~destroyCallback} callback - The function to be called when
                                                    the operation is finished.
                                                    This method is processed as async mode if the callback is a valid function
                                                    This method is processed as sync mode if the callback is not a valid function (ex. null or undefined)
     *
     */
    this.destroy = function (callback) { }

    /**
     * This callback is called when the findNetworks operation is finished.
     *
     * @callback module:node-bt-pan-mw~SBluetoothPan~findNetworksCallback
     * @param {module:node-bt-pan-mw~SBluetoothPan~ErrorInfo} error - error object. null or undefined if api succeed.
     * @param {Array.<module:node-bt-pan-mw~SBluetoothPan~NetworkInfo>} networks - Array of the available networks.
     */

    /**
     * Starts an enumeration of available PAN networks, and return the handle to
     * the first available network.
     *
     * @param {module:node-bt-pan-mw~SBluetoothPan~findNetworksCallback} callback - The function to be called when
                                                    the operation is finished.
     *
     */
    this.findNetworks = function (callback) {
        var error = null;
        var networks = [];
        if (callback) {
            callback(error, networks);
        };
    }


    /**
     * This callback is called when the findNetworks operation is finished.
     *
     * @callback module:node-bt-pan-mw~SBluetoothPan~getNetworkInfoCallback
     * @param {module:node-bt-pan-mw~SBluetoothPan~ErrorInfo} error - error object. null or undefined if api succeed.
     * @param {module:node-bt-pan-mw~SBluetoothPan~NetworkInfo} network - the available networks.
     */

    /**
     * get a specified network information.
     *
     * @param {string} btAddress - Bluetooth address (xx:xx:xx:xx:xx:xx)
     * @param {module:node-bt-pan-mw~SBluetoothPan~getNetworkInfoCallback} callback - The function to be called when
                                                    the operation is finished.
     *
     */
    this.getNetworkInfo = function (btAddress, callback) {
        var error = null;
        var network = null;
        if (callback) {
            callback(error, network);
        };
    }

    /**
     * Connect to BtPan network
     *
     * @param {string} btAddress - Bluetooth address (xx:xx:xx:xx:xx:xx)
     * @param {number} role - desired role (S_BT_PAN_ROLE)
     * @param {module:node-bt-pan-mw~SBluetoothPan~networkStatusCallback} [callback] - The function to be called when the operation is finished.
     *
     */
    this.connectToNetwork = function (btAddress, role, callback) {
        var error = null;
        var networkStatus = null;
        if (callback) {
            callback(error, networkStatus);
        };
    }

    /**
     * Disconnect from BtPan network
     *
     * @param {string} btAddress - Bluetooth address (xx:xx:xx:xx:xx:xx)
     * @param {module:node-bt-pan-mw~SBluetoothPan~networkStatusCallback} [callback] - The function to be called when the operation is finished.
     *
     */
    this.disconnectFromNetwork = function (btAddress, callback) {
        var error = null;
        var networkStatus = null;
        if (callback) {
            callback(error, networkStatus);
        };
    }

    /**
     * Check status of BtPan network
     *
     * @param {string} btAddress - Bluetooth address (xx:xx:xx:xx:xx:xx)
     * @param {module:node-bt-pan-mw~SBluetoothPan~networkStatusCallback} callback - The function to be called when the operation is finished.
     *
     */
    this.isConnectedToNetwork = function (btAddress, callback) {
        var error = null;
        var network = null;
        if (callback) {
            callback(error, network);
        };
    }

    /**
     * This callback is called when the findConnectedNetwork operation is finished.
     *
     * @callback module:node-bt-pan-mw~SBluetoothPan~findConnectedNetworkCallback
     * @param {module:node-bt-pan-mw~SBluetoothPan~ErrorInfo} error - error object. null or undefined if api succeed.
     * @param {module:node-bt-pan-mw~SBluetoothPan~NetworkInfo} network - the connected network. null if there is not the connected network.
     */

    /**
     * find a connected network.
     *
     * @param {module:node-bt-pan-mw~SBluetoothPan~findConnectedNetworkCallback} callback - The function to be called when
                                                    the operation is finished.
     *
     */
    this.findConnectedNetwork = function (callback) {
        var error = null;
        var network = null;
        if (callback) {
            callback(error, network);
        };
    }

    /**
     * Indicates the PAN network status is changed
     * @event module:node-bt-pan-mw~SBluetoothPan#statusChanged
     * @param {module:node-bt-pan-mw~SBluetoothPan~NetworkStatus} status
     */
}