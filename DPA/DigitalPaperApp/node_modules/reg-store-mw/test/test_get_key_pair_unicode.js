
process.env.DEBUG = '*';

const fs = require('fs');
const regStore = require('../index.js');


process.env.MW_USER_DATA_DIR_PATH = './Tempフォルダ';

// アプリデータ保存用ディレクトリの作成
try {
    var userDataDirStat = fs.statSync(process.env.MW_USER_DATA_DIR_PATH);
} catch (e) {
    if ( e.code === 'ENOENT' ) {
        fs.mkdirSync(process.env.MW_USER_DATA_DIR_PATH);
    }
}


// テストコード

console.log('1. Delete private/public key files\n');

const pubKeyPath = process.env.MW_USER_DATA_DIR_PATH + '/publickey.dat';
const privKeyPath = process.env.MW_USER_DATA_DIR_PATH + '/privatekey.dat';

try {
  const pubKeyFile = fs.statSync(pubKeyPath);
  if (pubKeyFile) {
    fs.unlinkSync(pubKeyPath);
  }
} catch (error) {
}
try {
  const privKeyFile = fs.statSync(privKeyPath);
  if (privKeyFile) {
    fs.unlinkSync(privKeyPath);
  }
} catch (error) {
}

console.log('2. Generate private/public key files\n')

regStore.getClientPrivateKey(function (error, privKey1) {
  if (error) {
    console.error(error);
    return;
  }
  console.log(privKey1);

  regStore.getClientPublicKey(function (error, pubKey1) {
    if (error) {
      console.error(error);
      return;
    }
    console.log(pubKey1);

    console.log('3. Read private/public key files\n');

    regStore.getClientPrivateKey(function (error, privKey2) {
      if (error) {
        console.error(error);
        return;
      }
      console.log(privKey2);

      regStore.getClientPublicKey(function (error, pubKey2) {
        if (error) {
          console.error(error);
          return;
        }
        console.log(pubKey2);

        console.log('4. Compare private/public keys\n');
        console.log('privKey1 === privKey2 ' + (privKey1 === privKey2));
        console.log('pubKey1 === pubKey2 ' + (pubKey1 === pubKey2));
      });

    });

  });
});

