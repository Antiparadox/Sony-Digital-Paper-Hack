/**
 * アプリの Device ID や 公開鍵/秘密鍵 の生成/管理を行うクラス。
 */

'use strict';

const fs = require('fs');
const path = require('path');
const uuid = require('uuid');
const mwe = require('mw-error');
const CryptoUtils = require('./build/Release/crypto_utils');

const log_error = require('debug')('reg-store-mw:reg-store:error');
const log_debug = require('debug')('reg-store-mw:reg-store:debug');

const DEVICE_ID_FILE_NAME = 'deviceid.dat';
const PUBLIC_KEY_FILE_NAME = 'publickey.dat';
const PRIVATE_KEY_FILE_NAME = 'privatekey.dat';


class RegStore {

  /**
   * コンストラクタ。
   * 
   * @constructor
   */
  constructor() {
  }

  /**
   * 指定されたcallbackが適切なfunctionか否かを確認する。
   * 
   * @private
   * @param {function} callback コールバック先のfunction
   */
  verifyCallback_(callback) {
    if (typeof callback !== 'function') {
      const error = new TypeError('[ERROR] callback !== function (' + typeof callback + ')');
      log_error(error);
      throw error;
    }
  }

  /**
   * 現在のログインユーザーに応じた、アプリのデータ保存用ディレクトリのパスを取得する。
   * 
   * @private
   * @return {string} アプリのデータ保存用ディレクトリのパス
   */
  getAppDataDir_() {
    // 環境変数からアプリのデータ保存用ディレクトリのパスを取得する
    const appDataDirPath = process.env.MW_USER_DATA_DIR_PATH;
    if (typeof appDataDirPath != 'string' || appDataDirPath.length == 0) {
      const error = new TypeError('[ERROR] MW_USER_DATA_DIR_PATH is invalid  (' + appDataDirPath + ')');
      log_error(error);
      throw error;
    }
    return appDataDirPath;
  }

  /**
   * このアプリの Device ID を取得する。
   * Device ID の保存先ファイルが存在しない場合には、新たにDevice IDを生成し、その値を返す。
   *
   * @param {function(?Error, string)} callback
   *    このcallbackは、このアプリの Device ID の取得が完了した際に呼び出される。
   */
  getClientDeviceId(callback) {
    log_debug('RegStore#getClientDeviceId()');

    this.verifyCallback_(callback);

    // アプリのデータ保存用ディレクトリのパス
    const appDataDirPath = this.getAppDataDir_();

    // Device ID の保存先ファイルパス
    const deviceIdFilePath = path.format({ dir: appDataDirPath, base: DEVICE_ID_FILE_NAME });
    log_debug('deviceIdFilePath: ' + deviceIdFilePath);

    // Device ID をファイルから読み込む
    const this_ = this;
    fs.readFile(deviceIdFilePath, function (error, data) {
      if (error && error.code !== 'ENOENT') {
        const err = mwe.genError(
          mwe.E_MW_FILE_READ_LOCAL_FAILED,
          'Failed to read a device id file : ' + deviceIdFilePath,
          error
        );
        log_error(err);
        callback(err);
        return;
      }
      if (!error && data) {
        const deviceId = data.toString();
        if (deviceId.length != 36) {
          const err = mwe.genError(
            mwe.E_MW_STORE_GET_DEVICE_ID_FAILED,
            'Faild to read a valid device id : ' + deviceIdFilePath
          );
          log_error(err);
          callback(err);
          return;
        }
        
        log_debug('deviceId: ' + deviceId);
        callback(null, deviceId);
        return;
      }

      // Device ID のファイルが存在しない場合には生成する
      this_.genClientDeviceId(callback);
    });
  }

  /**
   * このアプリの Device ID を新たに生成する。
   * 既に生成済みの Device ID が存在した場合には上書きされる。
   *
   * @param {function(?Error, string)} callback
   *    このcallbackは、このアプリの Device ID の生成が完了した際に呼び出される。
   */
  genClientDeviceId(callback) {
    log_debug('RegStore#genClientDeviceId()');

    this.verifyCallback_(callback);

    // アプリのデータ保存用ディレクトリのパス
    const appDataDirPath = this.getAppDataDir_();

    // Device ID の保存先ファイルパス
    const deviceIdFilePath = path.format({ dir: appDataDirPath, base: DEVICE_ID_FILE_NAME });

    // Device ID の生成
    const deviceId = uuid.v4();

    // Device ID をファイルに書き込む
    fs.writeFile(deviceIdFilePath, deviceId, function (error) {
      if (error) {
        const err = mwe.genError(
          mwe.E_MW_FILE_WRITE_LOCAL_FAILED,
          'Failed to write a device id file : ' + deviceIdFilePath,
          error
        );
        log_error(err);
        callback(err);
        return;
      }

      // Device ID をファイルから読み込む
      fs.readFile(deviceIdFilePath, function (error, data) {
        if (error) {
          const err = mwe.genError(
            mwe.E_MW_FILE_READ_LOCAL_FAILED,
            'Failed to read a device id file : ' + deviceIdFilePath,
            error
          );
          log_error(err);
          callback(err);
          return;
        }

        const deviceId = data.toString();
        log_debug('deviceId: ' + deviceId);
        callback(null, deviceId);
      });
    });
  }

  /**
   * Win/Macにサーバ証明書を登録する。
   *
   * @param {string} cert PEMエンコードされた証明書の文字列。
   * @param {function(?Error)} callback 
   *    このcallbackは、Win/Macへのサーバー証明書の登録が完了した際に呼び出される。
   *    なお、ユーザーがサーバー証明書の登録をキャンセルした際にもエラーが渡される。
   */
  addServerCert(cert, callback) {
    log_debug('RegStore#addServerCert()');

    this.verifyCallback_(callback);
    CryptoUtils.addCert(cert, function (error) {
      if (error) {
        log_error(error);
        callback(mwe.genError(
          mwe.E_MW_STORE_SET_CERT_FAILED,
          'Failed to add the certification to the current user\'s root store',
          error
        ));
        return;
      }
      callback(null);
    });
  }

  /**
   * このアプリの秘密鍵をPEM形式の文字列で取得する。
   * 
   * @param {function(?Error, string)} callback
   *    このcallbackは、ファイルから秘密鍵を読み込んだ際に呼び出される。
   *    公開鍵/秘密鍵の保存ファイルが存在しない場合には、新たに公開鍵/秘密鍵を生成し、その値が渡される。
   */
  getClientPrivateKey(callback) {
    log_debug('RegStore#getClientPrivateKey()');
    
    this.getKey_(PRIVATE_KEY_FILE_NAME, function (error, key) {
      if (error) {
        const err = mwe.genError(
          mwe.E_MW_STORE_GET_PRIVKEY_FAILED,
          'Failed to get the current user\'s private key',
          error
        );
        log_error(err);
        callback(err);
        return;
      }
      callback(null, key);
    });
  }

  /**
   * このアプリの公開鍵をPEM形式の文字列で取得する。
   * 
   * @param {function(?Error, key)} callback
   *    このcallbackは、ファイルから公開鍵を読み込んだ際に呼び出される。
   *    公開鍵/秘密鍵の保存ファイルが存在しない場合には、新たに公開鍵/秘密鍵を生成し、その値が渡される。
   */
  getClientPublicKey(callback) {
    log_debug('RegStore#getClientPublicKey()');

    this.getKey_(PUBLIC_KEY_FILE_NAME, function (error, key) {
      if (error) {
        const err = mwe.genError(
          mwe.E_MW_STORE_GET_PUBKEY_FAILED,
          'Failed to get the current user\'s public key',
          error
        );
        log_error(err);
        callback(err);
        return;
      }
      callback(null, key);
    });
  }

  /**
   * このアプリの公開鍵/秘密鍵を取得する。
   * 公開鍵/秘密鍵の保存先ファイルが存在しない場合には、新たに公開鍵/秘密鍵を生成し、その値を返す。
   * 
   * @private
   * @param {String} fileName 公開鍵または秘密鍵の保存先ファイル名
   * @param {function(?Error, string)} callback
   *    このアプリの公開鍵/秘密鍵を返却するためのcallback
   */
  getKey_(fileName, callback) {
    this.verifyCallback_(callback);

    // アプリのデータ保存用ディレクトリのパス
    const appDataDirPath = this.getAppDataDir_();

    // 公開鍵/秘密鍵の保存先ファイルパス
    const keyFilePath = path.format({ dir: appDataDirPath, base: fileName });

    // 公開鍵/秘密鍵のファイルを読み込む
    const this_ = this;
    fs.readFile(keyFilePath, function (error, data) {
      if (error && error.code !== 'ENOENT') {
        callback(error);
        return;
      }
      if (!error) {
        if (!data) {
          callback(new Error('Failed to get valid key data : ' + keyFilePath));
          return;
        }
        const key = data.toString();
        if (key.length == 0) {
          callback(new Error('Failed to get valid key data : ' + keyFilePath));
          return;
        }
        callback(null, key);
        return;
      }

      // 公開鍵/秘密鍵のファイルが存在しない場合には生成する
      this_.genKeyPair(function (error) {
        if (error) {
          callback(error);
          return;
        }
        // 公開鍵/秘密鍵のファイルを読み込む
        fs.readFile(keyFilePath, function (error, data) {
          if (!data) {
            callback(new Error('Failed to get valid key data : ' + keyFilePath));
            return;
          }
          const key = data.toString();
          if (key.length == 0) {
            callback(new Error('Failed to get valid key data : ' + keyFilePath));
            return;
          }
          callback(null, key);
        });
      });
    });
  }

  /**
   * このアプリの公開鍵/秘密鍵を新たに生成する。
   * 既に生成済みの公開鍵/秘密鍵が存在した場合には上書きされる。
   *
   * @param {function(?Error)} callback
   *    このcallbackは、公開鍵/秘密鍵を生成し、ファイルに保存した際に呼び出される。
   */
  genKeyPair(callback) {
    log_debug('RegStore#genKeyPair()');
    
    this.verifyCallback_(callback);

    // アプリのデータ保存用ディレクトリのパス
    const appDataDirPath = this.getAppDataDir_();

    // 公開鍵/秘密鍵の保存先ファイルパス
    const privKeyFilePath = path.format({ dir: appDataDirPath, base: PRIVATE_KEY_FILE_NAME });
    const pubKeyFilePath = path.format({ dir: appDataDirPath, base: PUBLIC_KEY_FILE_NAME });
    log_debug('privKeyFilePath: ' + privKeyFilePath);
    log_debug('pubKeyFilePath: ' + pubKeyFilePath);

    // 公開鍵/秘密鍵の生成
    CryptoUtils.genKeyPair(
      privKeyFilePath,
      pubKeyFilePath,
      function (error) {
        if (error) {
          const err = mwe.genError(
            mwe.E_MW_STORE_GEN_KEYPAIR_FAILED,
            'Failed to generate key pairs : ' + privKeyFilePath,
            error
          );
          log_error(err);
          callback(err);
          return;
        }
        callback(null);
      });
  }
}

module.exports = new RegStore();
