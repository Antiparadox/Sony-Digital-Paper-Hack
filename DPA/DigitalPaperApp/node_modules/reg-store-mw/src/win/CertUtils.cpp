#include "CertUtils.h"
#include "WinErrorCode.h"
#include "AutoCriticalSection.h"
#include "StringUtils.h"
#include "../Log.h"

#define ROOT_STORE _T("ROOT")

static CriticalSection cs_sApi;


std::string CertUtils::addCertToRootStore(
	/*[in]*/ const std::string& strPemCert
	)
{
	AutoCriticalSection lock(&cs_sApi);

	std::string errMsg;

	BYTE* pbCert = nullptr;
	HCERTSTORE hStore = nullptr;

	try {
		// Convert strings for file paths from UTF-8 to UTF-16
		std::wstring strPemCertW;
		ULONG result = StringUtils::Utf8ToUtf16(strPemCert, strPemCertW);
		if (result) {
			errMsg = WinErrorCode::ToString(result);
			LOG_ERROR(_T("StringUtils::Utf8ToUtf16() failed. [%S]"), errMsg.c_str());
			throw result;
		}

		// PEM形式の証明書をDER形式に変換する
		ULONG cbCert = 0;
		if (!::CryptStringToBinaryW(strPemCertW.c_str(), 0, CRYPT_STRING_BASE64HEADER, NULL, &cbCert, NULL, NULL)) {
			const ULONG errCode = ::GetLastError();
			errMsg = WinErrorCode::ToString(errCode);
			LOG_ERROR(_T("CryptStringToBinary() failed. [%S]"), errMsg.c_str());
			throw errCode;
		}
		pbCert = new BYTE[cbCert];
		::ZeroMemory(pbCert, cbCert);
		if (!::CryptStringToBinaryW(strPemCertW.c_str(), 0, CRYPT_STRING_BASE64HEADER, pbCert, &cbCert, NULL, NULL)) {
			const ULONG errCode = ::GetLastError();
			errMsg = WinErrorCode::ToString(errCode);
			LOG_ERROR(_T("CryptStringToBinary() failed. [%S]"), errMsg.c_str());
			throw errCode;
		}

		// 「現在のユーザー」の「信頼されたルート証明機関」を開く
		hStore = ::CertOpenSystemStore(NULL, ROOT_STORE);
		if (!hStore) {
			const ULONG errCode = ::GetLastError();
			errMsg = WinErrorCode::ToString(errCode);
			LOG_ERROR(_T("CertOpenSystemStore() failed. [%S]"), errMsg.c_str());
			throw errCode;
		}

		// 証明書を登録する
		if (!::CertAddEncodedCertificateToStore(hStore, X509_ASN_ENCODING | PKCS_7_ASN_ENCODING, pbCert, cbCert, CERT_STORE_ADD_ALWAYS, NULL)) {
			const ULONG errCode = ::GetLastError();
			errMsg = WinErrorCode::ToString(errCode);
			LOG_ERROR(_T("CertAddEncodedCertificateToStore() failed. [%S]"), errMsg.c_str());
			throw errCode;
		}
	}
	catch (ULONG) {
		;
	}
	catch (...) {
		const ULONG errCode = ::GetLastError();
		errMsg = WinErrorCode::ToString(errCode);
		LOG_ERROR(_T("Unknown error occurred. [%S]"), errMsg.c_str());
	}

	if (hStore) {
		::CertCloseStore(hStore, 0);
		hStore = nullptr;
	}

	if (pbCert) {
		delete[] pbCert;
		pbCert = nullptr;
	}

	return errMsg;
}

