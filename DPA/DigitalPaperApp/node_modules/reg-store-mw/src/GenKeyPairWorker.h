//
//  GenKeyPairWorker.h
//
//  Copyright 2016 Sony Corporation
//

#pragma once

#include <nan.h>
#include <string>

#ifdef _MSC_VER
// Windows
#include "win/KeyUtils.h"
#else
// Mac OS X
#include "mac/KeyUtils.h"
#endif


class GenKeyPairWorker : public Nan::AsyncWorker
{
private:
	std::string sPrivKeyPath;
	std::string sPubKeyPath;

public:
	/**
	* Constructor
	*/
	GenKeyPairWorker(/*[in]*/ std::string& rsPrivKeyPath, /*[in]*/ std::string& rsPubKeyPath, /*[in]*/ Nan::Callback* callback)
		: Nan::AsyncWorker(callback), sPrivKeyPath(rsPrivKeyPath), sPubKeyPath(rsPubKeyPath)
	{}

	/**
	* Executed inside the worker-thread.
	* It is not safe to access V8, or V8 data structures
	* here, so everything we need for input and output
	* should go on `this`.
	*/
	virtual void Execute()
	{
		// Add a PEM formatted certificate to the current user's ROOT store
		const std::string error = KeyUtils::GenRsa2048KeyPair(sPrivKeyPath, sPubKeyPath);
		if (!error.empty()) {
			this->SetErrorMessage(error.c_str());
		}
	}

	/**
	* Executed when the async work is complete
	* this function will be run inside the main event loop
	* so it is safe to use V8 again
	*/
	virtual void HandleOKCallback()
	{
		Nan::HandleScope scope;

		const int argc = 1;
		v8::Local<v8::Value> argv[] = {
			Nan::Null(),
		};

		callback->Call(argc, argv);
	}

	/**
	* Executed when the async work is failed
	* this function will be run inside the main event loop
	* so it is safe to use V8 again
	*/
	virtual void HandleErrorCallback()
	{
		Nan::HandleScope scope;

		const int argc = 1;
		v8::Local<v8::Value> argv[] = {
			Nan::Error(this->ErrorMessage()),
		};

		callback->Call(argc, argv);
	}

};
