/**
 * Win/MacにUSB接続されたDPTの仮想シリアルポート(CDC-ACM)を取り扱う。
 */

'use strict';

const log_error = require('debug')('mw-usb-initiator:dpt-serial-port:error');
const log_debug = require('debug')('mw-usb-initiator:dpt-serial-port:debug');

const DPT = require('./dpt-constants');
const SerialPort = require('./serial-port');


/**
 * 仮想シリアルポート(CDC-ACM)でWindowsにUSB接続されているDPTのUSB Device Classを
 * RNDISに切り替えるためのコマンド。
 * @const
 * @type {Buffer}
 */
const CMD_CHANGE_TO_RNDIS = new Buffer([0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04]);

/**
 * 仮想シリアルポート(CDC-ACM)でMacにUSB接続されているDPTのUSB Device Classを
 * CDC-ECMに切り替えるためのコマンド。
 * @const
 * @type {Buffer}
 */
const CMD_CHANGE_TO_CDC_ECM = new Buffer([0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x04]);

/**
 * PCにUSB接続されているDPTを仮想シリアルポート(CDC-ACM)からRNDIS(Win)またはCDC-ECM(Mac)に
 * 切り替えるためのコマンドを取得する。
 * 
 * @return {Buffer} 仮想シリアルポート(CDC-ACM)に送信するコマンド。エラー時にはnull。
 */
function getChangeDeviceClassCommand() {
  switch (process.platform) {
    case 'win32':
      return CMD_CHANGE_TO_RNDIS;
    case 'darwin':
      return CMD_CHANGE_TO_CDC_ECM;
    default:
      log_error(new Error('[ERROR] unsupported platform : ' + process.platform));
      return null;
  }
}

/**
 * Win/MacにUSB接続されたDPTの仮想シリアルポート(CDC-ACM)を取り扱うクラス。
 */
class DptSerialPort {

  /**
   * PCにUSB接続されているDPTを仮想シリアルポート(CDC-ACM)からRNDIS(Win)またはCDC-ECM(Mac)に切り替える。
   * 
   * @param {string} comPortPath
   *    - シリアルポートのパス (Win:"COM3", Mac:"/dev/cu.usbmodem1421")。
   * @param {function(error:Error)} callback
   *    - Ethernetへの切替結果通知用のcallback。
   */
  static switchToEthernet(comPortPath, callback) {
    log_debug('DptSerialPort#switchToEthernet(' + comPortPath + ', callback)');

    if (typeof comPortPath !== 'string') {
      const err = new TypeError('[ERROR] comPortPath !== string [' + typeof comPortPath + ']');
      log_error(err);
      throw err;
    }

    if (typeof callback !== 'function') {
      const err = new TypeError('[ERROR] callback !== function  [' + typeof callback + ']');
      log_error(err);
      throw err;
    }

    // CDC-ACM ⇒ RNDIS/CDC-ECM 切り替えコマンドを用意する
    let changeCommand = getChangeDeviceClassCommand();
    if (!changeCommand) {
      const err = new Error('[ERROR] CHANGE DEVICE CLASS COMMAND is not found.');
      log_error(err);
      callback(err);
      return;
    }

    // シリアルポートを開いてUSB切り替えコマンドを発行する
    let comPort = new SerialPort();
    comPort.open(comPortPath, {})
      .write(changeCommand)
      .close()
      .then(function onFullfilled(value) {
        callback(null);
      }, function onRejected(error) {
        log_error(error);
        callback(error);
      });
  }
}

module.exports = DptSerialPort;

