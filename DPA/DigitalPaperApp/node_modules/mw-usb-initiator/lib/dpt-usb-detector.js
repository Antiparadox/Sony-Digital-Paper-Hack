/**
 * Win/MacにUSB接続されたDPTの検出を行う。
 */

'use strict';

const log_error = require('debug')('mw-usb-initiator:dpt-usb-detector:error');
const log_debug = require('debug')('mw-usb-initiator:dpt-usb-detector:debug');

const DPT = require('./dpt-constants');
const UsbDetector = require('usb-detector-mw');
const EventEmitter2 = require('eventemitter2').EventEmitter2;


/**
 * Win/MacへのDPTのUSB接続/切断を取り扱うクラス。
 */
class DptUsbDetector extends EventEmitter2 {

  /**
   * @constructor
   * @extends {EventEmitter2}
   */
  constructor() {
    super({
      wildcard: true,
      delimiter: ':',
      maxListeners: 10
    });

    this.usbDetector_ = new UsbDetector();
    
    const _self = this;

    // USB(CDC-ACM) の追加
    this.usbDetector_.on('add:' + DPT.VID_SONY + ':' + DPT.PID_CDC_ACM, function onAdd(device){
      _self.emit('add:UsbSerialPort', device);
    });
    // USB(CDC-ACM) の削除    
    this.usbDetector_.on('remove:' + DPT.VID_SONY + ':' + DPT.PID_CDC_ACM, function onRemove(device){
      _self.emit('remove:UsbSerialPort', device);
    });

    // USB(RNDIS/CDC-ECM) の追加
    this.usbDetector_.on('add:' + DPT.VID_SONY + ':' + DPT.PID_ETHERNET,  function onAdd(device){
      _self.emit('add:UsbEthernet', device);
    });
    // USB(RNDIS/CDC-ECM) の削除
    this.usbDetector_.on('remove:' + DPT.VID_SONY + ':' + DPT.PID_ETHERNET, function onRemove(device){
      _self.emit('remove:UsbEthernet', device);
    });
  }  

  /**
   * Win/MacへのDPTのUSB接続/切断の検出を開始する。
   * 
   * @param {function(?Error, Array.<Object>, Array.<Object>)} callback
   *    Win/MacへのDPTのUSB接続/切断の検出処理の開始時に呼び出されるcallback。
   *    検出処理開始時点で、Win/Macに接続されているUSB(CDC-ACM)およびUSB(RNDIS/CDC-ECM)の一覧を通知する。
   */
  start(callback) {
    this.usbDetector_.start(DPT.VID_SONY, function onStarted(error, deviceArray) {
      if (!callback) {
        return;
      }
      if (error) {
        callback(error);
        return;
      }
      let usbSerialPortArray = [];
      let usbEthernetArray = [];
      if (!Array.isArray(deviceArray)) {
        const error = new TypeError('[ERROR] deviceArray is not Array. [' + typeof deviceArray + ']');
        callback(error);
        return;
      }
      for (let i = 0; i < deviceArray.length; i++) {
        const device = deviceArray[i];
        if (!device) {
          log_error(new Error('[ERROR] illegal device is found.'));
          continue;
        }
        if (device.productId === DPT.PID_CDC_ACM) {
          usbSerialPortArray.push(device);
          continue;
        }
        if (device.productId === DPT.PID_ETHERNET) {
          usbEthernetArray.push(device);
          continue;
        }
      }
      callback(null, usbSerialPortArray, usbEthernetArray);
    });
  }

  /**
   * Win/MacへのDPTのUSB接続/切断の検出を停止する。
   * 
   * @param {function(?Error)} callback
   *    Win/MacへのDPTのUSB接続/切断の検出処理の終了時に呼び出されるcallback。
   */
  stop(callback) {
    this.usbDetector_.stop(callback);
  }

  /**
   * Win/MacへのDPT(CDC-ACM)の接続台数を数える。
   * 
   * @param {function(?Error, count:number)} callback
   *    Win/MacへのDPT(CDC-ACM)の接続台数の確認結果を通知するcallback
   */
  countUsbSerialPorts(callback) {
    this.usbDetector_.count(DPT.VID_SONY, DPT.PID_CDC_ACM, callback);
  }

  /**
   * Win/MacへのDPT(RNDIS/CDC-ECM)の接続台数を数える。
   * 
   * @param {function(?Error, count:number)} callback
   *    Win/MacへのDPT(RNDIS/CDC-ECM)の接続台数の確認結果を通知するcallback
   */
  countUsbEthernet(callback) {
    this.usbDetector_.count(DPT.VID_SONY, DPT.PID_ETHERNET, callback);
  }

  /**
   * Win/Macへ接続されているDPT(CDC-ACM)を列挙する。
   * 
   * @param {function(?Error, Array.<Object>)} callback
   *    検索結果のUSB(Ethernet)の情報を通知するcallback
   */
  enumUsbSerialPorts(callback) {
    this.usbDetector_.find(DPT.VID_SONY, DPT.PID_CDC_ACM, callback);
  }

  /**
   * Win/MacへのDPT(RNDIS/CDC-ECM)の接続台数を数える。
   * 
   * @param {function(?Error, Array.<Object>)} callback
   *    検索結果のUSB(Ethernet)の情報を通知するcallback
   */
  enumUsbEthernet(callback) {
    this.usbDetector_.find(DPT.VID_SONY, DPT.PID_ETHERNET, callback);
  }
}

module.exports = DptUsbDetector;
