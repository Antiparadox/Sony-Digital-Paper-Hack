/**
 * 単一のシリアルポートに対するOpen,Write,Closeを取り扱う。
 */
'use strict';

const log_error = require('debug')('mw-usb-initiator:serial-port:error');
const log_debug = require('debug')('mw-usb-initiator:serial-port:debug');

const Serial = require('serialport-mw').SerialPort;


/**
 * 単一のシリアルポートに対するOpen,Write,Closeを取り扱う。
 * Open,Write,Closeの非同期処理のメソッドチェーンに対応したクラス。
 */
class SerialPort {

  /**
   * SerialPortクラスのコンストラクタ。
   */
  constructor() {
    // Promise オブジェクト
    this._promise = Promise.resolve();

    // SerialPort オブジェクト
    this._comPort = null;

    // COM ポートのパス
    // 例) Win:"COM3", Mac:"/dev/cu.usbmodem1421"
    this._portPath = null;
  }

  /**
   * Promise#then()のwrapper。
   * this._promise に対して、then()の処理を追加したpromiseで上書きする。
   */
  then(onFulfilled, onRejected) {
    this._promise = this._promise.then(onFulfilled, onRejected);
    return this;
  }

  /**
   * Promise#catch()のwrapper。
   * this._promise に対して、catch()の処理を追加したpromiseで上書きする。
   */
  catch(onRejected) {
    this._promise = this._promise.catch(onRejected);
    return this;
  }

  /**
   * シリアルポートを開く。
   * callback用。
   * 
   * @param {string}                portPath  - シリアルポートのパス
   * @param {Object}                options   - シリアルポートを開く際のオプション
   * @param {function(error:Error)} callback  - シリアルポートを開いた際の結果通知用callback
   */
  openWithCallback(portPath, options, callback) {
    log_debug('[' + portPath + '] SerialPort#open(' + portPath + ', ' + JSON.stringify(options) + ', callback)');

    // SerialPortのインスタンスを生成する
    this._portPath = portPath;
    this._comPort = new Serial(this._portPath, options, false);
    if (!this._comPort) {
      const err = new Error('[ERROR] new SerialPort(' + this._portPath + ') failed');
      log_error(err);
      callback(err);
      return;
    }

    // シリアルポートを開く
    const self = this;
    this._comPort.open(function onOpen(error) {
      log_debug('SerialPort#open()')
      if (error) {
        const err = new Error('[ERROR] ' + error + ' (' + self._portPath + ')');
        log_error(err);
        callback(err);
      } else {
        callback(null);
      }
    });
  }

  /**
   * シリアルポートを開く。
   * メソッドチェーン用。
   * 
   * @param {string}  portPath  - シリアルポートのパス
   * @param {Object}  options   - シリアルポートを開く際のオプション
   * @return {SerialPort} this     - SerialPortのインスタンス 
   */
  open(portPath, options) {
    const self = this;
    return this.then(function onFulfilled() {
      return new Promise(function (resolve, reject) {
        self.openWithCallback(portPath, options, function (error, comPort) {
          if (error) {
            reject(error);
          } else {
            resolve(comPort);
          }
        });
      });
    });
  }

  /**
   * シリアルポートを閉じる。
   * callback用。
   * 
   * @param {function(error:Error)} callback - シリアルポートを閉じた際の結果通知用callback
   */
  closeWithCallback(callback) {
    log_debug('[' + this._portPath + '] SerialPort#close(callback)');

    if (this._comPort === null) {
      callback(null);
      return;
    }

    if (!this._comPort.isOpen()) {
      callback(null);
      return;
    }

    // シリアルポートを閉じる
    const self = this;
    this._comPort.close(function onClose(error) {
      log_debug('SerialPort#close()')
      if (error) {
        const err = new Error('[ERROR] ' + error + ' (' + self._portPath + ')');
        log_error(err);
        callback(err);
      } else {
        callback(null);
      }
      self._comPort = null;
      self._portPath = null;
    });
  }

  /**
   * シリアルポートを閉じる。
   * メソッドチェーン用。
   * 
   * @return {SerialPort} this - SerialPortのインスタンス 
   */
  close() {
    const self = this;
    return this.then(
      function onFulfilled() {
        return new Promise(function (resolve, reject) {
          self.closeWithCallback(function (error) {
            if (error) {
              reject(error);
            } else {
              resolve();
            }
          });
        });
      },
      function onRejected(lastError) {
        return new Promise(function (resolve, reject) {
          self.closeWithCallback(function (error) {
            reject(lastError);
          });
        });
      });
  }

  /**
   * シリアルポートへデータを書き込む。
   * callback用。
   * 
   * @param {Buffer}                buffer    - シリアルポートへ書き込むデータ
   * @param {function(error:Error)} callback  - シリアルポートへ書き込んだ際の結果通知用callback
   */
  writeWithCallback(buffer, callback) {
    log_debug('[' + this._portPath + '] SerialPort#write(' + JSON.stringify(buffer) + ',callback)');

    if (this._comPort === null) {
      const err = new Error('[ERROR] COM port is not initialized. (' + this._portPath + ')');
      log_error(err);
      callback(err);
      return;
    }

    if (!this._comPort.isOpen()) {
      const err = new Error('[ERROR] COM port is not opened. (' + this._portPath + ')');
      log_error(err);
      callback(err);
      return;
    }

    // シリアルポートへデータを書き込む
    const self = this;
    this._comPort.write(buffer, function onWrite(error) {
      log_debug('SerialPort#write()')
      if (error) {
        const err = new Error('[ERROR] ' + error + ' (' + self._portPath + ')');
        log_error(err);
        callback(err);
        return;
      }

      // シリアルポートへのデータの書き込み完了を待機する
      self._comPort.drain(function onDrain(error) {
        log_debug('SerialPort#drain()');
        if (error) {
          const err = new Error('[ERROR] ' + error + ' (' + self._portPath + ')');
          log_error(err);
          callback(err);
        } else {
          callback(null);
        }
      });
    });
  }

  /**
   * シリアルポートへデータを書き込む。
   * メソッドチェーン用。
   * 
   * @param  {Buffer}  buffer   - シリアルポートへ書き込むデータ
   * @return {SerialPort} this     - SerialPortのインスタンス 
   */
  write(buffer) {
    const self = this;
    return this.then(function onFulfilled() {
      return new Promise(function (resolve, reject) {
        self.writeWithCallback(buffer, function (error) {
          if (error) {
            reject(error);
          } else {
            resolve();
          }
        });
      });
    });
  }
}

module.exports = SerialPort;