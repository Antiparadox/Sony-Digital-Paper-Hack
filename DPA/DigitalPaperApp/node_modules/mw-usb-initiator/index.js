/**
 * Win/MacへのDPTのUSB接続/切断の検出を取り扱う。
 * 
 * Win/MacへUSB(CDC-ACM)で接続されたDPTに対して、USB切替のシリアルコマンドを発行し、
 * USB(RNDIS/CDC-ECM)に切り替える。
 */

'use strict';

const log_error = require('debug')('mw-usb-initiator:dpt-usb-initiator:error');
const log_debug = require('debug')('mw-usb-initiator:dpt-usb-initiator:debug');

const EventEmitter2 = require('eventemitter2').EventEmitter2;
const DptUsbDetector = require('./lib/dpt-usb-detector');
const DptSerialPortController = require('./lib/dpt-serial-port-controller')
const DptUsbEthernetEnumerator = require('./lib/dpt-usb-ethernet-enumerator')

// EventEmitter用の文字列定数
const EMIT_EVENT_ADD      = 'add';
const EMIT_EVENT_REMOVE   = 'remove';
const EMIT_DEVICE_SERIAL  = 'serialport';
const EMIT_DEVICE_ETHER	  = 'ethernet';
const EMIT_DELIMITER      = ':';


/**
 * Win/Macへの対応デバイスのUSB接続/切断の検出を取り扱うクラス。
 * 
 * - Win/Macへ"USB Serial Port (CDC-ACM)"および"USB Ethernet (RNDIS/CDC-ECM)"の接続/切断を検出する。
 * - Win/Macへ"USB Serial Port (CDC-ACM)"で接続された対応デバイスに対して、USB切替のシリアルコマンドを発行し、
 *   "USB Ethernet (RNDIS/CDC-ECM)"に切り替える。
 */
class DptUsbInitiator extends EventEmitter2 {

  /**
   * コンストラクタ。
   * EventEmitter2のコンストラクタを呼び出して、イベント通知のオプションを変更する。
   * 
   * @constructor
   * @extends {EventEmitter2}
   * @private
   */
  constructor() {
    super({
      wildcard: true,
      delimiter: EMIT_DELIMITER,
      maxListeners: 10
    });

    /**
     * DPTのUSB(RNDIS/CDC-ECM)の一覧
     * 
     * @type {Map}
     * @private
     */
    this.usbEtherMap_ = new Map();

    /**
     * USB機器の接続/切断検出
     * 
     * @type {UsbDetector}
     * @private
     */
    this.usbDetector_ = new DptUsbDetector();

    /**
     * DPTのUSB(CDC-ACM)の切替
     */
    this.serialPortController_ = new DptSerialPortController();

    /**
     * DPTのUSB(RNDIS/CDC-ECM)の列挙
     */
    this.usbEtherEnumerator_ = new DptUsbEthernetEnumerator();


    const _self = this;

    // USB(CDC-ACM) の追加が通知された場合の処理
    this.usbDetector_.on('add:UsbSerialPort', function onAdd(device){
      _self.onUsbSerialPortAdded_(device);
    });
    // USB(CDC-ACM) の削除が通知された場合の処理
    this.usbDetector_.on('remove:UsbSerialPort', function onRemove(device){
      _self.onUsbSerialPortRemoved_(device);
    });

    // USB(RNDIS/CDC-ECM) の追加が通知された場合の処理
    this.usbDetector_.on('add:UsbEthernet',  function onAdd(device){
      _self.onUsbEthernetAdded_(device);
    });
    // USB(RNDIS/CDC-ECM) の削除が通知された場合の処理
    this.usbDetector_.on('remove:UsbEthernet', function onRemove(device){
      _self.onUsbEthernetRemoved_(device);
    });
  }

  /**
   * 指定されたcallbackが適切なfunctionか否かを確認する。
   * 
   * @private
   * @param {function} callback コールバック先のfunction
   */
  verifyCallback_(callback) {
    if (typeof callback !== 'function') {
      const error = new TypeError('[ERROR] callback !== function [' + typeof callback + ']');
      log_error(error);
      throw error;
    }
  }

  /**
   * Win/MacへのDPTのUSB接続/切断の検出を開始する。
   * 
   * @param {function(error:Error, usbSerialArray:Array.<Object>, usbEtherArray:Array.<Object>)} callback
   *    Win/MacへのDPTのUSB接続/切断の検出処理の開始時に呼び出されるcallback。
   *    検出処理の開始時点でWin/MacにUSB接続されているDPTの一覧を通知する。
   */
  start(callback) {
    this.verifyCallback_(callback);

    const _self = this;
    this.usbDetector_.start(function onStart(error, usbSerialPortArray) {
      if (error) {
        log_error(error);
        callback(error);
        return;
      }

      // 現在Win/MacにUSB(RNDIS/CDC-ECM)で接続されているDPTを列挙する
      DptUsbEthernetEnumerator.enumOnce(_self.usbDetector_, function onEnum(error, usbEthernetArray) {
        // USB(RNDIS/CDC-ECM)の一覧を作成する
        _self.initUsbEtherMap_(usbEthernetArray);

        // USB接続/切断の検出処理開始を通知する
        if (callback) {
          const usbSerialArray = _self.convertToReturnUsbSerialArray_(usbSerialPortArray);
          const usbEtherArray = _self.convertToReturnUsbEtherArray_(usbEthernetArray);
          callback(null, usbSerialArray, usbEtherArray);
        }

        // Win/MacにUSB(RNDIS/CDC-ECM)で接続されているDPTを列挙に失敗した場合にはリトライする
        if (error) {
          _self.updateUsbEtherMap_();
        }

        // 現在Win/MacにUSB(CDC-ACM)で接続されている全てのDPTをUSB(RNDIS/CDC-ECM)に切り替える
        _self.serialPortController_.startSwitchingUsbMode(_self.usbDetector_, function onSwitch(error) {
          if (error) {
			// [2016-06-28 15:32:36+09:00] kan.k: [TODO] エラーを握り
			// つぶしている様に見えます。何らかの方法で、上位層に通知
			// する方式にした方が良いと思います。
            log_error(error);
          }
        });
      });
    });
  }

  /**
   * "USB Serial Port (CDC-ACM)"の一覧を呼び出し側へ返却する形式に変換する。
   * 
   * @private
   * @param {Array.<Object>} srcUsbSerialArray
   *     "USB Serial Port (CDC-ACM)"の一覧
   * @return {Array.<Object.<serialNumber:string>>}
   *     呼び出し側へ返却用の"USB Serial Port (CDC-ACM)"の一覧
   */
  convertToReturnUsbSerialArray_(srcUsbSerialArray) {
    let dstUsbSerialArray = [];
    if (!Array.isArray(srcUsbSerialArray)) {
      log_error(new TypeError('[ERROR] srcUsbSerialArray is not Array. [' + typeof srcUsbSerialArray + ']'));
      return dstUsbSerialArray;
    }

    for (let i = 0; i < srcUsbSerialArray.length; i++) {
      const srcUsbSerial = srcUsbSerialArray[i];
      const dstUsbSerial = this.convertToReturnUsbSerial_(srcUsbSerial);
      if (dstUsbSerial) {
        dstUsbSerialArray.push(dstUsbSerial);
      }
    }
    return dstUsbSerialArray;
  }

  /**
   * USB(CDC-ACM)のobjectを呼び出し側へ返却する形式に変換する。
   * 
   * @private
   * @param {Object} srcUsbEther
   *     USB(CDC-ACM)のobject
   * @return {Object.<serialNumber:string>}
   *     呼び出し側へ返却用のUSB(CDC-ACM)のobject
   */
  convertToReturnUsbSerial_(srcUsbSerial) {
    if (!srcUsbSerial) {
      log_error(new TypeError('[ERROR] illegal srcUsbSerial is found.'));
      return null;
    }
    return {
      serialNumber: srcUsbSerial.serialNumber
    };
  }

  /**
   * USB(RNDIS/CDC-ECM)の一覧を呼び出し側へ返却する形式に変換する。
   * 
   * @private
   * @param {Array.<Object>} srcUsbEtherArray
   *     USB(RNDIS/CDC-ECM)の一覧
   * @return {Array.<Object.<serialNumber:string, ipV6:Object>>}
   *     呼び出し側へ返却用のUSB(RNDIS/CDC-ECM)の一覧
   */
  convertToReturnUsbEtherArray_(srcUsbEtherArray) {
    let dstUsbEtherArray = [];
    if (!Array.isArray(srcUsbEtherArray)) {
      log_error(new TypeError('[ERROR] srcUsbEtherArray is not Array. [' + typeof srcUsbEtherArray + ']'));
      return dstUsbEtherArray;
    }

    for (let i = 0; i < srcUsbEtherArray.length; i++) {
      const srcUsbEther = srcUsbEtherArray[i];
      const dstUsbEther = this.convertToReturnUsbEther_(srcUsbEther);
      if (dstUsbEther) {
        dstUsbEtherArray.push(dstUsbEther);
      }
    }
    return dstUsbEtherArray;
  }

  /**
   * USB(RNDIS/CDC-ECM)のobjectを呼び出し側へ返却する形式に変換する。
   * 
   * @private
   * @param {Object} srcUsbEther
   *     USB(RNDIS/CDC-ECM)のobject
   * @return {{serialNumber:string, ipV6:Object}}
   *     呼び出し側へ返却用のUSB(RNDIS/CDC-ECM)のobject
   */
  convertToReturnUsbEther_(srcUsbEther) {
    if (!srcUsbEther) {
      log_error(new Error('[ERROR] illegal srcUsbEther is found.'));
      return null;
    }
    if (!Array.isArray(srcUsbEther.ipInfoArray)) {
      log_error(new TypeError('[ERROR] srcUsbEther.ipInfoArray is not Array.' + srcUsbEther.ipInfoArray));
      return null;
    }
    for (let i = 0; i < srcUsbEther.ipInfoArray.length; i++) {
      const ipInfo = srcUsbEther.ipInfoArray[i];
      if (!ipInfo) {
        log_error(new Error('[ERROR] illegal ipInfo is found.'));
        continue;
      }
      if (ipInfo.family === 'IPv6') {
        return {
          adapterName: srcUsbEther.adapterName,  // Mac で IPv6 Direct するのに必要
          serialNumber: srcUsbEther.serialNumber,
          ipV6: ipInfo
        };
      }
    }
    return null;
  }

  /**
   * Win/Macへの対応デバイスのUSB接続/切断の検出を停止する。
   * 
   * @param {function()} callback
   *     Win/Macへの対応デバイスのUSB接続/切断の検出処理の終了時に呼び出されるcallback。
   */
  stop(callback) {
    this.verifyCallback_(callback);
    const self = this;

    Promise.resolve()
      .then(function onFullfilled() {
        return new Promise(function (resolve, reject) {
          self.usbEtherEnumerator_.stopEnumerating(function(){
            resolve();
          });
        });
      })
      .then(function onFullfilled() {
        return new Promise(function (resolve, reject) {
          self.serialPortController_.stopSwithingUsbMode(function(){
            resolve();
          });
        });
      })
      .then(function onFullfilled() {
        return new Promise(function (resolve, reject) {
          self.usbDetector_.stop(function onStop(error) {
            if (error) {
              log_error(error);
            }
            resolve();
          });
        });
      })
      .then(function onFullfilled() {
        self.usbEtherMap_.clear();
        callback(null);
      });
  }

  /**
   * 現在Win/MacにUSB(RNDIS/CDC-ECM)で接続されているDPTの一覧を作成する。
   * 
   * @private
   * @param {Array.<Object>} usbEtherArray
   *     USB(RNDIS/CDC-ECM)の一覧
   */
  initUsbEtherMap_(usbEtherArray) {
    if (!Array.isArray(usbEtherArray)) {
      log_error(new TypeError('[ERROR] usbEtherArray is not Array. [' + typeof usbEtherArray + ']'));
      return;
    }

    const usbEtherMap = new Map();
    for (let i = 0; i < usbEtherArray.length; i++) {
      const usbEther = usbEtherArray[i];
      if (!usbEther) {
        log_error(new Error('[ERROR] illegal usbEther is found.'));
        continue;
      }
      const key = this.genUsbEtherMapKey_(usbEther);
      usbEtherMap.set(key, usbEther);
    }
    this.usbEtherMap_ = usbEtherMap;
  }

  /**
   * 現在Win/MacにUSB(RNDIS/CDC-ECM)で接続されているDPTの一覧を更新し、差分を通知する。
   * 
   * @private
   */
  updateUsbEtherMap_() {
    // 現在Win/MacにUSB(RNDIS/CDC-ECM)で接続されているDPTの一覧を取得する
    const _self = this;
    this.usbEtherEnumerator_.startEnumerating(this.usbDetector_, function onEnum(error, usbEtherArray) {
      if (error) {
        log_error(error);
        return;
      }
      log_debug(usbEtherArray);

      // 現在のUSB(RNDIS/CDC-ECM)で接続されているDPTの一覧(Map)を作成する
      const newUsbEtherMap = new Map();
      for (let i = 0; i < usbEtherArray.length; i++) {
        const usbEther = usbEtherArray[i];
        if (!usbEther) {
          log_error(new Error('[ERROR] illegal usbEther is found.'));
          continue;
        }
        const key = _self.genUsbEtherMapKey_(usbEther);
        newUsbEtherMap.set(key, usbEther);

        // 前回確認時からの増加分については、追加を通知する
        if (!_self.usbEtherMap_.has(key)) {
          const retUsbEther = _self.convertToReturnUsbEther_(usbEther);
          _self.emit(EMIT_EVENT_ADD + EMIT_DELIMITER + EMIT_DEVICE_ETHER, retUsbEther);
          _self.emit(EMIT_EVENT_ADD, retUsbEther);
        }
      }

      for (let key of _self.usbEtherMap_.keys()) {
        // 前回確認時からの減少分については、削除を通知する
        if (!newUsbEtherMap.has(key)) {
          const usbEther = _self.usbEtherMap_.get(key);
          const retUsbEther = _self.convertToReturnUsbEther_(usbEther);
          _self.emit(EMIT_EVENT_REMOVE + EMIT_DELIMITER + EMIT_DEVICE_ETHER, retUsbEther);
          _self.emit(EMIT_EVENT_REMOVE, retUsbEther);
        }
      }

      // 現在のUSB(RNDIS/CDC-ECM)で接続されているDPTの一覧(Map)を保存する
      _self.usbEtherMap_ = newUsbEtherMap;
    });
  }

  /**
   *  usbEtherMap_ 用の key を生成する。
   * 
   * @private
   * @param {Object} usbEther
   *     USB(RNDIS/CDC-ECM)のオブジェクト
   */
  genUsbEtherMapKey_(usbEther) {
    return 'USB' + ':VID_' + usbEther.vendorId + ':PID_' + usbEther.productId + ':SN_' + usbEther.serialNumber.toUpperCase();
  }

  /**
   * DPTのUSB(シリアルポート)がPC/Macに接続された場合に呼び出される。
   * シリアルコマンドを発行して、USB(RNDIS/CDC-ECM)に切り替える。
   * 
   * @private
   * @param {Object} device
   *     USB接続/切断のイベントが発生したデバイスの情報。
   */
  onUsbSerialPortAdded_(usbDevice) {
    log_debug('USB(CDC-ACM) Added: ' + JSON.stringify(usbDevice));

    // USB(シリアルポート)の接続を通知する
    const retUsbSerial = this.convertToReturnUsbSerial_(usbDevice);
    this.emit(EMIT_EVENT_ADD + EMIT_DELIMITER + EMIT_DEVICE_SERIAL, retUsbSerial);
    this.emit(EMIT_EVENT_ADD, retUsbSerial);

    // USB(RNDIS/CDC-ECM)に切り替える
    this.serialPortController_.startSwitchingUsbMode(this.usbDetector_, function onSwitched(error) {
      if (error) {
        log_error(error);
        return;
      }
    });
  }

  /**
   * DPTのUSB(シリアルポート)がPC/Macから切断された場合に呼び出される。
   * 
   * @private
   * @param {Object} usbSerial
   *     USB接続/切断のイベントが発生したデバイスの情報。
   */
  onUsbSerialPortRemoved_(usbDevice) {
    log_debug('USB(CDC-ACM) Removed: ' + JSON.stringify(usbDevice));

    // USB(シリアルポート)の切断を通知する
    const retUsbSerial = this.convertToReturnUsbSerial_(usbDevice);
    this.emit(EMIT_EVENT_REMOVE + EMIT_DELIMITER + EMIT_DEVICE_SERIAL, retUsbSerial);
    this.emit(EMIT_EVENT_REMOVE, retUsbSerial);
  }

  /**
   * DPTのUSB(Ethernet)がPC/Macに接続された場合に呼び出される。
   * USB(RNDIS/CDC-ECM)の一覧を取得する。
   * 
   * @private
   * @param {Object}  device
   *     USB接続/切断のイベントが発生したデバイスの情報。
   */
  onUsbEthernetAdded_(usbDevice) {
    log_debug('USB(RNDIS/CDC-ECM) Added: ' + JSON.stringify(usbDevice));

    // USB(RNDIS/CDC-ECM)の一覧の増減を確認して通知する
    this.updateUsbEtherMap_();
  }

  /**
   * DPTのUSB(Ethernet)がPC/Macから切断された場合に呼び出される。
   * USB(RNDIS/CDC-ECM) の一覧を取得する。
   * 
   * @private
   * @param {Object} usbEther
   *     USB接続/切断のイベントが発生したデバイスの情報。
   */
  onUsbEthernetRemoved_(usbDevice) {
    log_debug('USB(RNDIS/CDC-ECM) Removed: ' + JSON.stringify(usbDevice));

    // USB(RNDIS/CDC-ECM) の切断は即座に検出する
    if (usbDevice) {
      const key = this.genUsbEtherMapKey_(usbDevice);
      if (this.usbEtherMap_.has(key)) {
        const usbEther = this.usbEtherMap_.get(key);
        const retUsbEther = this.convertToReturnUsbEther_(usbEther);
        this.emit(EMIT_EVENT_REMOVE + EMIT_DELIMITER + EMIT_DEVICE_ETHER, retUsbEther);
        this.emit(EMIT_EVENT_REMOVE, retUsbEther);
        this.usbEtherMap_.delete(key);
        return;
      }
    }

    // 上記で切断を検出できなかった場合には、USB(RNDIS/CDC-ECM)の一覧の増減を確認して通知する
    this.updateUsbEtherMap_();
  }

  /**
   * Win/Macに"USB Serial Port (CDC-ACM)"として接続されている対応デバイスを列挙する。
   *
   * @param {function(?Error, Array.<Object>)} callback
   *  	  検索結果として対応デバイスの情報を通知するcallback
   */
  enumUsbSerialPorts(callback) {
    this.verifyCallback_(callback);
    const _self = this;
    this.usbDetector_.enumUsbSerialPorts(function onEnumed(error, usbSerialPortArray){
      if (error) {
        log_error(error);
        callback(error);
        return;
      }
      const usbSerialArray = _self.convertToReturnUsbSerialArray_(usbSerialPortArray);
      callback(null, usbSerialArray);
    });
  }

  /**
   * Win/Macに"USB Ethernet (RNDIS/CDC-ECM)"として接続されている対応デバイスを列挙する。
   *
   * @param {function(?Error, Array.<Object>)} callback
   *  	  検索結果として対応デバイスの情報を通知するcallback
   */
  enumUsbEthernet(callback) {
    this.verifyCallback_(callback);
    const _self = this;
    this.usbEtherEnumerator_.startEnumerating(this.usbDetector_, function onEnumed(error, usbEthernetArray){
      if (error) {
        log_error(error);
        callback(error);
        return;
      }
      const usbEtherArray = _self.convertToReturnUsbEtherArray_(usbEthernetArray);
      callback(null, usbEtherArray);
    });
  }
}


/**
 * Win/Macに"USB Serial Port (CDC-ACM)"として対応デバイスが接続された際のイベント。
 * 
 * @event add:serialport
 * @param {{serialNumber:string}} device
 */
  
/**
 * Win/Macから"USB Serial Port (CDC-ACM)"として接続されていた対応デバイスが切断された際のイベント。
 * 
 * @event remove:serialport
 * @param {{serialNumber:string}} device
 */

/**
 * Win/Macに"USB Ethernet (RNDIS/CDC-ECM)"として対応デバイスが接続された際のイベント。
 * 
 * @event add:ethernet
 * @param {{serialNumber:string, ipV6:{{address:string, netmask:string, family:string, mac:string, scopeid:number, internal:boolean}}}} device
 */
  
/**
 * Win/Macから"USB Ethernet (RNDIS/CDC-ECM)"として接続されていた対応デバイスが切断された際のイベント。
 * 
 * @event remove:ethernet
 * @param {{serialNumber:string, ipV6:{{address:string, netmask:string, family:string, mac:string, scopeid:number, internal:boolean}}}} device
 */


/**
 * @export DptUsbInitiator
 */
module.exports = new DptUsbInitiator();
