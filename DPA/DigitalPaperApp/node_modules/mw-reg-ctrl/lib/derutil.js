/**
	derutil.js
	
	creator:	kan.k
	created:	[2016-05-16 18:34:15+09:00]
	modified:	[2016-05-16 18:34:15+09:00]
	description:
	Snipets
*/

function decodeDer(data, start, end, nest) {
  var pos = start;
  if ( typeof nest === 'undefined' ) {
    nest = 0;
  }
  while ( pos < end ) {
    var tagByte = data.charCodeAt(pos);
    console.log('data[0x%s] = tag: 0x%s', pos.toString(16), tagByte.toString(16));
    var tagClass = tagByte & 0xc0;
    var tagNumber = tagByte & 0x1f;
    var tagPC = tagByte & 0x20;
    pos++;
    var lenByte = data.charCodeAt(pos); 
    console.log('data[0x%s] = len: 0x%s', pos.toString(16), lenByte.toString(16));
    var lenMSB = lenByte & 0x80;
    var lenValue = lenByte & 0x7f;
    var actLen = 0;
    if ( lenMSB === 0x80 ) {
      if ( lenValue === 0x7f ) {
        console.error('resreved!');
        return 0;
      }
      for ( var i = 0; i < lenValue; i++ ) {
        pos++;
        var lenFollowingByte = data.charCodeAt(pos);
        console.log('data[0x%s] = lenf: 0x%s', pos.toString(16), lenFollowingByte.toString(16));
        actLen = actLen * 0x100 + lenFollowingByte;
      }
    } else {
      // Definite, short
      actLen = lenValue;
    }

    ///////////////////////////////////
    /// Data
    ///////////////////////////////////
    pos++;
    if ( tagNumber === 0x10 ) {
      console.log(nest, ' tag sequence for ', actLen);
      decodeDer(data, pos, pos + actLen, nest + 1);
    } else if ( tagNumber === 0x06 ) {
      console.log(nest, ' tag OBJECT IDENTIFIER for ', actLen);
      console.log('tag 0x%s, len=0x%s: ', tagNumber.toString(16), actLen.toString(16));
      console.log('raw: ', data.slice(pos, pos+actLen));
      console.log('hex: ', Buffer.from(data.slice(pos, pos+actLen)).toString('hex'));
    } else if ( tagNumber === 0x02 ) {
      console.log(nest, ' tag INTEGER for ', actLen);
      console.log('tag 0x%s, len=0x%s: ', tagNumber.toString(16), actLen.toString(16));
      console.log('raw: ', data.slice(pos, pos+actLen));
      console.log('hex: ', Buffer.from(data.slice(pos, pos+actLen)).toString('hex'));
    } else if ( tagNumber === 0x03 ) {
      console.log(nest, ' tag BIT STRING for ', actLen);
      console.log('tag 0x%s, len=0x%s: ', tagNumber.toString(16), actLen.toString(16));
      console.log('raw: ', data.slice(pos, pos+actLen));
      console.log('hex: ', Buffer.from(data.slice(pos, pos+actLen)).toString('hex'));
    } else {
      console.log(nest, ' tag unknoown for ', actLen);
      console.log('tag 0x%s, len=0x%s: ', tagNumber.toString(16), actLen.toString(16));
      console.log('raw: ', data.slice(pos, pos+actLen));
      console.log('hex: ', Buffer.from(data.slice(pos, pos+actLen)).toString('hex'));
    }
    pos += actLen;
  }
}

function decodeDERDHP(data) {
  // [2016-04-29 00:25:45+09:00] kan.k: [TODO] Replace to collect one
  return data.slice(0x1b, 0x1b + 0x100);
}

function encodeDERDHP(data, baseder) {
  // [2016-04-29 00:25:45+09:00] kan.k: [TODO] Replace to collect one
  return baseder.slice(0, 0x1b) + data + baseder.slice(0x1b + 0x100);
}
