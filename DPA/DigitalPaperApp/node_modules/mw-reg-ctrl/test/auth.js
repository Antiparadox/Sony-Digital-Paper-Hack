/**
	auth.js
	
	creator:	kan.k
	created:	[2016-05-13 18:11:07+09:00]
	modified:	[2016-05-16 18:29:06+09:00]
	description:
	Hoge
	
*/

var crypto = require('crypto');
var request = require('request');

var atob = require('atob');
var btoa = require('btoa');

// var DEVICE_ID = 'ef48ee96-aa72-454d-9132-13115e7324fe';
var DEVICE_ID = '5648ee96-aa72-454d-9132-13115e7f3ee4';

var lastData = null;
var lastNonce = null;
var lastResponse = null;

function auth(baseUrl) {
  request.get(baseUrl + '/auth/nonce/' + DEVICE_ID, function(err, response, body) {
	if ( err ) {
	  console.error(err);
	  return;
	}

    var res = JSON.parse(body);
	// var nonce = atob(res.nonce);
	var nonce = res.nonce;
	lastNonce = nonce;
	console.log('got nonce : ', nonce);

    fs.readFile('private/altair.key', function(err, data) {
	  if ( err ) {
		console.error(err);
		return;
	  }

	  lastData = data;

	  var nonceSigned = signNonce(nonce, data);
	  // var sign = crypto.createSign('RSA-SHA256');
	  // sign.update(nonce);
	  // var nonceSigned = sign.sign(data, 'binary');
	  
	  var authInfo = {
		"client_id" : DEVICE_ID,
		"nonce_signed" : btoa(nonceSigned)
	  };

	  console.log('attempt to put /auth');
      console.log(JSON.stringify(authInfo, null, "  "));

	  request.put({
		url: baseUrl + '/auth',
		json: authInfo
	  }, function(err, response, body) {
		if ( err ) {
		  console.error(err);
		  return;
		}

		console.log('succeed?');
		console.log('response: ', response);
		lastResponse = response;
		console.log('body: ', body);
	  });
	});
  });
}


function signNonce(nonce, key) {
  var sign = crypto.createSign('RSA-SHA256');
  sign.update(nonce);
  var nonceSigned = sign.sign(key, 'binary');
  return nonceSigned;
  // var buf = Buffer.from(nonce, 'binary');
  // var nonceSigned = crypto.privateEncrypt(key, buf);
  // return nonceSigned.toString('binary');
}
