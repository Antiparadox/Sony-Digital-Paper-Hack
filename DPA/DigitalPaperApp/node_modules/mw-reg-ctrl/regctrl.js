/*
    regctrl.js
    
    created:    [2016-04-25 12:09:27+09:00]
    modified:   [2016-06-03 23:37:03+09:00]
    description:
    Registration Control
    
*/

'use strict';

// const discovery = require('./lib/discovery');
// const portfwdr = require('./lib/portfwdr');

// const discovery = require('mw-discovery-ctrl');
const portfwdr = require('mw-port-fwdr').createPortFwdr();
const mwe = require('mw-error');
const selector = require('mw-conn-selector');

const registrar = require('./lib/registrar');

/** @exports mw-reg-ctrl */
const regctrl = exports;

/**
 * Set callback to receive PIN input request.
 *
 * PIN入力のためのCallbackを登録する。
 *
 * @param {function(number, function(?Error, string))} fnPinRequest A
 *   callback function to input PIN. This callback must call another
 *   callback to return to continue registration process.
 *   <br>
 *   PIN入力のためのコールバック関数。このコールバック関数は、登録プ
 *   ロセスを再開するために、渡されたコールバック関数を呼び出す。
 */
regctrl.setOnPinRequest =  function(fnPinRequest) {
  return registrar.setOnPinRequest(fnPinRequest);
};

/**
 * Set callback to wait before cert install.
 * <br>
 * Certを保存する前のCallbackを登録する。
 *
 * @param {function(number, function(?Error, string))}
 *   fnBeforeStoreCert A callback function.
 *   <br>
 *   コールバック関数を設定する。
 */
regctrl.setOnBeforeStoreCert = function(fnBeforeStoreCert) {
  return registrar.setOnBeforeStoreCert(fnBeforeStoreCert);
};

/**
 * Start registration process for specified device.
 * <br>
 * 指定されたデバイスに対してデバイス登録プロセスを開始する。
 *
 * @param {string} deviceId A deviceId of the device to register.
 *   <br>
 *   登録対象のデバイスのデバイスID
 *
 * @param {function(?Error)} callback A callback function to receive
 *   result of registration process. When registration failed with
 *   any issue, a error object will be returned. When succeed, null
 *   will be returned at first argument.
 *   <br>
 *   登録処理の結果を受信するためのCallback。何らかの問題で、登録が失
 *   敗した場合には、エラーオブジェクトが返る。成功時には第一引数は、
 *   nullが返る。
 */
regctrl.registerDevice = function(deviceId, callback) {
  // var deviceList = discovery.getDeviceList();
  // var device = selectDevice(deviceId, phyType, deviceList);
  var device = selector.selectConnection(deviceId);
  if ( device === null ) {
    callback(mwe.genError(mwe.E_MW_DEVICE_NOT_FOUND, 'Designated device is not found.'));
    return;
  }
  portfwdr.start(device.remoteIp, device.remotePort, null, function(err) {
    if ( err ) {
      callback(err);
      return;
    }
    
    var baseUrl = 'http://' + portfwdr.getHost() + ':' + portfwdr.getHttpPort().toString();
    registrar.register(deviceId, baseUrl, callback);
  });
  // [2016-05-19 22:43:25+09:00] kan.k: [TODO] Host part need to be
  // changed to electron host name.
  return;
};

/**
 * Unregister a device from this Altair.
 * Even after this call, the registration information in the Deneb
 * will still remains.
 * <br>
 * デバイスの登録をAltairから削除する。
 * この呼び出しが成功しても、Deneb側の登録情報は残る。
 *
 * @param {function(err)} callback A callback function to receive
 *   result.
 */
regctrl.unregisterDevice = function(targetDeviceId, callback) {
  return store.removeServerCert(targetDeviceId, callback);
};

