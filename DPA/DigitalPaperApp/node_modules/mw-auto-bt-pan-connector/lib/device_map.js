'use strict';

const DeviceType = require('./define').DeviceType;

const VENDOR_ID_SOURCE_DENEB = 2;
const VENDOR_ID_DENEB = 1356;
const PRODUCT_ID_DENEB = 3045;

var itemMap = {};

var updateItemEnabled = false;

var DeviceMap = {
    createItem: function (btAddress) {
        return {
            btAddress: btAddress,
            name: undefined,
            vendorIdSource: undefined,
            vendorId: undefined,
            productId: undefined,
            found: false,
            paired: false,
            connected: false
        };
    },

    clearAllFlags: function () {
        for (var btAddress in itemMap) {
            var item = itemMap[btAddress];
            item.found = false;
            item.paired = false;
            item.connected = false;
        }
    },

    clearAllPairedFlags: function () {
        for (var btAddress in itemMap) {
            itemMap[btAddress].paired = false;
        }
    },

    clearAllItems: function() {
        itemMap = {};
    },

    enableUpdateItem: function () {
        updateItemEnabled = true;
    },

    disableUpdateItem: function () {
        updateItemEnabled = false;
    },

    updateItem: function (eventData) {
        if (updateItemEnabled) {
            var infoList = eventData;
            if (!Array.isArray(infoList)) {
                infoList = [eventData];
            }

            for (var info of infoList) {
                if ((info) && (typeof info === 'object')) {
                    var btAddress = info.btAddress;
                    if ((btAddress) && (typeof btAddress === 'string')) {
                        if (!itemMap.hasOwnProperty(btAddress)) {
                            itemMap[btAddress] = DeviceMap.createItem(btAddress);
                        }

                        var item = itemMap[btAddress];
                        
                        if ((!item.name) && (info.name)) {
                            item.name = info.name;
                        }

                        if ((!item.vendorIdSource) && (info.deviceId) && (info.deviceId.vendorIdSource)) {
                            item.vendorIdSource = info.deviceId.vendorIdSource;
                        }

                        if ((!item.vendorId) && (info.deviceId) && (info.deviceId.vendorId)) {
                            item.vendorId = info.deviceId.vendorId;
                        }

                        if ((!item.productId) && (info.deviceId) && (info.deviceId.productId)) {
                            item.productId = info.deviceId.productId;
                        }

                        if ((info.paired === true) || (info.paired === false)) {
                            item.paired = info.paired;
                        }

                        if ((info.found === true) || (info.found === false)) {
                            item.found = info.found;
                        }

                        if ((info.connected === true) || (info.connected === false)) {
                            item.connected = info.connected;
                        }
                    }
                }
            }
        }
    },

    findDevice: function(btAddress) {
        var item = itemMap[btAddress];
        if (item) {
            return item;
        }

        return undefined;
    },

    lookupDeviceType: function(btAddress) {
        var item = itemMap[btAddress];
        if (item) {
            if ((item.vendorIdSource) && (item.vendorIdSource !== VENDOR_ID_SOURCE_DENEB)) {
                return DeviceType.OTHER;
            }

            if ((item.vendorId) && (item.vendorId !== VENDOR_ID_DENEB)) {
                return DeviceType.OTHER;
            }

            if ((item.productId) && (item.productId !== PRODUCT_ID_DENEB)) {
                return DeviceType.OTHER;
            }

            if ((item.vendorIdSource === VENDOR_ID_SOURCE_DENEB) && (item.vendorId === VENDOR_ID_DENEB) && (item.productId === PRODUCT_ID_DENEB)) {
                return DeviceType.DENEB;
            }
        }

        return DeviceType.UNKNOWN;
    },

    canConnect: function (btAddress) {
        var item = itemMap[btAddress];
        if (item) {
            return ((item.paired === true) && (item.found === true) && (item.connected === false));
        }

        return false;
    },

    getList: function () {
        var list = [];

        for (var index in itemMap) {
            list.push(itemMap[index]);
        }

        return list;
    },

    getDenebList: function () {
        return DeviceMap.getList().filter(function (item) {
            return (DeviceMap.lookupDeviceType(item.btAddress) === DeviceType.DENEB);
        });
    },

    getPairedDenebList: function () {
        return DeviceMap.getDenebList().filter(function (item) {
            return (item.paired === true);
        });
    },

    getConnectableDenebList: function () {
        return DeviceMap.getDenebList().filter(function (item) {
            return ((item.paired === true) && (item.found === true));
        });    
    },

    getConnectableDenebListEx: function (name) {
        if ((typeof name === 'string') && (name.length === 7)) {
            var pattern1 = 'DPT-RP1_' + name;
            var pattern2 = 'DPT-CP1_' + name;
            return DeviceMap.getConnectableDenebList().filter(function (item) {
                return ((typeof item.name === 'string') && ((item.name.indexOf(pattern1) >= 0) || (item.name.indexOf(pattern2) >= 0)));
            });
        } else {
            return [];
        }
    },

    getConnectedDenebList: function () {
        return DeviceMap.getDenebList().filter(function (item) {
            return (item.connected === true);
        });    
    },

    getZombieList: function () {
        return DeviceMap.getList().filter(function (item) {
            return ((item.paired === false) && (item.connected === true));
        });    
    }
};

module.exports = DeviceMap;
