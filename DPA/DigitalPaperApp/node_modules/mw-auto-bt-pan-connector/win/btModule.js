'use strict';


const logE = require('debug')('mw-auto-bt-pan-connector:win:btModule:error');
const logD = require('debug')('mw-auto-bt-pan-connector:win:btModule:debug');

class BtModule {
    constructor() {
        this.locked = false;
        this.bruteForceDisconnecting = false;
        this.btPairingObject = null;
        this.btPanObject = null;
    }

    isLocked() {
        return this.locked;
    }

    lock() {
        this.locked = true;
    }

    unlock() {
        this.locked = false;
    }

    isInitialized() {
        return ((this.btPairingObject !== null) && (this.btPanObject !== null));
    }

    _internalInitialize() {
        try {
            const NativeModule = require('./nativeModule');
            this.btPairingObject = new NativeModule.BtPairingModule.SBluetoothPairing();
            this.btPanObject = new NativeModule.BtPanModule.SBluetoothPan();
            logD('Initialized Bluetooth objects.');
        } catch (ex) {
            logE('Failed to initialize Bluetooth objects. %o', ex);
            this.btPairingObject = null;
            this.btPanObject = null;
        }  
    }

    _internalDestroy() {
        try {
            if (this.btPairingObject) {
                this.btPairingObject.destroy();
                logD('Destroyed Bluetooth Pairing object.')
            }
        } catch (ex) {
            logE('Failed to destroy Bluetooth Pairing object. %o', ex);
        }

        try {
            if (this.btPanObject) {
                this.btPanObject.destroy();
                logD('Destroyed Bluetooth Pan object.')
            }
        } catch (ex) {
            logE('Failed to destroy Bluetooth Pan object. %o', ex);
        }

        this.btPairingObject = null;
        this.btPanObject = null;
    }

    initialize() {
        logD('initialize() - Start.');

        if (!this.isInitialized() && !this.isLocked()) {
            this.lock();
            this._internalInitialize();
            this.unlock();
            logD('initialize() - OK.');
            return true;
        } else {
            logD('initialize() - Failed.');
            return false;
        }
    }

    reinitialize() {
        logD('reinitialize() - Start.');

        if (!this.isLocked()) {
            this.lock();
            this._internalDestroy();
            this._internalInitialize();
            this.unlock();
            logD('reinitialize() - OK.');
            return true;
        } else {
            logD('reinitialize() - Failed.');
            return false;
        }
    }

    destroy(callback) {
        var self = this;

        if (typeof callback !== 'function') {
            throw new Error('Invalid argument.');
        }

        var destroyRetryCount = 30;  // 3 秒間 (100ms * 30回)、_internalDestroy() が成功するまで試します。
       
        var destroyer = function () {
            if (!self.isLocked()) {
                self.lock();
                self._internalDestroy();
                // destroy() メソッド呼び出し以降は、
                // initialize() メソッドも reinitialize() メソッドも機能させたくないので、
                // ロック状態のままにしておきます。
                // つまり、アンロックしません。
                //self.unlock();
                callback(undefined);
            } else {
                logD('destroyRetryCount: ' + destroyRetryCount.toString());
                if (--destroyRetryCount >= 0) {
                    setTimeout(destroyer, 100);
                } else {
                    callback('Busy.');
                }
            }
        };

        setTimeout(destroyer, 0);
    }

    startScanDevice(callback) {
        var self = this;

        if (typeof callback !== 'function') {
            throw new Error('Invalid aragument.');
        }

        if (self.isInitialized()) {
            if (!self.isLocked()) {
                self.lock();

                logD('startScanDevice() - Start.');

                var classFilter = [self.btPairingObject.S_BT_PAIRING_DEVICE_CLASS.S_BT_PAIRING_DEVICE_CLASS_PHONE_SMART | self.btPairingObject.S_BT_PAIRING_DEVICE_CLASS.S_BT_PAIRING_DEVICE_CLASS_SERVICE_NETWORKING];
                var serviceFilter = ['00001116-0000-1000-8000-00805F9B34FB'];

                self.btPairingObject.startScanDevice(classFilter, serviceFilter, function (error) {
                    self.unlock();

                    if (!error) {
                        logD('startScanDevice() - OK.');
                    } else {
                        logD('startScanDevice() - Failed. %o', error);
                    }

                    callback(error);
                });
            } else {
                callback('Busy.');
            }
        } else {
            callback('Not initialized.');
        }
    }

    stopScanDevice(callback) {
        var self = this;

        if (typeof callback !== 'function') {
            throw new Error('Invalid aragument.');
        }

        if (self.isInitialized()) {
            if (!self.isLocked()) {
                self.lock();

                logD('stopScanDevice() - Start.');

                self.btPairingObject.stopScanDevice(function (error) {
                    self.unlock();

                    if (!error) {
                        logD('stopScanDevice() - OK.');
                    } else {
                        logD('stopScanDevice() - Failed. %o', error);
                    }

                    callback(error);
                });
            } else {
                callback('Busy.');
            }
        } else {
            callback('Not initialized.');
        }
    }

    findNetworks(callback) {
        var self = this;

        if (typeof callback !== 'function') {
            throw new Error('Invalid aragument.');
        }

        if (self.isInitialized()) {
            if (!self.isLocked()) {
                self.lock();

                logD('findNetworks() - Start.');
                
                self.btPanObject.findNetworks(function (error, networkInfoList) {
                    self.unlock();

                    if (!error) {
                        logD('findNetworks() - OK.'); 
                    } else {
                        logD('findNetworks() - Failed. %o', error);
                    }

                    callback(error, networkInfoList);
                });
            } else {
                callback('Busy.');
            }
        } else {
            callback('Not initialized.');
        }
    }

    findConnectedNetwork(callback) {
        var self = this;

        if (typeof callback !== 'function') {
            throw new Error('Invalid aragument.');
        }

        if (self.isInitialized()) {
            if (!self.isLocked()) {
                self.lock();

                logD('findConnectedNetwork() - Start.');

                self.btPanObject.findConnectedNetwork(function (error, networkInfo) {
                    self.unlock();

                    if (!error) {
                        logD('findConnectedNetwork() - OK.');
                    } else {
                        logD('findConnectedNetwork() - Failed. %o', error);
                    }

                    callback(error, networkInfo);
                });
            } else {
                callback('Busy.');
            }
        } else {
            callback('Not initialized.');
        }
    }

    /**
     * PAN切断
     * @param {string} btAddress 
     * @param {function(optError)} callback エラー時のみエラープロパティが第一引数にセットされる
     */
    disconnectFromNetwork(btAddress, callback) {
        var self = this;

        if (typeof btAddress !== 'string' || typeof callback !== 'function') {
            throw new Error('Invalid argument.');
        }
        
        if (self.isInitialized()) {
            self.btPanObject.disconnectFromNetwork(btAddress, function (error) {
                if (!error) {
                    logD('disconnectFromNetwork(%s) - OK.', btAddress);
                    callback();
                } else {
                    logD('disconnectFromNetwork(%s) - Failed. %o', btAddress, error);
                    callback(error);
                }
            });
        }
        else {
            callback('Not initialized.');
        }
    }

    connectToNetworkEx(btAddressToConnect, btAddressToDisconnect, callback) {
        var self = this;

        if ((typeof btAddressToConnect !== 'string') || (typeof btAddressToDisconnect !== 'string') || (typeof callback !== 'function')) {
            throw new Error('Invalid aragument.');
        }

        if (self.isInitialized()) {
            if (!self.isLocked()) {
                self.lock();

                var done = function (error, functionName) {
                    self.unlock();
                    callback(error, functionName);
                };

                var innerConnect = function () {
                    logD('connectToNetwork(%s) - Start.', btAddressToConnect);
                    self.btPanObject.connectToNetwork(btAddressToConnect, self.btPanObject.S_BT_PAN_ROLE.S_BT_PAN_ROLE_NAP, function (error) {
                        if (!error) {
                            logD('connectToNetwork(%s) - OK.', btAddressToConnect);
                            done();
                        } else {
                            logD('connectToNetwork(%s) - Failed. %o', btAddressToConnect, error);
                            done(error, 'connectToNetwork');
                        }
                    });
                };

                var innerDisconnect = function () {
                    logD('disconnectFromNetwork(%s) - Start.', btAddressToDisconnect);
                    self.btPanObject.disconnectFromNetwork(btAddressToDisconnect, function (error) {
                        if (!error) {
                            logD('disconnectFromNetwork(%s) - OK.', btAddressToDisconnect);
                            setTimeout(innerConnect, 1000 * 3);
                        } else {
                            logD('disconnectFromNetwork(%s) - Failed. %o', btAddressToDisconnect, error);
                            done(error, 'disconnectFromNetwork');
                        }
                    });
                };

                if (btAddressToDisconnect) {
                    innerDisconnect(btAddressToDisconnect);
                } else {
                    innerConnect(btAddressToConnect);
                }
            } else {
                logD('connectToNetworkEx() - Busy.');
                callback('Busy.');
            }
        } else {
            callback('Not initialized.');
        }
    }

    bruteForceDisconnectFromAllDenebs(denebList, callback) {
        var self = this;

        if (!Array.isArray(denebList) || (typeof callback !== 'function')) {
            throw new Error('Invalid aragument.');
        }

        if (self.isInitialized()) {
            if (!self.bruteForceDisconnecting) {
                self.bruteForceDisconnecting = true;

                var finisher = function () {
                    self.unlock();
                    self.bruteForceDisconnecting = false;
                    callback();
                };

                var disconnector = function () {
                    if (denebList.length > 0) {
                        var deneb = denebList.shift();
                        self.btPanObject.disconnectFromNetwork(deneb.btAddress, function (error) {
                            if (!error) {
                                logD('[FORCEDISCON] disconnectFromNetwork(%s) - OK.', deneb.btAddress);
                            } else {
                                logD('[FORCEDISCON] disconnectFromNetwork(%s) - Failed. %o', deneb.btAddress, error);
                            }

                            setTimeout(disconnector, 100);
                        });
                    } else {
                        finisher();
                    }
                };

                var locker = function () {
                    if (!self.isLocked()) {
                        self.lock();
                        disconnector();                    
                    } else {
                        setTimeout(locker, 100);
                    }
                }
                
                locker();
            } else {
                logD('[FORCEDISCON] Now disconnectiong.');
                callback('Now disconnecting.');
            }
        } else {
            callback('Not initialized.');
        }
    }

    setDeviceRegisteredEventListener(listener) {
        if (typeof listener !== 'function') {
            throw new Error('Invalid aragument.');
        }

        if (this.isInitialized()) {
            this.btPairingObject.on('deviceRegistered', listener);
        }
    }

    clearAllDeviceRegisteredEventListeners(listener) {
        if (this.isInitialized()) {
            this.btPairingObject.removeAllListeners('deviceRegistered');
        }
    }

    setDeviceUnregisteredEventListener(listener) {
        if (typeof listener !== 'function') {
            throw new Error('Invalid aragument.');
        }

        if (this.isInitialized()) {
            this.btPairingObject.on('deviceUnregistered', listener);
        }
    }

    clearAllDeviceUnregisteredEventListeners(listener) {
        if (this.isInitialized()) {
            this.btPairingObject.removeAllListeners('deviceUnregistered');
        }
    }

    setDeviceFoundEventListener(listener) {
        if (typeof listener !== 'function') {
            throw new Error('Invalid aragument.');
        }

        if (this.isInitialized()) {
            this.btPairingObject.on('deviceFound', listener);
        }
    }

    clearAllDeviceFoundEventListeners(listener) {
        if (this.isInitialized()) {
            this.btPairingObject.removeAllListeners('deviceFound');
        }
    }

    setDeviceLostEventListener(listener) {
        if (typeof listener !== 'function') {
            throw new Error('Invalid aragument.');
        }

        if (this.isInitialized()) {
            this.btPairingObject.on('deviceLost', listener);
        }
    }

    clearAllDeviceLostEventListeners(listener) {
        if (this.isInitialized()) {
            this.btPairingObject.removeAllListeners('deviceLost');
        }
    }

    setDeviceStatusChangedEventListener(listener) {
        if (typeof listener !== 'function') {
            throw new Error('Invalid aragument.');
        }

        if (this.isInitialized()) {
            this.btPairingObject.on('deviceChanged', listener);
        }
    }

    clearAllDeviceStatusChangedEventListeners(listener) {
        if (this.isInitialized()) {
            this.btPairingObject.removeAllListeners('deviceChanged');
        }
    }

    setPanStatusChangedEventListener(listener) {
        if (typeof listener !== 'function') {
            throw new Error('Invalid aragument.');
        }

        if (this.isInitialized()) {
            this.btPanObject.on('statusChanged', listener);
        }
    }

    clearAllPanStatusChangedEventListeners(listener) {
        if (this.isInitialized()) {
            this.btPanObject.removeAllListeners('statusChanged');
        }
    }
};


module.exports.BtModule = BtModule;
