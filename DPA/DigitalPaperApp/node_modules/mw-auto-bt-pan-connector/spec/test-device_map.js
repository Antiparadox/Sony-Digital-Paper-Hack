const expect = require('chai').expect;
const DeviceMap = require('../lib/device_map');

const Define = require('../lib/define');

describe('DeviceMap', function() {

    var VENDOR_ID = 1356, PRODUCT_ID = 3045, VENDOR_ID_SOURCE = 2;

    describe('#getMap', () => {
        it('should return map', () => {
            var map = DeviceMap.getMap();
            expect(map).to.be.a('object');
        });
    });

    describe('#getList', () => {
        it('should return list even if it is empty', () => {
            var list = DeviceMap.getList();
            expect(list).to.be.a('array');
        })
    });

    describe('#getPairedDenebList', () => {
        it('should return list even if it is empty', () => {
            var list = DeviceMap.getPairedDenebList();
            expect(list).to.be.a('array');
        })
    });

    describe('#updateDevice(DeviceInfo)', () => {
        var deviceInfo = {
            btAddress: "",
            name: "",
            paired: false,
            connected: false,
            remembered: false,
            classOfDevice: 0,
            lastSeen: new Date(),
            lastUsed: new Date(),
            reserved: {},
            deviceId: {
                vendorId: "0",
                productId: "0",
                vendorIdSource: 0,
            }
        };

        it('should do nothing if btAddress field is not found', () => {
            DeviceMap.updateDevice({});
            expect(Object.keys(DeviceMap.getMap()).length).equals(0);
        });
        it('should do nothing if btAddress is empty', () => {
            DeviceMap.updateDevice(deviceInfo);
            expect(Object.keys(DeviceMap.getMap()).length).equals(0);
        });
        it('should do nothing if deviceId is null or nothing', () => {
            DeviceMap.updateDevice({
                btAddress: "aaaaaaaa",
                deviceId: null
            });
            expect(DeviceMap.getList().length).equals(0);
            DeviceMap.updateDevice({
                btAddress: "aaaaaaaa",
                deviceId: undefined
            });
            expect(DeviceMap.getList().length).equals(0);
        });
        it('should do nothing if vid and pid are zero value', () => {
            DeviceMap.updateDevice(deviceInfo);
            expect(Object.keys(DeviceMap.getMap()).length).equals(0);
        });
        it('should add data if it not exists yet', () => {
            deviceInfo.btAddress = "xx:xx:xx:xx:xx:xx";
            deviceInfo.deviceId.vendorId = 1234;
            deviceInfo.deviceId.productId = 9876;
            DeviceMap.updateDevice(deviceInfo);
            expect(Object.keys(DeviceMap.getMap()).length).equals(1);
            expect(Object.keys(DeviceMap.getMap())[0]).equals(deviceInfo.btAddress);
        });
        it ('should update data if it already exists', () => {
            // 現状
            expect(Object.keys(DeviceMap.getMap()).length).equals(1);
            expect(DeviceMap.getMap()[deviceInfo.btAddress].name).equals(deviceInfo.name);
            // 更新
            deviceInfo.name = "xxxxxxxxxxxxxxxxxxxxx";
            DeviceMap.updateDevice(deviceInfo);
            expect(Object.keys(DeviceMap.getMap()).length).equals(1);
            expect(DeviceMap.getMap()[deviceInfo.btAddress].name).equals(deviceInfo.name);
        });
        it('should copy data deeply', () => {
            // 現状
            var currentData = JSON.parse(JSON.stringify(deviceInfo));
            expect(Object.keys(DeviceMap.getMap()).length).equals(1);
            expect(DeviceMap.getMap()[currentData.btAddress].name).equals(currentData.name);
            // 元データ変更、削除
            deviceInfo.name = "changed name";
            expect(DeviceMap.getMap()[currentData.btAddress].name).equals(currentData.name);
            expect(DeviceMap.getMap()[currentData.btAddress].name).not.equals(deviceInfo.name);
            deviceInfo.deviceId.productId = 99999999;
            expect(DeviceMap.getMap()[currentData.btAddress].deviceId.productId).equals(currentData.deviceId.productId);
            expect(DeviceMap.getMap()[currentData.btAddress].deviceId.productId).not.equals(deviceInfo.deviceId.productId);
        });
    });
    describe('#clear', () => {
        it('should clear map', () => {
            // 現状
            expect(Object.keys(DeviceMap.getMap()).length).equals(1);
            //
            DeviceMap.clear();
            expect(Object.keys(DeviceMap.getMap()).length).equals(0);
        });
    });
    describe('#getMap(true), #getList(true), #getPairedDenebList()', () => {

        var deviceInfo = {
            btAddress: "xx:xx:xx:xx:xx:xx",
            deviceId: {
                vendorId: "1234",
                productId: "9876"
            }
        };

        var len = 4;
        var pairedAddr; // pairedのBTアドレス退避用

        before(()=>{
            // reset
            DeviceMap.clear();
            expect(Object.keys(DeviceMap.getMap()).length).equals(0);

            // リスト作る
            for (var i = 0; i < len; ++i) {
                // 半分だけDenebにする
                var info = JSON.parse(JSON.stringify(deviceInfo));
                // BTアドレスを一意にする
                info.btAddress += ":" + ('00'+i).slice(-2);
                if (i%2 == 0) {
                    info.deviceId.vendorId = VENDOR_ID;
                    info.deviceId.productId = PRODUCT_ID;
                    info.deviceId.vendorIdSource = VENDOR_ID_SOURCE;

                    // 最初のだけ paired = true にしておく
                    if (!pairedAddr) {
                        info.paired = true;
                        pairedAddr = info.btAddress;
                    }
                }
                DeviceMap.updateDevice(info);
            }
        });

        describe('#getMap(true)', () => {
            it('should return map in which only deneb exists if args[0] is true', () => {

                // 通常ならlen件数
                expect(Object.keys(DeviceMap.getMap()).length).equals(len);
                // true 指定で len の半分
                expect(Object.keys(DeviceMap.getMap(true)).length).equals(len/2);
                // Denebだけ取得して確認
                var denebs = DeviceMap.getMap(true);
                for (var btAddr in denebs) {
                    var info = denebs[btAddr];
                    expect(info.deviceId.vendorId).eq(VENDOR_ID);
                    expect(info.deviceId.productId).eq(PRODUCT_ID);
                    expect(info.deviceId.vendorIdSource).eq(VENDOR_ID_SOURCE);
                }
            });
        });

        describe('#getList(true)', () => {
            it('should return list in which only deneb exists if args[0] is true', () => {
                // 通常ならlen件数
                expect(DeviceMap.getList().length).equals(len);
                // true 指定で len の半分
                expect(DeviceMap.getList(true).length).equals(len/2);
                // Denebだけ取得して確認
                var denebs = DeviceMap.getList(true);
                for (var i = 0; i < denebs.length; ++i) {
                    var info = denebs[i];
                    expect(info.deviceId.vendorId).eq(VENDOR_ID);
                    expect(info.deviceId.productId).eq(PRODUCT_ID);
                    expect(info.deviceId.vendorIdSource).eq(VENDOR_ID_SOURCE);
                }
            });
        });

        describe('#getPairedDenebList()', () => {
            it('should return list in which only paired deneb exists', () => {
                // 通常ならlen件数
                expect(DeviceMap.getList().length).equals(len);
                // paired は１件だけ
                expect(DeviceMap.getPairedDenebList().length).eq(1);
                expect(DeviceMap.getPairedDenebList()[0].btAddress).eq(pairedAddr);
            });
        });
    });
    describe('#updateNetworkInfo( [NetworkInfo] )', () => {
        var networkInfo = {
            btAddress: "xx:xx:xx:xx:xx:xx",
            networkName: "PAN network name",
            interfaceId: "my interface id of string",
            containerId: "my container id of string",
            availableRoles: 0,
            status: 0,
        };

        var datas = [], dataLen = 10;
        
        it('should do nothing if invalid args', () => {
            DeviceMap.clear();
            expect(Object.keys(DeviceMap.getMap()).length).equals(0);

            DeviceMap.updateNetworkInfo([]);
            expect(Object.keys(DeviceMap.getMap()).length).equals(0);

            DeviceMap.updateNetworkInfo(["any string"]);
            expect(Object.keys(DeviceMap.getMap()).length).equals(0);

            DeviceMap.updateNetworkInfo([{ key: "" }]);
            expect(Object.keys(DeviceMap.getMap()).length, "btAddress is required").equals(0);
        });
        it('should add data if it not exists yet', () => {
        
            // create datas
            for (var i = 0; i < dataLen; ++i) {
                var data = JSON.parse(JSON.stringify(networkInfo));
                data.btAddress = ("00" + i).slice(-2) + ':' + networkInfo.btAddress;
                datas.push(data);
            }

            DeviceMap.updateNetworkInfo(datas);
            expect(Object.keys(DeviceMap.getMap()).length).equals(dataLen);

            // check data
            var map = DeviceMap.getMap();
            for (var i = 0; i < dataLen; ++i) {
                var
                btAddress = datas[i].btAddress,
                mapData = map[btAddress];
                expect(mapData).to.a('object').not.null;
                for (var prop in datas[i]) {
                    expect(mapData[prop], `prop: ${prop}`).eq(datas[i][prop])
                }
            }
        });
        it('should update data if it already exists', () => {
            // change data,
            var map = DeviceMap.getMap();
            var newStatusBase = 9;
            for (var i = 0; i < dataLen; ++i) {
                var
                btAddress = datas[i].btAddress,
                mapData = map[btAddress],
                newStatus = newStatusBase++;

                expect(mapData.status).not.eq(newStatus);
                datas[i].status = newStatus;
            }

            DeviceMap.updateNetworkInfo(datas);
            for (var i = 0; i < dataLen; ++i) {
                var
                btAddress = datas[i].btAddress,
                mapData = map[btAddress];

                expect(mapData.status).eq(datas[i].status);
            }
        });
        it('should add even if args[0] is not array and is a object having btAddress', () => {
            DeviceMap.clear();
            expect(Object.keys(DeviceMap.getMap()).length).equals(0);

            DeviceMap.updateNetworkInfo(networkInfo);
            expect(Object.keys(DeviceMap.getMap()).length).equals(1);
            expect(DeviceMap.getMap()[networkInfo.btAddress].networkName).eq(networkInfo.networkName);
        });
    });
    describe('#lookupDevice(btAddress)', () => {
        var deviceInfo = {
            btAddress: "xx:xx:xx:xx:xx:xx",
            deviceId: {
                vendorId: "1234",
                productId: "9876",
                vendorIdSource: 0,
            }
        };

        it('should DeviceType.OTHER if not deneb', () => {
            // clear map
            DeviceMap.clear();
            expect(Object.keys(DeviceMap.getMap()).length).equals(0);

            DeviceMap.updateDevice(deviceInfo);
            expect(DeviceMap.lookupDevice(deviceInfo.btAddress), "other").eq(Define.DeviceType.OTHER);
        });
        it('should DeviceType.DENEB if deneb', () => {
            deviceInfo.deviceId.vendorId = VENDOR_ID;
            deviceInfo.deviceId.productId = PRODUCT_ID;
            deviceInfo.deviceId.vendorIdSource = VENDOR_ID_SOURCE;
            DeviceMap.updateDevice(deviceInfo);
            expect(DeviceMap.lookupDevice(deviceInfo.btAddress), "DENEB").eq(Define.DeviceType.DENEB);
        });
        it('should DeviceType.UNKNOWN if not exists', () => {
            expect(DeviceMap.lookupDevice("ff:ff:ff:ff:ff:ff"), "UNKNOWN").eq(Define.DeviceType.UNKNOWN);
        })
        it('should DeviceType.UNKNOWN if deviceId field not exists', () => {
            var info = {
                btAddress: "12:23:34:45:56:67"
            };
            DeviceMap.updateDevice(info);
            expect(DeviceMap.lookupDevice(info.btAddress), "UNKNOWN").eq(Define.DeviceType.UNKNOWN);
        })
    });
    describe('#getDenebCount', () => {
        var deviceInfo = {
            btAddress: "",
            name: "",
            paired: false,
            connected: false,
            remembered: false,
            classOfDevice: 0,
            lastSeen: new Date(),
            lastUsed: new Date(),
            reserved: {},
            deviceId: {
                vendorId: "1234",
                productId: "9876",
                vendorIdSource: 0,
            }
        };

        it('should return count of deneb bluetooth device in map', () => {
            // clear map
            DeviceMap.clear();
            expect(Object.keys(DeviceMap.getMap()).length).equals(0);

            // 半分だけDenebになるようにデータを作る
            var dataLen = 10;
            for (var i = 0; i < dataLen; ++i) {
                var data = JSON.parse(JSON.stringify(deviceInfo));
                data.btAddress = ("00" + i).slice(-2) + ':' + data.btAddress;
                if (i %2) {
                    data.deviceId.vendorId = VENDOR_ID;
                    data.deviceId.productId = PRODUCT_ID;
                    data.deviceId.vendorIdSource = VENDOR_ID_SOURCE;
                }
                DeviceMap.updateDevice(data);
            }

            expect(Object.keys(DeviceMap.getMap()).length).equals(dataLen);
            expect(DeviceMap.getDenebCount()).eq(dataLen/2);
        })
    })
});