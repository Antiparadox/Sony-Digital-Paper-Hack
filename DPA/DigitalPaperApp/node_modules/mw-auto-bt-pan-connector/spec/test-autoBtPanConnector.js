const expect = require('chai').expect;
const sinon = require('sinon');

const EventEmitter = require('events').EventEmitter;
const BtModuleMod = require(`../${process.platform === 'win32' ? 'win' : 'mac'}/btModule`);

const BtPairingModule = require('bt-pairing-mw' + process.env.TEST_MODULE_POSTFIX);
const BtPanModule = require('bt-pan-mw' + process.env.TEST_MODULE_POSTFIX);

var AutoBtPanConModule;// = require('../index');
const DeviceMap = require('../lib/device_map');
const DeviceType = require('../lib/define').DeviceType;
const ErrorMgr = require('../lib/error_manager');

if (process.platform === 'win32') {
    describe('AutoBtPanConnector @Windows', function() {
        var stubs = {}, AutoBtPanCon = null;

        before(() => {
            stubs.DeviceMap = {
                getList: sinon.stub(DeviceMap, "getList"),
                getPairedDenebList: sinon.stub(DeviceMap, "getPairedDenebList"),
                lookupDevice: sinon.stub(DeviceMap, "lookupDevice"),
                updateNetworkInfo: sinon.spy(),
            };

            stubs.ErrorMgr = {
                convertForAltair: sinon.stub(ErrorMgr, "convertForAltair", (error)=>{ return error }),
            };

            stubs.BtModule = {
                initialize: sinon.spy(BtModuleMod.BtModule.prototype, "initialize"),
                startScanDevice: sinon.stub(BtModuleMod.BtModule.prototype, "startScanDevice"),
                //connect(btAddressToConnect, btAddressToDisconnect, callback)
                connectToNetworkEx: sinon.stub(BtModuleMod.BtModule.prototype, "connectToNetworkEx"),
                isAvailable: sinon.stub(BtModuleMod.BtModule.prototype, "isAvailable"),
                findNetworks: sinon.stub(BtModuleMod.BtModule.prototype, "findNetworks"),
                
                setDeviceRegisteredEventListener: sinon.stub(BtModuleMod.BtModule.prototype, "setDeviceRegisteredEventListener"),
                setDeviceUnregisteredEventListener: sinon.stub(BtModuleMod.BtModule.prototype, "setDeviceUnregisteredEventListener"),
                setDeviceFoundEventListener: sinon.stub(BtModuleMod.BtModule.prototype, "setDeviceFoundEventListener"),
                setDeviceLostEventListener: sinon.stub(BtModuleMod.BtModule.prototype, "setDeviceLostEventListener"),
                setPanStatusChangedEventListener: sinon.stub(BtModuleMod.BtModule.prototype, "setPanStatusChangedEventListener"),
            };


            AutoBtPanConModule = require('../index');

            stubs.EventEmitter = {
                on: sinon.spy(EventEmitter.prototype, "on"),
                once: sinon.spy(EventEmitter.prototype, "once"),
                removeListener: sinon.spy(EventEmitter.prototype, "removeListener"),
                emit: sinon.spy(EventEmitter.prototype, "emit"),
            };

            stubs.BtPairing = {};
            stubs.BtPairing.startScanDevice = sinon.stub();
            stubs.BtPairing.on = sinon.stub();
            stubs.BtPairing.SBluetoothPairing = sinon.stub(BtPairingModule, "SBluetoothPairing", function() {
                this.startScanDevice = stubs.BtPairing.startScanDevice;
                this.on = stubs.BtPairing.on;
                this.S_BT_PAIRING_DEVICE_CLASS = {
                    S_BT_PAIRING_DEVICE_CLASS_PHONE_SMART: 999
                };
            });

            stubs.BtPan = {};
            stubs.BtPan.findConnectedNetwork = sinon.stub();
            stubs.BtPan.findNetworks = sinon.stub();
            stubs.BtPan.on = sinon.stub();
            stubs.BtPan.SBluetoothPan = sinon.stub(BtPanModule, "SBluetoothPan", function() {
                this.findConnectedNetwork = stubs.BtPan.findConnectedNetwork;
                this.findNetworks = stubs.BtPan.findNetworks;
                this.on = stubs.BtPan.on;
            });
        });
        after(() => {
            // restore all of spys
            for (var mod in stubs) {
                if (typeof stubs[mod].restore === 'function') {
                    stubs[mod].restore();
                }
                else if (typeof stubs[mod] === 'object') {
                    for (var func in stubs[mod]) {
                        if (typeof stubs[mod][func].restore === 'function')
                        stubs[mod][func].restore();
                    }
                }
            }
            // restore sinon.stubs
            sinon.restore();
        });

        describe('#getInstance', () => {
            it ('should instanciate once', () => {
                expect(AutoBtPanCon).null;
                
                // まだ呼ばれてないはず
                expect(stubs.BtModule.startScanDevice.calledOnce).false;
                expect(stubs.BtModule.findNetworks.calledOnce).false;
                expect(stubs.DeviceMap.updateNetworkInfo.callCount).eq(0);

                AutoBtPanCon = AutoBtPanConModule.getInstance();
                expect(AutoBtPanCon).not.null;
                expect(AutoBtPanConModule.getInstance(), "getInstance should return a singleton").eq(AutoBtPanCon);
            });
            // 以下、↑のステップ前提
            it ('should start scanning', () => {
                expect(stubs.BtModule.startScanDevice.withArgs(sinon.match.func).calledOnce).true;
                // scanから戻ったらfindNetwork呼ばれる
                stubs.BtModule.startScanDevice.getCall(0).args[0]();
                expect(stubs.BtModule.findNetworks.withArgs(sinon.match.func).calledOnce).true;
                // findNetwork の結果をマップに入れて接続を試みる →　接続のテストはこのあとで。
                // stubs.BtModule.findNetworks.getCall(0).args[0](null, []);
                // expect(stubs.DeviceMap.updateNetworkInfo.callCount).eq(1);
            });
            it('should add event handlers', () => {
                expect(stubs.BtModule.setDeviceFoundEventListener.withArgs(sinon.match.func).calledOnce).true;
                expect(stubs.BtModule.setDeviceLostEventListener.withArgs(sinon.match.func).calledOnce).true;
                expect(stubs.BtModule.setDeviceRegisteredEventListener.withArgs(sinon.match.func).calledOnce).true;
                expect(stubs.BtModule.setDeviceUnregisteredEventListener.withArgs(sinon.match.func).calledOnce).true;
                expect(stubs.BtModule.setPanStatusChangedEventListener.withArgs(sinon.match.func).calledOnce).true;
            });
            it('新規デバイスのstatusChanged が受け取れるようにするため、paired と scan-found で api :: findNetworks を呼ぶ', ()=>{
                // paired=setDeviceRegisteredEventListener
                var
                pairedHandler = stubs.BtModule.setDeviceRegisteredEventListener.getCall(0).args[0],
                foundHandler = stubs.BtModule.setDeviceFoundEventListener.getCall(0).args[0];

                // チェック対象のSpyリセット
                stubs.BtModule.findNetworks.reset();

                // 各イベントハンドラの呼び出しでfindNetworksが呼ばれることを確認
                pairedHandler({});
                expect(stubs.BtModule.findNetworks.withArgs(sinon.match.func).callCount).eq(1);

                foundHandler({});
                expect(stubs.BtModule.findNetworks.withArgs(sinon.match.func).callCount).eq(2);
            })
        });
        describe('#emit()', () => {
            it ('should', () => {
                var eventName = "MyEvent", value = 999;
                AutoBtPanCon.emit(eventName, value);
                expect(stubs.EventEmitter.emit.calledWith(eventName, value)).to.true;
            })
        });
        describe('#on()', () => {
            it ('should', () => {
                var handler = sinon.spy(), eventName = "MyEvent";
                AutoBtPanCon.on(eventName, handler);
                expect(stubs.EventEmitter.on.calledWith(eventName, handler)).to.true;
                
                // イベント発行
                expect(handler.calledOnce, "handler not yet before event").false;
                AutoBtPanCon.emit(eventName);
                expect(handler.calledOnce, "handler called after event fired").true;

                // ２回目のイベント
                AutoBtPanCon.emit(eventName);
                expect(handler.callCount, "handler called again").eq(2);
            });
        });
        describe('#once()', () => {
            it ('should ', () => {
                var handler = sinon.spy(), eventName = "MyEvent";
                AutoBtPanCon.once(eventName, handler);
                expect(stubs.EventEmitter.once.calledWith(eventName, handler)).to.be.true;
                
                // イベント発行
                expect(handler.calledOnce, "handler not yet before event").false;
                AutoBtPanCon.emit(eventName);
                expect(handler.calledOnce, "handler called after event fired").true;

                // ２回目のイベント
                AutoBtPanCon.emit(eventName);
                expect(handler.callCount, "handler not called again").eq(1);
            });
        });
        describe('#removeListener ()', () => {
            it ('should ', () => {
                var handler = sinon.spy(), eventName = "MyEvent";
                AutoBtPanCon.removeListener(eventName, handler);
                expect(stubs.EventEmitter.removeListener.calledWith(eventName, handler)).to.be.true;
                
                //TODO
                // イベント発行
                // AutoBtPanCon.on(eventName)
                // expect(handler.calledOnce, "handler not yet before event").false;
                // AutoBtPanCon.emit(eventName);
                // expect(handler.calledOnce, "handler called after event fired").true;
            });
        });
        describe('#isAvailable()', ()=>{
            after( ()=>{
                stubs.BtModule.isAvailable.returns(true);
            });
            
            it('should return true if btModule return true.', () => {
                stubs.BtModule.isAvailable.returns(true);
                expect(AutoBtPanCon.isAvailable()).true;
            });
            it('should return false if btModule return false.', () => {
                stubs.BtModule.isAvailable.returns(false);
                expect(AutoBtPanCon.isAvailable()).false;
            });
        });
        describe('#isConnectedToDeneb()', ()=>{
            var callback = sinon.spy();

            var networkInfo = {
                btAddress: 'xx:xx:xx:xx:xx:xx:xx'
            };

            afterEach(()=>{
                callback.reset();
                stubs.BtPan.findConnectedNetwork.reset();
            });

            it('throws an exception if invalid callback is passed', () => {
                var ex = null;
                try {
                    AutoBtPanCon.isConnectedToDeneb();
                }
                catch( _ex ) {
                    ex = _ex;
                }
                finally {
                    expect(ex).not.null;
                }
            });

            it('should pass error to callback if findConnectedNetwork failed', ()=> {
                AutoBtPanConModule.getInstance().isConnectedToDeneb(callback);

                expect(stubs.BtPan.findConnectedNetwork.callCount).eq(1)
                expect(stubs.BtPan.findConnectedNetwork.withArgs(sinon.match.func).calledOnce).true;
                
                var callbackFromFind = stubs.BtPan.findConnectedNetwork.args[0][0];
                var err = {};
                callbackFromFind(err);
                expect(callback.withArgs(err).calledOnce).true;
            });
            it('should return true if DeviceType returned from lookupDevice is DENEB', () => {
                // lookupDevice が DENEB を返すようにスタブ化
                stubs.DeviceMap.lookupDevice.withArgs(networkInfo.btAddress).returns(DeviceType.DENEB);
                // 呼び出し
                AutoBtPanConModule.getInstance().isConnectedToDeneb(callback);
                var callbackFromFind = stubs.BtPan.findConnectedNetwork.args[0][0];
                callbackFromFind(null, networkInfo);
                // return trueを確認
                expect(callback.withArgs(undefined, true).calledOnce).true;
            });
            it('should return true if DeviceType returned from lookupDevice is OTHER', () => {
                // lookupDevice が OTHER を返すようにスタブ化
                stubs.DeviceMap.lookupDevice.withArgs(networkInfo.btAddress).returns(DeviceType.OTHER);
                // 呼び出し
                AutoBtPanConModule.getInstance().isConnectedToDeneb(callback);
                var callbackFromFind = stubs.BtPan.findConnectedNetwork.args[0][0];
                callbackFromFind(null, networkInfo);
                // return falseを確認
                expect(callback.withArgs(undefined, false).calledOnce).true;
            });
            it('should return true if DeviceType returned from lookupDevice is UNKNOWN', () => {
                // lookupDevice が UNKNOWN を返すようにスタブ化
                stubs.DeviceMap.lookupDevice.withArgs(networkInfo.btAddress).returns(DeviceType.UNKNOWN);
                // 呼び出し
                AutoBtPanConModule.getInstance().isConnectedToDeneb(callback);
                var callbackFromFind = stubs.BtPan.findConnectedNetwork.args[0][0];
                callbackFromFind(null, networkInfo);
                // return falseを確認
                expect(callback.withArgs(undefined, false).calledOnce).true;
            });
        });
        xdescribe('#getPairedDenebCount()', () => {
            it ('should return count of paired deneb', () => {
                stubs.DeviceMap.getPairedDenebList.returns([]);
                expect(AutoBtPanCon.getPairedDenebCount()).eq(0);

                stubs.DeviceMap.getPairedDenebList.returns([{paired:false}, {paired:true}]);
                expect(AutoBtPanCon.getPairedDenebCount()).eq(1);

                stubs.DeviceMap.getPairedDenebList.returns([{paired:true}, {paired:true}]);
                expect(AutoBtPanCon.getPairedDenebCount()).eq(2);
            });
        });
        describe('#enableAutoConnect()', () => {
            it ('should call findConnectedNetwork if getPairedDenebCount returned 1', () => {
                stubs.DeviceMap.getPairedDenebList.returns([{paired:true}]);
                stubs.BtPan.findConnectedNetwork.reset();

                AutoBtPanCon.enableAutoConnect();
                expect(stubs.BtPan.findConnectedNetwork.calledOnce).true;
            });
            it ('should call findConnectedNetwork if getPairedDenebCount returned over 1', () => {
                stubs.DeviceMap.getPairedDenebList.returns([{paired:true}, {paired:true}]);
                stubs.BtPan.findConnectedNetwork.reset();

                AutoBtPanCon.enableAutoConnect();
                expect(stubs.BtPan.findConnectedNetwork.callCount).eq(0);
            });
            // enableAutoConnect は毎回oldPairedDenebCountをリセットするので、呼べば必ずpairedDenebCountChangedが飛ぶ
            it('should fire pairedDenebCountChanged event because counter is reset to zero every time', () => {
                stubs.EventEmitter.emit.reset();

                stubs.DeviceMap.getPairedDenebList.returns([{paired:true}]);
                AutoBtPanCon.enableAutoConnect();
                expect(stubs.EventEmitter.emit.callCount).eq(1);
                
                stubs.DeviceMap.getPairedDenebList.returns([{paired:true}]);
                AutoBtPanCon.enableAutoConnect();
                expect(stubs.EventEmitter.emit.callCount).eq(2);
            })
        });
        // resume は enabled で findConnectedNetwork が呼ばれるので enableAutoConnect の後にテストする
        // 逆のことを disableAutoConnect でもテストする
        describe('#resume()', () => {
            it ('should call findConnectedNetwork if auto connection is enabled', () => {
                // 自動接続をONにしておく
                AutoBtPanCon.enableAutoConnect();

                // findConnectedNetwork が呼ばれる条件：deneb & paired が getList できること
                stubs.DeviceMap.getPairedDenebList.returns([{paired:true}]);

                // 関連のSpyをリセットしておく
                stubs.BtPan.findConnectedNetwork.reset();

                // resume を呼ぶと findConnectedNetwork が呼ばれるはず
                AutoBtPanCon.resume();
                expect(stubs.BtPan.findConnectedNetwork.calledOnce).true;
            });
        });
        // disableAutoConnect を呼んだあとに resume しても findConnectedNetwork は呼ばれない
        describe('#disableAutoConnect()', () => {
            it ('should not let resume() call findConnectedNetwork', () => {
                // いったんONにして findConnectedNetwork が呼ばれることを確認する（↑でしてるが）
                AutoBtPanCon.enableAutoConnect();
                stubs.DeviceMap.getPairedDenebList.returns([{paired:true}]);
                stubs.BtPan.findConnectedNetwork.reset();
                AutoBtPanCon.resume();
                expect(stubs.BtPan.findConnectedNetwork.calledOnce).true;

                // OFFにして確認
                stubs.BtPan.findConnectedNetwork.reset();
                AutoBtPanCon.disableAutoConnect();
                AutoBtPanCon.resume();
                expect(stubs.BtPan.findConnectedNetwork.calledOnce).false;
            });
        });

        // 接続処理の確認。public enableAutoConnect|doConnect から呼ばれることを利用してテストする。
        // BtModule.connectToNetworkEx, connectStart イベントの発行を使って確認する。
        describe('#connectNormally(), #connectForcedly()', () => {
            var
            // 接続対象のDeneb
            targetNetworkInfo = {
                btAddress: "ab:cd:df",
                paired: true
            },
            // 接続対象外のDevice
            anotherNetworkInfo = {
                btAddress: "123456789"
            };

            before( () => {
                //.getCall(0).args[0]
                // lookupDevice が DENEB を返すようにスタブ化
                // stubs.DeviceMap.lookupDevice.withArgs(anotherNetworkInfo.btAddress).returns(DeviceType.DENEB);
            });

            beforeEach( () => {
                // 検査用Spyを毎回リセットする
                stubs.EventEmitter.emit.reset();
                stubs.BtModule.connectToNetworkEx.reset();//nowConnecting=falseに
                stubs.BtPan.findConnectedNetwork.reset();

                // 接続条件：BTペアリング済みDenebが１台取得できるようにする
                stubs.DeviceMap.getPairedDenebList.returns([{paired:true}]);
            });

            describe('#connectNormally called from enableAutoConnect()', ()=>{
                it('should not call connect() if deneb was already connected', () => {
                    // lookupDevice が DENEB を返すようにスタブ化
                    stubs.DeviceMap.lookupDevice.withArgs(anotherNetworkInfo.btAddress).returns(DeviceType.DENEB);

                    // enableを呼び、findConnectedNetworkへのコールバックを取得・呼び出し
                    AutoBtPanCon.enableAutoConnect();
                    expect(stubs.BtPan.findConnectedNetwork.calledOnce).true;
                    stubs.BtPan.findConnectedNetwork.getCall(0).args[0](anotherNetworkInfo);

                    expect(stubs.BtModule.connectToNetworkEx.callCount).eq(0);
                    expect(stubs.EventEmitter.emit.withArgs('connectStart').callCount).eq(0);
                });
                it('should not call connect() if no paired device', () => {
                    // enableを呼び、findConnectedNetworkへのコールバックを取得・呼び出し
                    AutoBtPanCon.enableAutoConnect();
                    expect(stubs.BtPan.findConnectedNetwork.calledOnce).true;
                    
                    // BTペアリング済みDenebが0台返るようにしてからコールバック
                    stubs.DeviceMap.getPairedDenebList.returns([]);
                    stubs.BtPan.findConnectedNetwork.getCall(0).args[0]();

                    expect(stubs.BtModule.connectToNetworkEx.callCount, "BTペアリング済みDenebがなければ接続しない").eq(0);
                    expect(stubs.EventEmitter.emit.withArgs('connectStart').callCount).eq(0);
                });
                it('should not call connect() if there are many devices', () => {
                    // enableを呼び、findConnectedNetworkへのコールバックを取得・呼び出し
                    AutoBtPanCon.enableAutoConnect();
                    expect(stubs.BtPan.findConnectedNetwork.calledOnce).true;

                    // BTペアリング済みDenebが2台返るようにしてからコールバック
                    stubs.DeviceMap.getPairedDenebList.returns([{paired:true}, {paired:true}]);
                    stubs.BtPan.findConnectedNetwork.getCall(0).args[0]();

                    expect(stubs.BtModule.connectToNetworkEx.callCount, "BTペアリング済みDenebが複数あれば接続しない").eq(0);
                    expect(stubs.EventEmitter.emit.withArgs('connectStart').callCount).eq(0);
                });
                it('should call connect() and fire connectStart event if a paired device exists', () => {
                    // enableを呼び、findConnectedNetworkへのコールバックを取得・呼び出し
                    AutoBtPanCon.enableAutoConnect();
                    expect(stubs.BtPan.findConnectedNetwork.calledOnce).true;

                    // BTペアリング済みDenebが1台返るようにしてからコールバック
                    stubs.DeviceMap.getPairedDenebList.returns([targetNetworkInfo]);
                    stubs.BtPan.findConnectedNetwork.getCall(0).args[0]();

                    expect(stubs.BtModule.connectToNetworkEx.withArgs(
                        targetNetworkInfo.btAddress, sinon.match.any, sinon.match.func).callCount,
                        "bt-pan-mw :: connect 呼び出しを確認"
                    ).eq(1);

                    expect(stubs.EventEmitter.emit.withArgs('connectStart').callCount, "connectStart イベント発火の確認").eq(1);

                    // nowConnecting=falseじゃないと接続されない。
                    // connect()が呼ばれると必ず true なので、connectからのコールバックを呼ぶこと。
                    stubs.BtModule.connectToNetworkEx.getCall(0).args[2]();
                });
                it('should fire connectEnd event after connected', () => {
                    // enableを呼び、findConnectedNetworkへのコールバックを取得・呼び出し
                    AutoBtPanCon.enableAutoConnect();
                    expect(stubs.BtPan.findConnectedNetwork.calledOnce).true;
                    // BTペアリング済みDenebが1台返るようにしてからコールバック
                    stubs.DeviceMap.getPairedDenebList.returns([targetNetworkInfo]);
                    stubs.BtPan.findConnectedNetwork.getCall(0).args[0]();

                    // connectへのコールバックを取得し、正常・エラーで呼び出して確認
                    expect(stubs.BtModule.connectToNetworkEx.callCount).eq(1);
                    var callback = stubs.BtModule.connectToNetworkEx.getCall(0).args[2];

                    stubs.EventEmitter.emit.reset();
                    callback(null);//No Error
                    expect(stubs.EventEmitter.emit.withArgs('connectEnd').callCount).eq(1);

                    stubs.EventEmitter.emit.reset();
                    callback({message:"error"});//Error
                    expect(stubs.EventEmitter.emit.withArgs('connectEnd').callCount).eq(1);
                });
            });
            describe('#connectForcedly called from enableAutoConnect()', ()=>{
                it('should always fire connectStart and connectEnd events even if not calling connect()', () => {
                    expect(stubs.EventEmitter.emit.withArgs('connectStart').callCount).eq(0);
                    expect(stubs.EventEmitter.emit.withArgs('connectEnd').callCount).eq(0);
                    AutoBtPanCon.doConnect();
                    expect(stubs.EventEmitter.emit.withArgs('connectStart').callCount).eq(1);

                    // findConnectedNetworkへのコールバックを取得・呼び出してEndを確認
                    expect(stubs.BtPan.findConnectedNetwork.calledOnce).true;
                    var callback = stubs.BtPan.findConnectedNetwork.getCall(0).args[0];

                    // lookupDevice が DENEB を返すようにスタブ化
                    stubs.DeviceMap.lookupDevice.withArgs("").returns(DeviceType.DENEB);
                    callback();
                    expect(stubs.EventEmitter.emit.withArgs('connectEnd').callCount).eq(1);

                    // BTペアリング済みDenebが0台返るようにしてからコールバック
                    stubs.DeviceMap.lookupDevice.withArgs("").returns(DeviceType.UNKNOWN);
                    stubs.DeviceMap.getPairedDenebList.returns([]);
                    stubs.EventEmitter.emit.reset();
                    callback();
                    expect(stubs.EventEmitter.emit.withArgs('connectEnd').callCount).eq(1);

                    // BTペアリング済みDenebが2台返るようにしてからコールバック
                    stubs.DeviceMap.getPairedDenebList.returns([{},{}]);
                    stubs.EventEmitter.emit.reset();
                    callback();
                    expect(stubs.EventEmitter.emit.withArgs('connectEnd').callCount).eq(1);

                    // エラーでコールバック
                    stubs.EventEmitter.emit.reset();
                    callback({message:"some error"});
                    expect(stubs.EventEmitter.emit.withArgs('connectEnd').callCount).eq(1);
                });
                it('should call connect without disconnection', () => {
                    expect(stubs.EventEmitter.emit.withArgs('connectStart').callCount).eq(0);
                    expect(stubs.EventEmitter.emit.withArgs('connectEnd').callCount).eq(0);
                    AutoBtPanCon.doConnect();
                    expect(stubs.EventEmitter.emit.withArgs('connectStart').callCount).eq(1);

                    // findConnectedNetworkへのコールバックを取得・呼び出してEndを確認
                    var callback = stubs.BtPan.findConnectedNetwork.getCall(0).args[0];

                    // BTペアリング済みDenebが1台返るようにしてからコールバック
                    stubs.DeviceMap.getPairedDenebList.returns([targetNetworkInfo]);
                    callback();

                    // connect確認
                    expect(stubs.BtModule.connectToNetworkEx.withArgs(
                        targetNetworkInfo.btAddress,
                        "",
                        sinon.match.func
                    ).callCount)
                    .eq(1);

                    // connectコールバックでEndイベント発火
                    expect(stubs.EventEmitter.emit.withArgs('connectEnd').callCount).eq(0);
                    stubs.BtModule.connectToNetworkEx.getCall(0).args[2]();
                    expect(stubs.EventEmitter.emit.withArgs('connectEnd').callCount).eq(1);

                    // connectからエラーがあってもEnd発火
                    stubs.EventEmitter.emit.reset();
                    stubs.BtModule.connectToNetworkEx.getCall(0).args[2]({message:"some error"});
                    expect(stubs.EventEmitter.emit.withArgs('connectEnd').callCount).eq(1);
                });
                it('should fire connectBusy event when connecting already', () => {
                    // 接続までは↑と同じなのでテスト省略
                    AutoBtPanCon.doConnect();
                    stubs.DeviceMap.getPairedDenebList.returns([targetNetworkInfo]);
                    stubs.BtPan.findConnectedNetwork.getCall(0).args[0]();
                    expect(stubs.BtModule.connectToNetworkEx.calledOnce).true;
                    
                    // connect が呼ばれて戻ってきてない状態なので、また呼ぶとBusyになるはず
                    expect(stubs.EventEmitter.emit.withArgs('connectBusy').callCount).eq(0);
                    AutoBtPanCon.doConnect();
                    expect(stubs.EventEmitter.emit.withArgs('connectBusy').callCount).eq(1);
                })
            });
        });


        describe('#suspend()', () => {
            it ('should ', () => {
            });
        });
    });
}//if(win)