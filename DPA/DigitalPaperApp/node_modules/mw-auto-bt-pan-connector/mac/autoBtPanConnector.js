'use strict';


const EventEmitter = require('events').EventEmitter;
const emitter = new EventEmitter();

const ErrorManager = require('../lib/error_manager');


//////////////// 非公開メソッド ////////////////


/**
 * 遅延関数呼び出し
 */
var asyncCall = function (func) {
    if (typeof func !== 'function') {
        throw new Error('Invalid aragument.');
    }

    setTimeout(func, 0);
};


//////////////// 公開クラス ////////////////


class AutoBtPanConnector {
    /**
     * コンストラクタ
     */
    constructor() {
    }


    /**
     * オブジェクトを破棄します。
     */
    destroy(callback) {
        if (typeof callback !== 'function') {
            throw new Error('Invalid argument.');
        }

        asyncCall(function () {
            callback(undefined);
        });
    }


    /**
     * イベントを発行します。
     */
    emit(eventName, value) {
        return emitter.emit(eventName, value);
    }


    /**
     * イベント リスナーを登録します。
     */
    on(eventName, listener) {
        return emitter.on(eventName, listener);
    }


    /**
     * 一回しか使用されないイベント リスナーを登録します。
     */
    once(eventName, listener) {
        return emitter.once(eventName, listener);
    }


    /**
     * イベント リスナーを削除します。
     */
    removeListener(eventName, listener) {
        return emitter.removeListener(eventName, listener);
    }


    /**
     * mw-auto-bt-pan-connector モジュールが利用可能かどうかを判定します。
     */
    isAvailable() {
        return false
    }


    /**
     * デバイス スキャンを開始します。
     */
    startScanDevice(callback) {
        if (typeof callback !== 'function') {
            throw new Error('Invalid argument.');
        }

        asyncCall(function () {
            callback(undefined);
        });
    }


    /**
     * デバイス スキャンを停止します。
     */
    stopScanDevice(callback) {
        if (typeof callback !== 'function') {
            throw new Error('Invalid argument.');
        }

        asyncCall(function () {
            callback(undefined);
        });
    }


    /**
     * 自動 BT PAN 接続を有効化します。
     */
    enableAutoConnect() {
    }


    /**
     * 自動 BT PAN 接続を無効化します。
     */
    disableAutoConnect() {
    }


    /**
     * BT PAN 接続の要求を行います。
     */
    doConnect() {
        emitter.emit('connectStart');
        
        asyncCall(function () {
            emitter.emit('connectEnd', ErrorManager.convertForAltair('Not implemented.'));
        });
    }


    /**
     * DENEB と BT PAN 接続されているかどうかを判定します。
     */
    isConnectedToDeneb(callback) {
        if (typeof callback !== 'function') {
            throw new Error('Invalid argument.');
        }

        asyncCall(function () {
            callback(undefined, false);
        });
    }


    /**
     * BT ペアリングされている DENEB の数を取得します。
     */
    getPairedDenebCount() {
        return 0;
    }


    /**
     * BT PAN 接続可能な DENEB の数を取得します。
     */
    getConnectableDenebCount() {
        return 0;
    }


    /**
     * mw-auto-bt-pan-connector モジュールをサスペンドさせます。
     */
    suspend() {
    }


    /**
     * mw-auto-bt-pan-connector モジュールをレジュームさせます。
     */
    resume() {
    }

    /**
     * 検出しているすべての DENEB に対して、
     * 現在 PAN 接続している/していないにかかわらず、
     * disconnectFromNetwork() を実行します。
     */
    bruteForceDisconnectFromAllDenebs(callback) {
        if (typeof callback !== 'function') {
            throw new Error('Invalid argument.');
        }

        asyncCall(function () {
            callback();
        });
    }

    /**
     * 接続対象となる Deneb のデバイス ID を設定します。
     */
    setTargetedDenebDeviceId(deviceId) {
    }
}


module.exports.AutoBtPanConnector = AutoBtPanConnector;
