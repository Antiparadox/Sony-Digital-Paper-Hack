{
  "_args": [
    [
      "mw-auto-bt-pan-connector@git+ssh://git@github.com/LinfinyJapan/dps_node-mw-auto-bt-pan-connector.git",
      "/Users/altair/Work/v1.4.0.19120/dps_utility/release/dps_digitalpaperapp-pc"
    ]
  ],
  "_from": "git+ssh://git@github.com/LinfinyJapan/dps_node-mw-auto-bt-pan-connector.git",
  "_id": "mw-auto-bt-pan-connector@1.0.0",
  "_inCache": true,
  "_installable": true,
  "_location": "/mw-auto-bt-pan-connector",
  "_phantomChildren": {},
  "_requested": {
    "hosted": {
      "directUrl": "https://raw.githubusercontent.com/LinfinyJapan/dps_node-mw-auto-bt-pan-connector/master/package.json",
      "gitUrl": "git://github.com/LinfinyJapan/dps_node-mw-auto-bt-pan-connector.git",
      "httpsUrl": "git+https://github.com/LinfinyJapan/dps_node-mw-auto-bt-pan-connector.git",
      "shortcut": "github:LinfinyJapan/dps_node-mw-auto-bt-pan-connector",
      "ssh": "git@github.com:LinfinyJapan/dps_node-mw-auto-bt-pan-connector.git",
      "sshUrl": "git+ssh://git@github.com/LinfinyJapan/dps_node-mw-auto-bt-pan-connector.git",
      "type": "github"
    },
    "name": "mw-auto-bt-pan-connector",
    "raw": "mw-auto-bt-pan-connector@git+ssh://git@github.com/LinfinyJapan/dps_node-mw-auto-bt-pan-connector.git",
    "rawSpec": "git+ssh://git@github.com/LinfinyJapan/dps_node-mw-auto-bt-pan-connector.git",
    "scope": null,
    "spec": "git+ssh://git@github.com/LinfinyJapan/dps_node-mw-auto-bt-pan-connector.git",
    "type": "hosted"
  },
  "_requiredBy": [
    "/",
    "/mw-discovery-ctrl"
  ],
  "_resolved": "git+ssh://git@github.com/LinfinyJapan/dps_node-mw-auto-bt-pan-connector.git#7055bac7f49105347e25db146db989ac35eba9ae",
  "_shasum": "7ff045d5277c5f9730456b4f6658617b2cda9725",
  "_shrinkwrap": null,
  "_spec": "mw-auto-bt-pan-connector@git+ssh://git@github.com/LinfinyJapan/dps_node-mw-auto-bt-pan-connector.git",
  "_where": "/Users/altair/Work/v1.4.0.19120/dps_utility/release/dps_digitalpaperapp-pc",
  "author": "",
  "bugs": {
    "url": "https://github.com/LinfinyJapan/dps_node-mw-auto-bt-pan-connector/issues"
  },
  "dependencies": {
    "bt-pairing-mw": "git+ssh://git@github.com/LinfinyJapan/dps_node-bt-pairing-mw.git",
    "bt-pan-mw": "git+ssh://git@github.com/LinfinyJapan/dps_node-bt-pan-mw.git",
    "debug": "^2.2.0",
    "mw-error": "git+ssh://git@github.com/LinfinyJapan/dps_node-mw-error.git"
  },
  "description": "<br />",
  "devDependencies": {
    "bt-pairing-mw-limited": "git+ssh://git@github.com/LinfinyJapan/dps_node-bt-pairing-mw.git#test-limited",
    "bt-pan-mw-limited": "git+ssh://git@github.com/LinfinyJapan/dps_node-bt-pan-mw.git#test-limited",
    "chai": "^3.5.0",
    "mocha": "^3.2.0",
    "sinon": "^1.17.7"
  },
  "gitHead": "7055bac7f49105347e25db146db989ac35eba9ae",
  "homepage": "https://github.com/LinfinyJapan/dps_node-mw-auto-bt-pan-connector#readme",
  "license": "ISC",
  "main": "index.js",
  "name": "mw-auto-bt-pan-connector",
  "optionalDependencies": {},
  "readme": "# node-mw-auto-bt-pan-connector\r\n\r\n<br />\r\n\r\n## ■ 概要\r\n\r\nBT ペアリングされている Deneb が 1 台だけ検出されたときに、その Deneb と自動的に BT PAN 接続を行うモジュールです。\r\n\r\nDeneb と BT PAN 接続を行うかどうかの判断は 5 秒おきに行われます。\r\n\r\n<br />\r\n\r\n## ■ SGMO BT モジュール\r\n\r\nmw-auto-bt-pan-connector モジュールは、[bt-pairing-mw](https://github.com/LinfinyJapan/dps_node-bt-pairing-mw) モジュールおよび [bt-pan-mw](https://github.com/LinfinyJapan/dps_node-bt-pan-mw) モジュールを利用しますが、これらのモジュールを利用にあたっては、事前に SGMO さん提供のインストーラーで必要なファイルをインストールしておく必要があります。\r\n\r\n### インストール手順\r\n\r\n1. SGMO さん提供物一式（フォルダまるごと）を自分の PC にコピーします。\r\n    * 提供物一式は下記フォルダにあります。\r\n        * \\\\\\\\jps00004830.jp.sony.com\\project\\MilkyWay\\share\\SGMO\\Bt4DP\r\n1. インストーラーを実行します。\r\n    * インストーラーには x86 環境用のものと x64 環境用のものとがあります。\r\n        * Bt4DPMSI_x86_x.x.x.xxxxx_signed.msi\r\n        * Bt4DPMSI_x64_x.x.x.xxxxx_signed.msi\r\n    * x64 環境では、下記フォルダにインストールされます。\r\n        * C:\\Program Files\\Sony\\Bt4DPMSI\\SBtPANLib\r\n1. インストール先フォルダ内のファイルを開発時用ファイルで上書きします。\r\n    * 下記の zip ファイルを展開してできるファイルで上書きします。\r\n        * SBtPanLib_x.x.x.xxxxx_Release_for_Dev_x86_x64_signed.zip\r\n    * この開発時用ファイルには、利用期限が設定されていて、その期限を過ぎると機能しなくなります。\r\n\r\n<br />\r\n\r\n## ■ メソッド一覧\r\n\r\n- __destroy(callback)__ - オブジェクトを破棄します。\r\n- __emit(eventName, value)__ - イベントを発行します。\r\n- __on(eventName, listener)__ - イベント リスナーを登録します。\r\n- __once(eventName, listener)__ - 一回しか使用されないイベント リスナーを登録します。\r\n- __removeListener(eventName, listener)__ - イベント リスナーを削除します。\r\n- __isAvailable()__ - mw-auto-bt-pan-connector モジュールが利用可能かどうかを判定します。\r\n- __startScanDevice(callback)__ - デバイス スキャンを開始します。\r\n- __stopScanDevice(callback)__ - デバイス スキャンを停止します。\r\n- __enableAutoConnect()__ - 自動 BT PAN 接続を有効化します。\r\n- __disableAutoConnect()__ - 自動 BT PAN 接続を無効化します。\r\n- __doConnect()__ - BT PAN 接続の要求を行います。\r\n- __isConnectedToDeneb(callback)__ - DENEB と BT PAN 接続されているかどうかを判定します。\r\n- __getPairedDenebCount()__ - BT ペアリングされている DENEB の数を取得します。\r\n- __getConnectableDenebCount()__ - BT PAN 接続可能な DENEB の数を取得します。\r\n- __suspend()__ - mw-auto-bt-pan-connector モジュールをサスペンドさせます。\r\n- __resume()__ - mw-auto-bt-pan-connector モジュールをレジュームさせます。\r\n- __bruteForceDisconnectFromAllDenebs(callback)__ - 検出しているすべての DENEB に対して、現在 PAN 接続している/していないにかかわらず、BT PAN 切断処理を実行します。\r\n- __setTargetedDenebDeviceId(deviceId)__ - 接続対象となる Deneb のデバイス ID を設定します。\r\n\r\n<br />\r\n\r\n## ■ イベント一覧\r\n\r\n### :zap:__connectableDenebCountChanged__\r\n\r\nBT PAN 接続可能な DENEB の数に変化があった場合に発行されるイベントです。\r\n\r\n引数 connectableDenebCount には、現在 BT PAN 接続可能な DENEB の数が代入されます。\r\n\r\n```js\r\nconst AutoBtPanConnector = require('mw-auto-bt-pan-connector');\r\nconst autoBtPanConnector = AutoBtPanConnector.getInstance();\r\n\r\nautoBtPanConnector.on('connectableDenebCountChanged', function (connectableDenebCount) {\r\n    console.log('connectableDenebCountChanged: ' + connectableDenebCount.toString());\r\n});\r\n```\r\n\r\n### :zap:__connectStart__\r\n\r\nBT PAN 接続処理が開始される前に発行されるイベントです。 \r\n\r\n引数はありません。\r\n\r\n```js\r\nconst AutoBtPanConnector = require('mw-auto-bt-pan-connector');\r\nconst autoBtPanConnector = AutoBtPanConnector.getInstance();\r\n\r\nautoBtPanConnector.on('connectStart', function () {\r\n    console.log('connectStart');\r\n});\r\n```\r\n\r\n### :zap:__connectEnd__\r\n\r\nBT PAN 接続処理が完了した後に発行されるイベントです。\r\n\r\n引数 error には、処理が成功した場合には undefined、そうでない場合にはエラー情報が代入されます。\r\n\r\n```js\r\nconst AutoBtPanConnector = require('mw-auto-bt-pan-connector');\r\nconst autoBtPanConnector = AutoBtPanConnector.getInstance();\r\n\r\nautoBtPanConnector.on('connectEnd', function (error) {\r\n    console.log('connectEnd: ' + error.toString());\r\n});\r\n```\r\n\r\n### :zap:__connectBusy__\r\n\r\nBT PAN 接続を要求した際に、すでに接続処理が行われていた場合に発行されるイベントです。\r\n\r\n引数はありません。\r\n\r\n```js\r\nconst AutoBtPanConnector = require('mw-auto-bt-pan-connector');\r\nconst autoBtPanConnector = AutoBtPanConnector.getInstance();\r\n\r\nautoBtPanConnector.on('connectBusy', function () {\r\n    console.log('connectBusy');\r\n});\r\n```\r\n\r\n### :zap:__abnormalConditionOfPan__\r\n\r\nBT PAN 接続処理が正しく処理できない状況（リカバリー不能な異常状態）であると判断された場合に発行されるイベントです。\r\n\r\n引数はありません。\r\n\r\n```js\r\nconst AutoBtPanConnector = require('mw-auto-bt-pan-connector');\r\nconst autoBtPanConnector = AutoBtPanConnector.getInstance();\r\n\r\nautoBtPanConnector.on('abnormalConditionOfPan', function () {\r\n    console.log('abnormalConditionOfPan');\r\n});\r\n```\r\n\r\n<br />\r\n\r\n## ■ インスタンスの取得\r\n\r\ngetInstance() で AutoBtPanConnector のインスタンスを取得することができます。\r\n\r\nシングルトンとなっていて、常に同じインスタンスが返されます。\r\n\r\nインスタンスが作成されるのと、SBtPan.exe/SBtPan64.exe がバックグラウンドで起動されます。\r\n\r\n### メイン プロセスからの取得方法\r\n\r\n```js\r\nconst AutoBtPanConnector = require('mw-auto-bt-pan-connector');\r\nconst autoBtPanConnector = AutoBtPanConnector.getInstance();\r\n```\r\n\r\n### レンダラ― プロセスからの取得方法\r\n\r\nレンダラー プロセスからメイン プロセスの mw-auto-bt-pan-connector モジュールにアクセスしたい場合には、レンダラ― プロセスにおいて、下記のように mw-auto-bt-pan-connector モジュールを取得してください。\r\n\r\n```js\r\nconst AutoBtPanConnector = require('electron').remote.require('mw-auto-bt-pan-connector');\r\nconst autoBtPanConnector = AutoBtPanConnector.getInstance();\r\n```\r\n\r\n<br />\r\n\r\n## ■ インスタンスの破棄\r\n\r\ndestroy() で、インスタンスを破棄できます。\r\n\r\ndestroy() を呼び出すと、以降、AutoBtPanConnector の各メソッドは機能しなくなります。\r\n\r\nアプリケーションの終了時に必ず呼び出してください。\r\n\r\n```js\r\nconst AutoBtPanConnector = require('mw-auto-bt-pan-connector');\r\nconst autoBtPanConnector = AutoBtPanConnector.getInstance();\r\n\r\nautoBtPanConnector.destroy(function (error) {\r\n    if (!error) {\r\n        console.log('destroyed');\r\n    } else {\r\n        console.log(error.toString());\r\n    }\r\n});\r\n```\r\n\r\n<br />\r\n\r\n## ■ デバイス スキャンの開始\r\n\r\nstartScanDevice() で、デバイス スキャンを開始することができます。\r\n\r\nデバイス スキャンを開始することで、DENEB の検出・接続が可能となります。\r\n\r\n```js\r\nconst AutoBtPanConnector = require('mw-auto-bt-pan-connector');\r\nconst autoBtPanConnector = AutoBtPanConnector.getInstance();\r\n\r\nautoBtPanConnector.startScanDevice(function (error) {\r\n    if (!error) {\r\n        console.log('started');\r\n    } else {\r\n        console.log(error.toString());\r\n    }\r\n});\r\n```\r\n\r\n<br />\r\n\r\n## ■ デバイス スキャンの停止\r\n\r\nstopScanDevice() で、デバイス スキャンを停止することができます。\r\n\r\nデバイス スキャンを停止すると、DENEB の検出・接続ができなくなります。\r\n\r\nデバイス スキャンの停止中は、enableAutoConnect() で自動 BT PAN 接続を有効化していたとしても、自動 BT PAN 接続は行われなくなります。\r\n\r\nデバイス スキャンの停止中は、getPairedDenebCount() は 0 を返します。\r\n\r\nデバイス スキャンの停止中は、doConnect() は失敗します。\r\n\r\nデバイス スキャンの停止中は、isConnectedToDeneb() は false を返します。\r\n\r\n```js\r\nconst AutoBtPanConnector = require('mw-auto-bt-pan-connector');\r\nconst autoBtPanConnector = AutoBtPanConnector.getInstance();\r\n\r\nautoBtPanConnector.stopScanDevice(function (error) {\r\n    if (!error) {\r\n        console.log('stopped');\r\n    } else {\r\n        console.log(error.toString());\r\n    }\r\n});\r\n```\r\n\r\n<br />\r\n\r\n## ■ 自動 BT PAN 接続の開始方法\r\n\r\nenableAutoConnect() で、自動 BT PAN 接続を開始することができます。\r\n\r\n自動 BT PAN 接続はバックグラウンドで行われます。\r\n\r\nバックグラウンドで、BT PAN 接続が可能と判断されると、:zap:connectStart イベントが発行され、BT PAN 接続処理が開始されます。\r\n\r\nBT PAN 接続処理が完了すると、成功・失敗に関わらず、:zap:connectEnd イベントが発行されます。\r\n\r\n:zap:connectEnd イベントの引数 error で、BT PAN 接続の成功・失敗を判断することができます。成功の場合は undefined、そうでない場合は error オブジェクトが代入されてきます。\r\n\r\nBT PAN 接続処理が開始されたとき、すでに doConnect() などにより BT PAN 接続処理中だった場合には、:zap:conenctBusy イベントが発行されます。\r\n\r\nBT PAN 接続処理が正しく処理できない状況（リカバリー不能な異常状態）であると判断された場合には、:zap:abnormalConditionOfPan イベントが発行されます。\r\n\r\n```js\r\nconst AutoBtPanConnector = require('mw-auto-bt-pan-connector');\r\nconst autoBtPanConnector = AutoBtPanConnector.getInstance();\r\n\r\nautoBtPanConnector.on('connectStart', function () {\r\n    console.log('connectStart');\r\n});\r\n\r\nautoBtPanConnector.on('connectEnd', function (error) {\r\n    if (!error) {\r\n        console.log('connectEnd (success)');\r\n    } else {\r\n        console.log('connectEnd (failure): ' + error.toString());\r\n    }\r\n});\r\n\r\nautoBtPanConnector.on('connectBusy', function () {\r\n    console.log('connectBusy');\r\n});\r\n\r\nautoBtPanConnector.on('abnormalConditionOfPan', function () {\r\n    console.log('abnormalConditionOfPan');\r\n});\r\n\r\nautoBtPanConnector.enableAutoConnect();  \r\n```\r\n\r\n<br />\r\n\r\n## ■ 自動 BT PAN 接続の停止方法\r\n\r\ndisableAutoConnect() で、自動 BT PAN 接続を開始することができます。\r\n\r\nただし、すでに実行中の BT PAN 接続処理はそのまま完了まで継続されます。\r\n\r\n```js\r\nconst AutoBtPanConnector = require('mw-auto-bt-pan-connector');\r\nconst autoBtPanConnector = AutoBtPanConnector.getInstance();\r\n\r\n// Do something ...\r\n\r\nautoBtPanConnector.disableAutoConnect();\r\n```\r\n\r\n<br />\r\n\r\n## ■ DENEB と BT PAN 接続されているかどうかの判定方法\r\n\r\nisConnectedToDeneb() で、現在、DENEB と BT PAN 接続されているかどうかを判定できます。\r\n\r\nBT PAN 接続判定の成功・失敗はコールバックの第 1 引数 error で判断することができます。成功の場合は undefined、そうでない場合は error オブジェクトが代入されてきます。\r\n\r\nBT PAN 接続判定に成功した場合、コールバックの第 2 引数 connected で、接続・未接続を判断することができます。true の場合は接続、false の場合は未接続です。\r\n\r\n```js\r\nconst AutoBtPanConnector = require('mw-auto-bt-pan-connector');\r\nconst autoBtPanConnector = AutoBtPanConnector.getInstance();\r\n\r\nautoBtPanConnector.isConnectedToDeneb(function (error, connected) {\r\n    if (!error) {\r\n        if (connected) {\r\n            console.log('connected');\r\n        } else {\r\n            console.log('not connected');\r\n        }\r\n    } else {\r\n        console.log(error.toString());\r\n    }\r\n});\r\n```\r\n\r\n<br />\r\n\r\n## ■ BT PAN 接続可能な DENEB の数の取得方法\r\n\r\n### イベントで取得\r\n\r\nBT PAN 接続可能な DENEB の数に変化があったとき、:zap:connectableDenebCountChanged イベントが発生します。\r\n\r\n:zap:connectableDenebCountChanged イベントの引数 connectableDenebCount で、現在 BT PAN 接続可能な DENEB の数を知ることができます。\r\n\r\nenableAutoConnect() で自動 BT PAN 接続が有効化されていない場合、:zap:connectableDenebCount イベントは発生しません。\r\n\r\n```js\r\nconst AutoBtPanConnector = require('mw-auto-bt-pan-connector');\r\nconst autoBtPanConnector = AutoBtPanConnector.getInstance();\r\n\r\nautoBtPanConnector.on('connectableDenebCountChanged', function (connectableDenebCount) {\r\n    console.log('connectableDenebCountChanged: ' + connectableDenebCount.toString());\r\n});\r\n\r\nautoBtPanConnector.enableAutoConnect();\r\n```\r\n\r\n### メソッドで取得\r\n\r\ngetConnectableDenebCount メソッドでは、いつでも、自動 BT PAN 接続の有効/無効に関係なく、BT PAN 接続可能な DENEB の数を取得することができます。\r\n\r\n```js\r\nconst AutoBtPanConnector = require('mw-auto-bt-pan-connector');\r\nconst autoBtPanConnector = AutoBtPanConnector.getInstance();\r\n\r\nvar connectableDenebCount = autoBtPanConnector.getConnectableDenebCount();\r\nconsole.log('connectableDenebCount: ' + connectableDenebCount.toString());\r\n```\r\n\r\n<br />\r\n\r\n## ■ 明示的な BT PAN 接続の要求方法\r\n\r\ndoConnect() により、自動 BT PAN 接続の有効・無効にかかわらず、BT PAN 接続を要求することができます。\r\n\r\ndoConnect() により BT PAN 接続が要求されると、:zap:connectStart イベントが発行され、バックグラウンドで BT PAN 接続処理が開始されます。\r\n\r\nBT PAN 接続処理が完了すると、成功・失敗に関わらず、:zap:connectEnd イベントが発行されます。\r\n\r\n:zap:connectEnd イベントの引数 error で、BT PAN 接続の成功・失敗を判断することができます。成功の場合は undefined、そうでない場合は error オブジェクトが代入されてきます。\r\n\r\ndoConnect() により BT PAN 接続要求がなされたとき、すでに BT PAN 接続処理中だった場合には、:zap:conenctBusy イベントが発行されます。\r\n\r\ndoConnect() により BT PAN 接続要求がなされたとき、BT PAN 接続処理が正しく処理できない状況（リカバリー不能な異常状態）であると判断された場合には、:zap:abnormalConditionOfPan イベントが発行されます。\r\n\r\n```js\r\nconst AutoBtPanConnector = require('mw-auto-bt-pan-connector');\r\nconst autoBtPanConnector = AutoBtPanConnector.getInstance();\r\n\r\nautoBtPanConnector.on('connectStart', function () {\r\n    console.log('connectStart');\r\n});\r\n\r\nautoBtPanConnector.on('connectEnd', function (error) {\r\n    console.log('connectEnd: ' + error.toString());\r\n});\r\n\r\nautoBtPanConnector.on('connectBusy', function () {\r\n    console.log('connectBusy');\r\n});\r\n\r\nautoBtPanConnector.on('abnormalConditionOfPan', function () {\r\n    console.log('abnormalConditionOfPan');\r\n});\r\n\r\nautoBtPanConnector.doConnect();\r\n```\r\n\r\n<br />\r\n\r\n## ■ OS のサスペンド/レジュームへの対応方法\r\n\r\n[electron.powerMonitor](http://electron.atom.io/docs/api/power-monitor/) で、OS の :zap:suspend イベントおよび :zap:resume イベントをハンドリングすることができます。\r\n\r\nここでは、メイン プロセスでそれらのイベントをハンドリングする方法を記します。\r\n\r\n```js\r\nconst electron = require('electron');\r\n\r\nconst AutoBtPanConnector = require('mw-auto-bt-pan-connector');\r\nconst autoBtPanConnector = AutoBtPanConnector.getInstance();\r\n\r\nelectron.app.on('ready', function () {\r\n    electron.powerMonitor.on('suspend', function () {\r\n        autoBtPanConnector.suspend();\r\n    });\r\n\r\n    electron.powerMonitor.on('resume', function () {\r\n        autoBtPanConnector.resume();\r\n    });\r\n};\r\n```\r\n\r\n<br />\r\n\r\n## ■ すべての Deneb に対して BT PAN 接続の切断処理を行う方法\r\n\r\nこれは、BT PAN 接続状態に異常が見受けられた場合に、その復旧を期待して行う処理です。\r\n\r\n自動 BT PAN 接続機能が ON の場合、一旦 BT PAN 接続を切断することにより、BT PAN の再接続が行われることになります。これにより BT PAN 接続状態の正常化が期待できます。\r\n\r\nですが、異常状態に陥った場合には、どの Deneb と接続しているかという情報の信頼性も低下していますので、すべての Deneb に対して BT PAN 接続の切断処理を行います。実際に BT PAN 接続されていようがいまいが手当たり次第にです。\r\n\r\n```js\r\nconst electron = require('electron');\r\n\r\nconst AutoBtPanConnector = require('mw-auto-bt-pan-connector');\r\nconst autoBtPanConnector = AutoBtPanConnector.getInstance();\r\n\r\nautoBtPanConnector.bruteForceDisconnectFromAllDenebs(function () {\r\n    console.log('disconnected');\r\n});\r\n```\r\n\r\n<br />\r\n\r\n## ■ デバッグ ログの出力方法\r\n\r\nAltair 起動時に、環境変数 DEBUG を下記のように設定することで、mw-auto-bt-pan-connector のデバッグ ログを出力させることができます。\r\n\r\n```shell-session\r\n$ DEBUG=mw-auto-bt-pan-connector* electron ./ --debug\r\n```\r\n\r\nまた、環境変数 MW_LOG_LEVEL を併せて下記のように設定することで、詳細な BT イベント ログも出力させることができます。\r\n\r\n```shell-session\r\n$ DEBUG=mw-auto-bt-pan-connector* MW_LOG_LEVEL=bt_scan electron ./ --debug\r\n```\r\n\r\n<br />\r\n\r\n## ■ おかしいなと思ったら\r\n\r\nまずは、下記について確認してください。\r\n\r\n- Mac か\r\n    - Mac では、自動 BT PAN 接続機能は利用できません\r\n- Windows の BT 機能は ON か\r\n- Deneb の BT 機能は ON か\r\n- Windows と Deneb は BT ペアリングされているか\r\n- Altair と Deneb はペアリングされているか\r\n- SGMO BT モジュールはインストールされているか\r\n- SGMO BT モジュールの利用期限は過ぎていないか\r\n- 自動 PAN 接続は ON か OFF か\r\n- どんなイベントが発生しているか\r\n- VID/PID は取得できているか\r\n- paired フラグや connected フラグはどうなっているか\r\n    - Zombie Deneb が存在しているかもしれません\r\n- SGMO BT API findNetworks() は正しい情報を返しているか\r\n- SGMO BT API findConnectedNetwork() は正しい情報を返しているか\r\n\r\n<br />\r\n\r\n## ■ 特記\r\n\r\n- BT PAN 接続を切断せずに BT ペアリングの解除（BT デバイスの削除）を行った場合、BT ペアリングされていないのに BT PAN 接続されているデバイスが生成されてしまいます。私たちはこれを Zombie と称しています。\r\n- OS の提供する BT デバイス スキャン画面を開いていると、BT デバイスの検出および通信に悪影響を及ぼすことがわかっています。特にノート PC で、この影響が顕著に現れます。\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/LinfinyJapan/dps_node-mw-auto-bt-pan-connector.git"
  },
  "scripts": {
    "test": "env TEST_MODULE_POSTFIX=-limited mocha -c --reporter spec --timeout 10000 --bail ./spec"
  },
  "version": "1.0.0"
}
