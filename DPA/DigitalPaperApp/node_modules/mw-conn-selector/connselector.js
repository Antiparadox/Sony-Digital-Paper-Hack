/*
    selector.js
    
    created:    [2016-06-03 17:29:13+09:00]
    modified:   [2016-07-08 14:57:58+09:00]
    description:
    Connection Selector
    
*/

'use strict';

const EventEmitter = require('events').EventEmitter;
const emitter = new EventEmitter();

const discovery = require('mw-discovery-ctrl');

/** @exports mw-conn-selector */
const selector = exports;

var deviceMap = {};

/**
 * Phyisical connection type that indicates Deneb direct USB-ether.
 * <br>
 * 物理的な接続が、DenebのUSB-Ether直結であることを示す。
 */
selector.PHY_TYPE_USB = discovery.PHY_TYPE_USB;

/**
 * Phyisical connection type indicates other than above.
 * <br>
 * 物理的な接続が、上記以外の方式であることを示す。
 */
selector.PHY_TYPE_OTHER = discovery.PHY_TYPE_OTHER;

/**
 * Get current scanned list per device.
 *
 * 現在取得できているデバイス毎のリストを取得する。
 *
 * @param {?boolean} Indicate to reload device list.
 *
 * @return {Array.<{deviceId: string, name: string, phyType: PhyType, remoteIp}>} The
 *   list of scanned devices. The `name` indicate host name of the
 *   device. The `deviceID` indicates the unique device serial
 *   number. The `phyType` indicates physical type of connection any
 *   of PHY_TYPE_USB or PHY_TYPE_USB. 
 *   <br>
 *   スキャンされているデバイスのリストを返す。`name` は、デバイスのホ
 *   スト名。`deviceId`は、デバイスユニークなID。`phyType`は、物理的な
 *   接続方式で、PHY_TYPE_USB か、PHY_TYPE_OTHER を返す。
 */
selector.getDeviceList = function(reload) {
  if ( reload ) {
    deviceList = discovery.getDeviceList();

    var deviceMap_ = {};
    
    for ( var i in deviceList ) {
      var device = deviceList[i];
      if ( typeof deviceMap_[device.deviceId] !== 'undefined' ) {
        deviceMap_[device.deviceId] = device;
        continue;
      }
      if ( selectCompare(deviceMap_[device.deviceId], device) ) {
        deviceMap_[device.deviceId] = device;
      }
    }
    deviceMap = deviceMap_;
  }

  // return Object.keys(deviceMap_).map(function(key) { return deviceMap_[key]; });
  return Object.keys(deviceMap).map(function(key) { return deviceMap[key]; });
}

/**
 * Select appropriate connection from deviceList.
 *
 * @note This function is not intended to be used from UI layer.
 * @param {string} deviceId
 * @param {Array} [deviceList]
 */
selector.selectConnection = function(deviceId, deviceList) {
  if ( typeof deviceList === 'undefined' ) {
    deviceList = discovery.getDeviceList();
  }
  var selected = null;
  for ( var i in deviceList ) {
    let device = deviceList[i];
    // 先がちに統一
    if ( deviceId === device.deviceId ) {
      // selected = selectCompare(selected, device);
      if ( selected === null ) {
        selected = device;
        continue;
      }

      if ( this.selectCompare(selected, device) ) {
        selected = device;
      }
    }
  }
  return selected;
}

/**
 * Compare device object.
 *
 * @note This function is not intended to be used from UI layer.
 * @param {object} selected The device currently selected.
 * @param {object} detected The device to be compared.
 * @return {boolean} When detected is more preferred connection, `true`
 *   will be returned. When selected is preferred or no difference in
 *   connection priority, `false` will be returned.
 */
selector.selectCompare = function (selected, detected) {
  // 現在のデバイスが非 USB で、
  if (selected.phyType !== discovery.PHY_TYPE_USB) {
    // 新しく見つかったデバイスが USB の場合は、 
    if (detected.phyType === discovery.PHY_TYPE_USB) {
      // 切り替える。
      return true;
    }
  }

  // 現在のデバイスが IPv4 で、 
  if (selected.remoteIp.indexOf(':') === -1) {
    // 新しく見つかったデバイスが IPv6 の場合は、
    if (detected.remoteIp.indexOf(':') >= 0) {
      // 切り替える。
      return true;
    }
  }

  // あとは、そのまま。
  return false;
}

/**
 * Trigger scan devices.
 *
 * デバイス一覧の更新をトリガーする。
 * 
 * @param {function(?Error)} callback A callback function to receive
 *   scan procedure is done.
 *   <br>
 *   スキャンの手続きが終了した事を受け取るためのCallback。
 *
 */
selector.scanDevices = function(callback) {
  discovery.scanDevices(callback);
  return;
};




/**
 * Adds a event listener function.
 * <br>
 * Eventのリスナーを追加する。
 *
 * @param {string} eventName The name of event.
 *   <br>
 *   イベント名。
 *
 * @param {function(arg)} listener The listener function to register.
 *   <br>
 *   登録する、リスナー関数。
 */
selector.on = function(eventName, listener) {
  return emitter.on(eventName, listener);
};

/**
 * Adds a one time event listener function.
 * <br>
 * 一度だけ呼び出されるEventのリスナーを追加する。
 *
 * @param {string} eventName The name of event.
 *   <br>
 *   イベント名。
 *
 * @param {function(arg)} listener The listener function to register.
 *   <br>
 *   登録する、リスナー関数。
 */
selector.once = function(eventName, listener) {
  return emitter.once(eventName, listener);
};

/**
 * Removes the specified event listener.
 * <br>
 * 指定したEventのリスナーを削除する。
 *
 * @param {string} eventName The name of event.
 *   <br>
 *   イベント名。
 *
 * @param {function(arg)} listener The listener function to remove.
 *   <br>
 *   登録解除する、リスナー関数。
 */
selector.removeListener = function(eventName, listener) {
  return emitter.removeListener(eventName, listener);
};


/**
 * Indicates a selected device appear. The object with deviceId will
 * be passed.  The event will be passed per each devices. So, when
 * the device detected more than one connection. This event will
 * emitted only once.
 * <br>
 * デバイスが、新しく検出されたことを示す。deviceId付きのオブジェクト
 * が渡される。このイベントはデバイスに送信される。あるデバイスが、複数
 * の接続で検出されている場合、このイベントは1度だけ発行される。
 *
 * @event deviceAppear
 * @param {{deviceId: string, name: string, phyType: PhyType, remoteIp:
 *   string, remotePort: number, localIp: string}} device
 */

/**
 * Indicates the device disappear is detected. The object with
 * deviceId will be passed. The event will be passed per each
 * connection. So, when the device detected more than one
 * connection. This event will emitted per connection separately.
 * <br>
 * デバイスが、見えなくなったことが検知された事を示す。deviceId付きの
 * オブジェクトが渡される。このイベントは接続毎に送信される。あるデバイスが、複数
 * の接続で検出されている場合、このイベントは接続毎に独立して送信される。
 *
 * @event deviceDisappear
 * @param {{deviceId: string, name: string, phyType: PhyType, remoteIp:
 *   string, remotePort: number, localIp: string}} device
 */

/**
 * Indicate a way to connection has been changed. Web API call for old
 * URL will fail after this event is passed.
 * <br>
 * デバイスへの接続方法が切り替わったことを示す。このイベントの発行後
 * は、古いURLへのWeb API呼び出しは失敗する。
 *
 * @event deviceConnChanged
 * @param {{deviceId: string, name: string, phyType: PhyType, remoteIp:
 *   string, remotePort: number, localIp: string}} device
 */



function onDeviceAppear(device) {
  var selected = deviceMap[device.deviceId];
  if ( typeof selected === 'undefined' ) {
    deviceMap[device.deviceId] = device;
    emitter.emit('deviceAppear', device);
  } else {
    if ( selector.selectCompare(deviceMap[device.deviceId], device) ) {
      deviceMap[device.deviceId] = device;
      emitter.emit('deviceConnChanged', device);
    }
  }
}

discovery.on('deviceAppear', onDeviceAppear);

function onDeviceDisappear(device) {
  // var deviceList = discovery.getDeviceList();
  var selected = selector.selectConnection(device.deviceId);

  if ( selected === null ) {
    delete deviceMap[device.deviceId];
    emitter.emit('deviceDisappear', device);
  } else {
    if ( deviceMap[device.deviceId].phyType !== selected.phyType ||
         deviceMap[device.deviceId].remoteIp !== selected.remoteIp ) {
      deviceMap[device.deviceId] = selected;
      emitter.emit('deviceConnChanged', selected);
    }
  }
}

discovery.on('deviceDisappear', onDeviceDisappear);

/**
 * Indicates any error occured in or under Connection Selector.
 * <br>
 * いずれかのエラーがConnection Selectorか、それより下で発生したことを通
 * 知する。
 *
 * @event error
 * @type {Error}
 */

function onError(err) {
  emitter.emit('error', err);
};

discovery.on('error', onError);

